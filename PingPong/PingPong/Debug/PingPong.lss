
PingPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800100  00001220  000012b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800274  00800274  00001428  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009af  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c4  00000000  00000000  00001f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000543  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e0  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e2       	ldi	r30, 0x20	; 32
      84:	f2 e1       	ldi	r31, 0x12	; 18
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 37       	cpi	r26, 0x74	; 116
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a4 e7       	ldi	r26, 0x74	; 116
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ae 37       	cpi	r26, 0x7E	; 126
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 b3 01 	call	0x366	; 0x366 <main>
      a6:	0c 94 0e 09 	jmp	0x121c	; 0x121c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
 */ 

#include "ADC_Driver.h"

void ADC_init(){
	clear_bit(INTR_DDR,INTR_bit);
      ae:	b9 98       	cbi	0x17, 1	; 23
      b0:	08 95       	ret

000000b2 <ADC_convert>:
}

//Channel 0-3. (tilsvarer 1-4 i datablad, 0indekserte dem)
uint8_t ADC_convert(char channel){
      b2:	84 30       	cpi	r24, 0x04	; 4
      b4:	08 f0       	brcs	.+2      	; 0xb8 <ADC_convert+0x6>
      b6:	83 e0       	ldi	r24, 0x03	; 3
	
	//ch1 = 0100, ch2 = 0101, ch3 = 0110, ch4 = 0111, dette er lsb
	if(channel > 3) channel = 3;
	else if(channel< 0) channel = 0;
	
	*ADC_memory = ADC_single_ended | channel;
      b8:	84 60       	ori	r24, 0x04	; 4
      ba:	80 93 00 14 	sts	0x1400, r24
	
	//Venter på svar
	while(read_bit(INTR_PIN,INTR_bit));
      be:	b1 99       	sbic	0x16, 1	; 22
      c0:	fe cf       	rjmp	.-4      	; 0xbe <ADC_convert+0xc>
	
	return *ADC_memory;
      c2:	80 91 00 14 	lds	r24, 0x1400
	
}
      c6:	08 95       	ret

000000c8 <SRAM_test>:
	set_bit(SFIOR, XMM2);	//100 -> releaser pc7-pc4 fra minne opperasjoner, til å bli brukt i jtag.
	SRAM_test();
}


void SRAM_test(void){
      c8:	cf 92       	push	r12
      ca:	df 92       	push	r13
      cc:	ef 92       	push	r14
      ce:	ff 92       	push	r15
      d0:	0f 93       	push	r16
      d2:	1f 93       	push	r17
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
      d8:	8a e0       	ldi	r24, 0x0A	; 10
      da:	91 e0       	ldi	r25, 0x01	; 1
      dc:	9f 93       	push	r25
      de:	8f 93       	push	r24
      e0:	0e 94 80 04 	call	0x900	; 0x900 <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
      e4:	0e 94 25 04 	call	0x84a	; 0x84a <rand>
      e8:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
      ea:	0e 94 2a 04 	call	0x854	; 0x854 <srand>
      ee:	0f 90       	pop	r0
      f0:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
      f2:	c0 e0       	ldi	r28, 0x00	; 0
      f4:	d0 e0       	ldi	r29, 0x00	; 0


void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
      f6:	00 e0       	ldi	r16, 0x00	; 0
      f8:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
		uint8_t some_value = rand();
		ext_ram[i] = some_value;					//Setter inn en tilfeldig verdi
		uint8_t retreived_value = ext_ram[i];		//Måler den tilbake
		if (retreived_value != some_value) {		//Registrerer om den ble rett.
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
      fa:	0f 2e       	mov	r0, r31
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	ef 2e       	mov	r14, r31
     100:	f1 e0       	ldi	r31, 0x01	; 1
     102:	ff 2e       	mov	r15, r31
     104:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
		uint8_t some_value = rand();
     106:	0e 94 25 04 	call	0x84a	; 0x84a <rand>
     10a:	fe 01       	movw	r30, r28
     10c:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;					//Setter inn en tilfeldig verdi
     10e:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];		//Måler den tilbake
     110:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {		//Registrerer om den ble rett.
     112:	28 17       	cp	r18, r24
     114:	a9 f0       	breq	.+42     	; 0x140 <SRAM_test+0x78>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
     116:	99 27       	eor	r25, r25
     118:	9f 93       	push	r25
     11a:	8f 93       	push	r24
     11c:	1f 92       	push	r1
     11e:	2f 93       	push	r18
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	ff 92       	push	r15
     126:	ef 92       	push	r14
     128:	0e 94 80 04 	call	0x900	; 0x900 <printf>
			write_errors++;
     12c:	0f 5f       	subi	r16, 0xFF	; 255
     12e:	1f 4f       	sbci	r17, 0xFF	; 255
     130:	8d b7       	in	r24, 0x3d	; 61
     132:	9e b7       	in	r25, 0x3e	; 62
     134:	08 96       	adiw	r24, 0x08	; 8
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	9e bf       	out	0x3e, r25	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
     140:	21 96       	adiw	r28, 0x01	; 1
     142:	c1 15       	cp	r28, r1
     144:	98 e0       	ldi	r25, 0x08	; 8
     146:	d9 07       	cpc	r29, r25
     148:	f1 f6       	brne	.-68     	; 0x106 <SRAM_test+0x3e>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
     14a:	c6 01       	movw	r24, r12
     14c:	0e 94 2a 04 	call	0x854	; 0x854 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     150:	c0 e0       	ldi	r28, 0x00	; 0
     152:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     154:	e1 2c       	mov	r14, r1
     156:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     158:	0f 2e       	mov	r0, r31
     15a:	fc e5       	ldi	r31, 0x5C	; 92
     15c:	cf 2e       	mov	r12, r31
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	df 2e       	mov	r13, r31
     162:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     164:	0e 94 25 04 	call	0x84a	; 0x84a <rand>
     168:	fe 01       	movw	r30, r28
     16a:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     16c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     16e:	28 17       	cp	r18, r24
     170:	b1 f0       	breq	.+44     	; 0x19e <SRAM_test+0xd6>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
     172:	99 27       	eor	r25, r25
     174:	9f 93       	push	r25
     176:	8f 93       	push	r24
     178:	1f 92       	push	r1
     17a:	2f 93       	push	r18
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	df 92       	push	r13
     182:	cf 92       	push	r12
     184:	0e 94 80 04 	call	0x900	; 0x900 <printf>
			retrieval_errors++;
     188:	8f ef       	ldi	r24, 0xFF	; 255
     18a:	e8 1a       	sub	r14, r24
     18c:	f8 0a       	sbc	r15, r24
     18e:	8d b7       	in	r24, 0x3d	; 61
     190:	9e b7       	in	r25, 0x3e	; 62
     192:	08 96       	adiw	r24, 0x08	; 8
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	9e bf       	out	0x3e, r25	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     19e:	21 96       	adiw	r28, 0x01	; 1
     1a0:	c1 15       	cp	r28, r1
     1a2:	98 e0       	ldi	r25, 0x08	; 8
     1a4:	d9 07       	cpc	r29, r25
     1a6:	f1 f6       	brne	.-68     	; 0x164 <SRAM_test+0x9c>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase \n \n\r", write_errors, retrieval_errors);
     1a8:	ff 92       	push	r15
     1aa:	ef 92       	push	r14
     1ac:	1f 93       	push	r17
     1ae:	0f 93       	push	r16
     1b0:	8a e9       	ldi	r24, 0x9A	; 154
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	9f 93       	push	r25
     1b6:	8f 93       	push	r24
     1b8:	0e 94 80 04 	call	0x900	; 0x900 <printf>
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	08 95       	ret

000001da <SRAM_INIT>:
 */ 

#include "external_SRAM.h"

void SRAM_INIT(void){
	set_bit(MCUCR, SRE);	//External ram endable
     1da:	85 b7       	in	r24, 0x35	; 53
     1dc:	80 68       	ori	r24, 0x80	; 128
     1de:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);	//100 -> releaser pc7-pc4 fra minne opperasjoner, til å bli brukt i jtag.
     1e0:	80 b7       	in	r24, 0x30	; 48
     1e2:	80 62       	ori	r24, 0x20	; 32
     1e4:	80 bf       	out	0x30, r24	; 48
	SRAM_test();
     1e6:	0e 94 64 00 	call	0xc8	; 0xc8 <SRAM_test>
     1ea:	08 95       	ret

000001ec <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     1ec:	5d 9b       	sbis	0x0b, 5	; 11
     1ee:	fe cf       	rjmp	.-4      	; 0x1ec <USART_Transmit>

	//Put data into buffer, sends the data
	UDR0 = data;
     1f0:	8c b9       	out	0x0c, r24	; 12
     1f2:	08 95       	ret

000001f4 <USART_Receive>:
}

unsigned char USART_Receive(void){
	
	//Wait for data to be received
	while( !(UCSR0A & (1<<RXC0)) );
     1f4:	5f 9b       	sbis	0x0b, 7	; 11
     1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <USART_Receive>
	//Get and return received data from buffer
	return UDR0;
     1f8:	8c b1       	in	r24, 0x0c	; 12
}
     1fa:	08 95       	ret

000001fc <USART_Init>:
void USART_Init(){
	//ubbr = F_CPU
	int baudRate = 19200;  //Burde vi bruke BAUD fra h fila her? og burde BAUD vÃ¦re 19200?
	unsigned int ubrr = F_CPU/(16*baudRate) -1;
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (unsigned char)ubrr;
     200:	8f e0       	ldi	r24, 0x0F	; 15
     202:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B	 = (1<<RXEN0)|(1<<TXEN0);
     204:	88 e1       	ldi	r24, 0x18	; 24
     206:	8a b9       	out	0x0a, r24	; 10
		//RXEN:  Aktiverer USART receiver
		//TXEN: Aktiverer USART transmitter
		
	
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     208:	8e e8       	ldi	r24, 0x8E	; 142
     20a:	80 bd       	out	0x20, r24	; 32
		//URSEL: Skriver til UCSRC istedet for UBRRH, ved 1.
		//USBS0: Antall stop bits, 0->1bit, 1->2bit
		//UCZ0/1/2: Character size 011->8bit. 
		
	//Slik at vi kan bruke printf;
	fdevopen(USART_Transmit,USART_Receive);
     20c:	6a ef       	ldi	r22, 0xFA	; 250
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	86 ef       	ldi	r24, 0xF6	; 246
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 35 04 	call	0x86a	; 0x86a <fdevopen>
     218:	08 95       	ret

0000021a <controllers_init>:
 */ 

#include "Controllers.h"

void controllers_init(){
		clear_bit(DDRB, PB2);
     21a:	ba 98       	cbi	0x17, 2	; 23
		clear_bit(DDRB, PB3);
     21c:	bb 98       	cbi	0x17, 3	; 23
		clear_bit(DDRB, PB4);
     21e:	bc 98       	cbi	0x17, 4	; 23
     220:	08 95       	ret

00000222 <joystick_calibrate>:
}


void joystick_calibrate(JoyStick* js){
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ec 01       	movw	r28, r24
	js->x_rest = ADC_convert(channelX);
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     22e:	8e 83       	std	Y+6, r24	; 0x06
	js->y_rest = ADC_convert(channelY);
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     236:	8f 83       	std	Y+7, r24	; 0x07
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <joystick_descreet>:
	js->y_descreet = joystick_descreet(js->y_percent);
	
}

int8_t joystick_descreet(int8_t val){
	if(val > slack_js){
     23e:	8f 31       	cpi	r24, 0x1F	; 31
     240:	3c f4       	brge	.+14     	; 0x250 <joystick_descreet+0x12>
		return 1;
	}
	else if(val < -slack_js){
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	82 3e       	cpi	r24, 0xE2	; 226
     246:	0c f0       	brlt	.+2      	; 0x24a <joystick_descreet+0xc>
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	89 2f       	mov	r24, r25
     24c:	81 95       	neg	r24
     24e:	08 95       	ret
	
}

int8_t joystick_descreet(int8_t val){
	if(val > slack_js){
		return 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
		return -1;
	}
	else{
		return 0;
	}
}
     252:	08 95       	ret

00000254 <joystick_update>:
void joystick_calibrate(JoyStick* js){
	js->x_rest = ADC_convert(channelX);
	js->y_rest = ADC_convert(channelY);
}

void joystick_update(JoyStick* js){
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	ec 01       	movw	r28, r24
	js->x_voltage = ADC_convert(channelX);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     260:	88 83       	st	Y, r24
	js->y_voltage = ADC_convert(channelY);
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     268:	48 2f       	mov	r20, r24
     26a:	89 83       	std	Y+1, r24	; 0x01
	if(js->x_voltage <= js->x_rest){
     26c:	88 81       	ld	r24, Y
     26e:	2e 81       	ldd	r18, Y+6	; 0x06
     270:	28 17       	cp	r18, r24
     272:	90 f0       	brcs	.+36     	; 0x298 <joystick_update+0x44>
		js->x_percent = (js->x_voltage - js->x_rest)*100/(js->x_rest-1);
     274:	62 2f       	mov	r22, r18
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	28 2f       	mov	r18, r24
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	26 1b       	sub	r18, r22
     27e:	37 0b       	sbc	r19, r23
     280:	54 e6       	ldi	r21, 0x64	; 100
     282:	52 9f       	mul	r21, r18
     284:	c0 01       	movw	r24, r0
     286:	53 9f       	mul	r21, r19
     288:	90 0d       	add	r25, r0
     28a:	11 24       	eor	r1, r1
     28c:	61 50       	subi	r22, 0x01	; 1
     28e:	71 09       	sbc	r23, r1
     290:	0e 94 a0 03 	call	0x740	; 0x740 <__divmodhi4>
     294:	6a 83       	std	Y+2, r22	; 0x02
     296:	13 c0       	rjmp	.+38     	; 0x2be <joystick_update+0x6a>
	}
	else{
		js->x_percent = (js->x_voltage - js->x_rest)*100/(255-js->x_rest);
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	68 2f       	mov	r22, r24
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	62 1b       	sub	r22, r18
     2a0:	73 0b       	sbc	r23, r19
     2a2:	84 e6       	ldi	r24, 0x64	; 100
     2a4:	86 9f       	mul	r24, r22
     2a6:	f0 01       	movw	r30, r0
     2a8:	87 9f       	mul	r24, r23
     2aa:	f0 0d       	add	r31, r0
     2ac:	11 24       	eor	r1, r1
     2ae:	6f ef       	ldi	r22, 0xFF	; 255
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	62 1b       	sub	r22, r18
     2b4:	73 0b       	sbc	r23, r19
     2b6:	cf 01       	movw	r24, r30
     2b8:	0e 94 a0 03 	call	0x740	; 0x740 <__divmodhi4>
     2bc:	6a 83       	std	Y+2, r22	; 0x02
	}
	if(js->y_voltage <= js->y_rest){
     2be:	2f 81       	ldd	r18, Y+7	; 0x07
     2c0:	24 17       	cp	r18, r20
     2c2:	88 f0       	brcs	.+34     	; 0x2e6 <joystick_update+0x92>
		js->y_percent = (js->y_voltage - js->y_rest)*100/(js->y_rest-1);
     2c4:	62 2f       	mov	r22, r18
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	46 1b       	sub	r20, r22
     2cc:	57 0b       	sbc	r21, r23
     2ce:	24 e6       	ldi	r18, 0x64	; 100
     2d0:	24 9f       	mul	r18, r20
     2d2:	c0 01       	movw	r24, r0
     2d4:	25 9f       	mul	r18, r21
     2d6:	90 0d       	add	r25, r0
     2d8:	11 24       	eor	r1, r1
     2da:	61 50       	subi	r22, 0x01	; 1
     2dc:	71 09       	sbc	r23, r1
     2de:	0e 94 a0 03 	call	0x740	; 0x740 <__divmodhi4>
     2e2:	6b 83       	std	Y+3, r22	; 0x03
     2e4:	11 c0       	rjmp	.+34     	; 0x308 <joystick_update+0xb4>
	}
	else{
		js->y_percent = (js->y_voltage - js->y_rest)*100/(255-js->y_rest);
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	42 1b       	sub	r20, r18
     2ec:	53 0b       	sbc	r21, r19
     2ee:	64 e6       	ldi	r22, 0x64	; 100
     2f0:	64 9f       	mul	r22, r20
     2f2:	c0 01       	movw	r24, r0
     2f4:	65 9f       	mul	r22, r21
     2f6:	90 0d       	add	r25, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	6f ef       	ldi	r22, 0xFF	; 255
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	62 1b       	sub	r22, r18
     300:	73 0b       	sbc	r23, r19
     302:	0e 94 a0 03 	call	0x740	; 0x740 <__divmodhi4>
     306:	6b 83       	std	Y+3, r22	; 0x03
	}
	
	js->x_descreet = joystick_descreet(js->x_percent);
     308:	8a 81       	ldd	r24, Y+2	; 0x02
     30a:	0e 94 1f 01 	call	0x23e	; 0x23e <joystick_descreet>
     30e:	8c 83       	std	Y+4, r24	; 0x04
	js->y_descreet = joystick_descreet(js->y_percent);
     310:	8b 81       	ldd	r24, Y+3	; 0x03
     312:	0e 94 1f 01 	call	0x23e	; 0x23e <joystick_descreet>
     316:	8d 83       	std	Y+5, r24	; 0x05
	
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <slider_update>:
		return 0;
	}
}


void slider_update(Slider* sl){
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	ec 01       	movw	r28, r24
	sl->voltage = ADC_convert(sl->channel);
     324:	88 81       	ld	r24, Y
     326:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     32a:	89 83       	std	Y+1, r24	; 0x01
	sl->percent = sl->voltage/2.55;
     32c:	68 2f       	mov	r22, r24
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 14 03 	call	0x628	; 0x628 <__floatsisf>
     338:	23 e3       	ldi	r18, 0x33	; 51
     33a:	33 e3       	ldi	r19, 0x33	; 51
     33c:	43 e2       	ldi	r20, 0x23	; 35
     33e:	50 e4       	ldi	r21, 0x40	; 64
     340:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__divsf3>
     344:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fixsfsi>
     348:	6a 83       	std	Y+2, r22	; 0x02
	if(sl->percent < 50-slack_slider){
     34a:	63 32       	cpi	r22, 0x23	; 35
     34c:	1c f4       	brge	.+6      	; 0x354 <slider_update+0x36>
		sl->descreet =	-1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	8b 83       	std	Y+3, r24	; 0x03
     352:	06 c0       	rjmp	.+12     	; 0x360 <slider_update+0x42>
	}
	else if(sl->percent > 50+slack_slider){
     354:	62 34       	cpi	r22, 0x42	; 66
     356:	1c f0       	brlt	.+6      	; 0x35e <slider_update+0x40>
		sl->descreet =	+1;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	8b 83       	std	Y+3, r24	; 0x03
     35c:	01 c0       	rjmp	.+2      	; 0x360 <slider_update+0x42>
	}
	else{
		sl->descreet =	0;
     35e:	1b 82       	std	Y+3, r1	; 0x03
	}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <main>:
#include "Drivers/UsartDriver.h"
#include "Drivers/external_SRAM.h"
#include "Drivers/ADC_Driver.h"
#include "HW_Controll/Controllers.h"

int main(void){
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	60 97       	sbiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
	USART_Init();
     37a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <USART_Init>
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     37e:	88 ef       	ldi	r24, 0xF8	; 248
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	0e 94 94 04 	call	0x928	; 0x928 <puts>
	
	SRAM_INIT();
     386:	0e 94 ed 00 	call	0x1da	; 0x1da <SRAM_INIT>
	ADC_init();
     38a:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	set_bit(DDRB, PB0);
     38e:	b8 9a       	sbi	0x17, 0	; 23
	
	controllers_init();
     390:	0e 94 0d 01 	call	0x21a	; 0x21a <controllers_init>
	JoyStick js;
	Slider s_l;
	Slider s_r;
	joystick_calibrate(&js);
     394:	ce 01       	movw	r24, r28
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	0e 94 11 01 	call	0x222	; 0x222 <joystick_calibrate>
	s_l.channel = 3;
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	89 87       	std	Y+9, r24	; 0x09
	s_r.channel = 2;
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	8d 87       	std	Y+13, r24	; 0x0d
	
	printf("\n\n\n");
     3a4:	85 e1       	ldi	r24, 0x15	; 21
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	0e 94 94 04 	call	0x928	; 0x928 <puts>
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
     3ac:	01 e0       	ldi	r16, 0x01	; 1
     3ae:	10 e0       	ldi	r17, 0x00	; 0
			toggle_bit(PORTB, PB0);
		}
		joystick_update(&js);
		slider_update(&s_l);
		slider_update(&s_r);
		printf("X: %i      \t", js.x_percent);
     3b0:	0f 2e       	mov	r0, r31
     3b2:	f8 e1       	ldi	r31, 0x18	; 24
     3b4:	8f 2e       	mov	r8, r31
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	9f 2e       	mov	r9, r31
     3ba:	f0 2d       	mov	r31, r0
		printf("Y: %i      \t", js.y_percent);
     3bc:	0f 2e       	mov	r0, r31
     3be:	f5 e2       	ldi	r31, 0x25	; 37
     3c0:	af 2e       	mov	r10, r31
     3c2:	f2 e0       	ldi	r31, 0x02	; 2
     3c4:	bf 2e       	mov	r11, r31
     3c6:	f0 2d       	mov	r31, r0
		printf("L: %i      \t", s_l.percent);
     3c8:	0f 2e       	mov	r0, r31
     3ca:	f2 e3       	ldi	r31, 0x32	; 50
     3cc:	cf 2e       	mov	r12, r31
     3ce:	f2 e0       	ldi	r31, 0x02	; 2
     3d0:	df 2e       	mov	r13, r31
     3d2:	f0 2d       	mov	r31, r0
		printf("R: %i      \t", s_r.percent);
     3d4:	0f 2e       	mov	r0, r31
     3d6:	ff e3       	ldi	r31, 0x3F	; 63
     3d8:	ef 2e       	mov	r14, r31
     3da:	f2 e0       	ldi	r31, 0x02	; 2
     3dc:	ff 2e       	mov	r15, r31
     3de:	f0 2d       	mov	r31, r0
		printf("BR: %i     \t", read_bit(PINB,PB2));
     3e0:	0f 2e       	mov	r0, r31
     3e2:	fc e4       	ldi	r31, 0x4C	; 76
     3e4:	6f 2e       	mov	r6, r31
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	7f 2e       	mov	r7, r31
     3ea:	f0 2d       	mov	r31, r0
		printf("BL: %i     \t", read_bit(PINB,PB3));
     3ec:	0f 2e       	mov	r0, r31
     3ee:	f9 e5       	ldi	r31, 0x59	; 89
     3f0:	4f 2e       	mov	r4, r31
     3f2:	f2 e0       	ldi	r31, 0x02	; 2
     3f4:	5f 2e       	mov	r5, r31
     3f6:	f0 2d       	mov	r31, r0
		printf("BJS: %i    \t\r", read_bit(PINB,PB4));
     3f8:	0f 2e       	mov	r0, r31
     3fa:	f6 e6       	ldi	r31, 0x66	; 102
     3fc:	2f 2e       	mov	r2, r31
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	3f 2e       	mov	r3, r31
     402:	f0 2d       	mov	r31, r0
     404:	04 c0       	rjmp	.+8      	; 0x40e <main+0xa8>
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
		if(!(mainLoopCounter%10)){
			toggle_bit(PORTB, PB0);
     406:	88 b3       	in	r24, 0x18	; 24
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	82 27       	eor	r24, r18
     40c:	88 bb       	out	0x18, r24	; 24
		}
		joystick_update(&js);
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	0e 94 2a 01 	call	0x254	; 0x254 <joystick_update>
		slider_update(&s_l);
     416:	ce 01       	movw	r24, r28
     418:	09 96       	adiw	r24, 0x09	; 9
     41a:	0e 94 8f 01 	call	0x31e	; 0x31e <slider_update>
		slider_update(&s_r);
     41e:	ce 01       	movw	r24, r28
     420:	0d 96       	adiw	r24, 0x0d	; 13
     422:	0e 94 8f 01 	call	0x31e	; 0x31e <slider_update>
		printf("X: %i      \t", js.x_percent);
     426:	2b 81       	ldd	r18, Y+3	; 0x03
     428:	82 2f       	mov	r24, r18
     42a:	99 27       	eor	r25, r25
     42c:	87 fd       	sbrc	r24, 7
     42e:	90 95       	com	r25
     430:	9f 93       	push	r25
     432:	2f 93       	push	r18
     434:	9f 92       	push	r9
     436:	8f 92       	push	r8
     438:	0e 94 80 04 	call	0x900	; 0x900 <printf>
		printf("Y: %i      \t", js.y_percent);
     43c:	2c 81       	ldd	r18, Y+4	; 0x04
     43e:	82 2f       	mov	r24, r18
     440:	99 27       	eor	r25, r25
     442:	87 fd       	sbrc	r24, 7
     444:	90 95       	com	r25
     446:	9f 93       	push	r25
     448:	2f 93       	push	r18
     44a:	bf 92       	push	r11
     44c:	af 92       	push	r10
     44e:	0e 94 80 04 	call	0x900	; 0x900 <printf>
		printf("L: %i      \t", s_l.percent);
     452:	2b 85       	ldd	r18, Y+11	; 0x0b
     454:	82 2f       	mov	r24, r18
     456:	99 27       	eor	r25, r25
     458:	87 fd       	sbrc	r24, 7
     45a:	90 95       	com	r25
     45c:	9f 93       	push	r25
     45e:	2f 93       	push	r18
     460:	df 92       	push	r13
     462:	cf 92       	push	r12
     464:	0e 94 80 04 	call	0x900	; 0x900 <printf>
		printf("R: %i      \t", s_r.percent);
     468:	2f 85       	ldd	r18, Y+15	; 0x0f
     46a:	82 2f       	mov	r24, r18
     46c:	99 27       	eor	r25, r25
     46e:	87 fd       	sbrc	r24, 7
     470:	90 95       	com	r25
     472:	9f 93       	push	r25
     474:	2f 93       	push	r18
     476:	ff 92       	push	r15
     478:	ef 92       	push	r14
     47a:	0e 94 80 04 	call	0x900	; 0x900 <printf>
		printf("BR: %i     \t", read_bit(PINB,PB2));
     47e:	86 b3       	in	r24, 0x16	; 22
     480:	84 70       	andi	r24, 0x04	; 4
     482:	1f 92       	push	r1
     484:	8f 93       	push	r24
     486:	7f 92       	push	r7
     488:	6f 92       	push	r6
     48a:	0e 94 80 04 	call	0x900	; 0x900 <printf>
		printf("BL: %i     \t", read_bit(PINB,PB3));
     48e:	86 b3       	in	r24, 0x16	; 22
     490:	88 70       	andi	r24, 0x08	; 8
     492:	1f 92       	push	r1
     494:	8f 93       	push	r24
     496:	5f 92       	push	r5
     498:	4f 92       	push	r4
     49a:	0e 94 80 04 	call	0x900	; 0x900 <printf>
		printf("BJS: %i    \t\r", read_bit(PINB,PB4));
     49e:	86 b3       	in	r24, 0x16	; 22
     4a0:	80 71       	andi	r24, 0x10	; 16
     4a2:	1f 92       	push	r1
     4a4:	8f 93       	push	r24
     4a6:	3f 92       	push	r3
     4a8:	2f 92       	push	r2
     4aa:	0e 94 80 04 	call	0x900	; 0x900 <printf>
	
	printf("\n\n\n");
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
     4ae:	0f 5f       	subi	r16, 0xFF	; 255
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
		if(!(mainLoopCounter%10)){
     4b2:	98 01       	movw	r18, r16
     4b4:	ad ec       	ldi	r26, 0xCD	; 205
     4b6:	bc ec       	ldi	r27, 0xCC	; 204
     4b8:	0e 94 b4 03 	call	0x768	; 0x768 <__umulhisi3>
     4bc:	96 95       	lsr	r25
     4be:	87 95       	ror	r24
     4c0:	96 95       	lsr	r25
     4c2:	87 95       	ror	r24
     4c4:	96 95       	lsr	r25
     4c6:	87 95       	ror	r24
     4c8:	9c 01       	movw	r18, r24
     4ca:	22 0f       	add	r18, r18
     4cc:	33 1f       	adc	r19, r19
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	82 0f       	add	r24, r18
     4dc:	93 1f       	adc	r25, r19
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	08 17       	cp	r16, r24
     4ea:	19 07       	cpc	r17, r25
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <main+0x18a>
     4ee:	8b cf       	rjmp	.-234    	; 0x406 <main+0xa0>
     4f0:	8e cf       	rjmp	.-228    	; 0x40e <main+0xa8>

000004f2 <__divsf3>:
     4f2:	0c d0       	rcall	.+24     	; 0x50c <__divsf3x>
     4f4:	eb c0       	rjmp	.+470    	; 0x6cc <__fp_round>
     4f6:	e3 d0       	rcall	.+454    	; 0x6be <__fp_pscB>
     4f8:	40 f0       	brcs	.+16     	; 0x50a <__stack+0xb>
     4fa:	da d0       	rcall	.+436    	; 0x6b0 <__fp_pscA>
     4fc:	30 f0       	brcs	.+12     	; 0x50a <__stack+0xb>
     4fe:	21 f4       	brne	.+8      	; 0x508 <__stack+0x9>
     500:	5f 3f       	cpi	r21, 0xFF	; 255
     502:	19 f0       	breq	.+6      	; 0x50a <__stack+0xb>
     504:	cc c0       	rjmp	.+408    	; 0x69e <__fp_inf>
     506:	51 11       	cpse	r21, r1
     508:	15 c1       	rjmp	.+554    	; 0x734 <__fp_szero>
     50a:	cf c0       	rjmp	.+414    	; 0x6aa <__fp_nan>

0000050c <__divsf3x>:
     50c:	f0 d0       	rcall	.+480    	; 0x6ee <__fp_split3>
     50e:	98 f3       	brcs	.-26     	; 0x4f6 <__divsf3+0x4>

00000510 <__divsf3_pse>:
     510:	99 23       	and	r25, r25
     512:	c9 f3       	breq	.-14     	; 0x506 <__stack+0x7>
     514:	55 23       	and	r21, r21
     516:	b1 f3       	breq	.-20     	; 0x504 <__stack+0x5>
     518:	95 1b       	sub	r25, r21
     51a:	55 0b       	sbc	r21, r21
     51c:	bb 27       	eor	r27, r27
     51e:	aa 27       	eor	r26, r26
     520:	62 17       	cp	r22, r18
     522:	73 07       	cpc	r23, r19
     524:	84 07       	cpc	r24, r20
     526:	38 f0       	brcs	.+14     	; 0x536 <__divsf3_pse+0x26>
     528:	9f 5f       	subi	r25, 0xFF	; 255
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	22 0f       	add	r18, r18
     52e:	33 1f       	adc	r19, r19
     530:	44 1f       	adc	r20, r20
     532:	aa 1f       	adc	r26, r26
     534:	a9 f3       	breq	.-22     	; 0x520 <__divsf3_pse+0x10>
     536:	33 d0       	rcall	.+102    	; 0x59e <__divsf3_pse+0x8e>
     538:	0e 2e       	mov	r0, r30
     53a:	3a f0       	brmi	.+14     	; 0x54a <__divsf3_pse+0x3a>
     53c:	e0 e8       	ldi	r30, 0x80	; 128
     53e:	30 d0       	rcall	.+96     	; 0x5a0 <__divsf3_pse+0x90>
     540:	91 50       	subi	r25, 0x01	; 1
     542:	50 40       	sbci	r21, 0x00	; 0
     544:	e6 95       	lsr	r30
     546:	00 1c       	adc	r0, r0
     548:	ca f7       	brpl	.-14     	; 0x53c <__divsf3_pse+0x2c>
     54a:	29 d0       	rcall	.+82     	; 0x59e <__divsf3_pse+0x8e>
     54c:	fe 2f       	mov	r31, r30
     54e:	27 d0       	rcall	.+78     	; 0x59e <__divsf3_pse+0x8e>
     550:	66 0f       	add	r22, r22
     552:	77 1f       	adc	r23, r23
     554:	88 1f       	adc	r24, r24
     556:	bb 1f       	adc	r27, r27
     558:	26 17       	cp	r18, r22
     55a:	37 07       	cpc	r19, r23
     55c:	48 07       	cpc	r20, r24
     55e:	ab 07       	cpc	r26, r27
     560:	b0 e8       	ldi	r27, 0x80	; 128
     562:	09 f0       	breq	.+2      	; 0x566 <__divsf3_pse+0x56>
     564:	bb 0b       	sbc	r27, r27
     566:	80 2d       	mov	r24, r0
     568:	bf 01       	movw	r22, r30
     56a:	ff 27       	eor	r31, r31
     56c:	93 58       	subi	r25, 0x83	; 131
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	2a f0       	brmi	.+10     	; 0x57c <__divsf3_pse+0x6c>
     572:	9e 3f       	cpi	r25, 0xFE	; 254
     574:	51 05       	cpc	r21, r1
     576:	68 f0       	brcs	.+26     	; 0x592 <__divsf3_pse+0x82>
     578:	92 c0       	rjmp	.+292    	; 0x69e <__fp_inf>
     57a:	dc c0       	rjmp	.+440    	; 0x734 <__fp_szero>
     57c:	5f 3f       	cpi	r21, 0xFF	; 255
     57e:	ec f3       	brlt	.-6      	; 0x57a <__divsf3_pse+0x6a>
     580:	98 3e       	cpi	r25, 0xE8	; 232
     582:	dc f3       	brlt	.-10     	; 0x57a <__divsf3_pse+0x6a>
     584:	86 95       	lsr	r24
     586:	77 95       	ror	r23
     588:	67 95       	ror	r22
     58a:	b7 95       	ror	r27
     58c:	f7 95       	ror	r31
     58e:	9f 5f       	subi	r25, 0xFF	; 255
     590:	c9 f7       	brne	.-14     	; 0x584 <__divsf3_pse+0x74>
     592:	88 0f       	add	r24, r24
     594:	91 1d       	adc	r25, r1
     596:	96 95       	lsr	r25
     598:	87 95       	ror	r24
     59a:	97 f9       	bld	r25, 7
     59c:	08 95       	ret
     59e:	e1 e0       	ldi	r30, 0x01	; 1
     5a0:	66 0f       	add	r22, r22
     5a2:	77 1f       	adc	r23, r23
     5a4:	88 1f       	adc	r24, r24
     5a6:	bb 1f       	adc	r27, r27
     5a8:	62 17       	cp	r22, r18
     5aa:	73 07       	cpc	r23, r19
     5ac:	84 07       	cpc	r24, r20
     5ae:	ba 07       	cpc	r27, r26
     5b0:	20 f0       	brcs	.+8      	; 0x5ba <__divsf3_pse+0xaa>
     5b2:	62 1b       	sub	r22, r18
     5b4:	73 0b       	sbc	r23, r19
     5b6:	84 0b       	sbc	r24, r20
     5b8:	ba 0b       	sbc	r27, r26
     5ba:	ee 1f       	adc	r30, r30
     5bc:	88 f7       	brcc	.-30     	; 0x5a0 <__divsf3_pse+0x90>
     5be:	e0 95       	com	r30
     5c0:	08 95       	ret

000005c2 <__fixsfsi>:
     5c2:	04 d0       	rcall	.+8      	; 0x5cc <__fixunssfsi>
     5c4:	68 94       	set
     5c6:	b1 11       	cpse	r27, r1
     5c8:	b5 c0       	rjmp	.+362    	; 0x734 <__fp_szero>
     5ca:	08 95       	ret

000005cc <__fixunssfsi>:
     5cc:	98 d0       	rcall	.+304    	; 0x6fe <__fp_splitA>
     5ce:	88 f0       	brcs	.+34     	; 0x5f2 <__fixunssfsi+0x26>
     5d0:	9f 57       	subi	r25, 0x7F	; 127
     5d2:	90 f0       	brcs	.+36     	; 0x5f8 <__fixunssfsi+0x2c>
     5d4:	b9 2f       	mov	r27, r25
     5d6:	99 27       	eor	r25, r25
     5d8:	b7 51       	subi	r27, 0x17	; 23
     5da:	a0 f0       	brcs	.+40     	; 0x604 <__fixunssfsi+0x38>
     5dc:	d1 f0       	breq	.+52     	; 0x612 <__fixunssfsi+0x46>
     5de:	66 0f       	add	r22, r22
     5e0:	77 1f       	adc	r23, r23
     5e2:	88 1f       	adc	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	1a f0       	brmi	.+6      	; 0x5ee <__fixunssfsi+0x22>
     5e8:	ba 95       	dec	r27
     5ea:	c9 f7       	brne	.-14     	; 0x5de <__fixunssfsi+0x12>
     5ec:	12 c0       	rjmp	.+36     	; 0x612 <__fixunssfsi+0x46>
     5ee:	b1 30       	cpi	r27, 0x01	; 1
     5f0:	81 f0       	breq	.+32     	; 0x612 <__fixunssfsi+0x46>
     5f2:	9f d0       	rcall	.+318    	; 0x732 <__fp_zero>
     5f4:	b1 e0       	ldi	r27, 0x01	; 1
     5f6:	08 95       	ret
     5f8:	9c c0       	rjmp	.+312    	; 0x732 <__fp_zero>
     5fa:	67 2f       	mov	r22, r23
     5fc:	78 2f       	mov	r23, r24
     5fe:	88 27       	eor	r24, r24
     600:	b8 5f       	subi	r27, 0xF8	; 248
     602:	39 f0       	breq	.+14     	; 0x612 <__fixunssfsi+0x46>
     604:	b9 3f       	cpi	r27, 0xF9	; 249
     606:	cc f3       	brlt	.-14     	; 0x5fa <__fixunssfsi+0x2e>
     608:	86 95       	lsr	r24
     60a:	77 95       	ror	r23
     60c:	67 95       	ror	r22
     60e:	b3 95       	inc	r27
     610:	d9 f7       	brne	.-10     	; 0x608 <__fixunssfsi+0x3c>
     612:	3e f4       	brtc	.+14     	; 0x622 <__fixunssfsi+0x56>
     614:	90 95       	com	r25
     616:	80 95       	com	r24
     618:	70 95       	com	r23
     61a:	61 95       	neg	r22
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	8f 4f       	sbci	r24, 0xFF	; 255
     620:	9f 4f       	sbci	r25, 0xFF	; 255
     622:	08 95       	ret

00000624 <__floatunsisf>:
     624:	e8 94       	clt
     626:	09 c0       	rjmp	.+18     	; 0x63a <__floatsisf+0x12>

00000628 <__floatsisf>:
     628:	97 fb       	bst	r25, 7
     62a:	3e f4       	brtc	.+14     	; 0x63a <__floatsisf+0x12>
     62c:	90 95       	com	r25
     62e:	80 95       	com	r24
     630:	70 95       	com	r23
     632:	61 95       	neg	r22
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	8f 4f       	sbci	r24, 0xFF	; 255
     638:	9f 4f       	sbci	r25, 0xFF	; 255
     63a:	99 23       	and	r25, r25
     63c:	a9 f0       	breq	.+42     	; 0x668 <__floatsisf+0x40>
     63e:	f9 2f       	mov	r31, r25
     640:	96 e9       	ldi	r25, 0x96	; 150
     642:	bb 27       	eor	r27, r27
     644:	93 95       	inc	r25
     646:	f6 95       	lsr	r31
     648:	87 95       	ror	r24
     64a:	77 95       	ror	r23
     64c:	67 95       	ror	r22
     64e:	b7 95       	ror	r27
     650:	f1 11       	cpse	r31, r1
     652:	f8 cf       	rjmp	.-16     	; 0x644 <__floatsisf+0x1c>
     654:	fa f4       	brpl	.+62     	; 0x694 <__floatsisf+0x6c>
     656:	bb 0f       	add	r27, r27
     658:	11 f4       	brne	.+4      	; 0x65e <__floatsisf+0x36>
     65a:	60 ff       	sbrs	r22, 0
     65c:	1b c0       	rjmp	.+54     	; 0x694 <__floatsisf+0x6c>
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	8f 4f       	sbci	r24, 0xFF	; 255
     664:	9f 4f       	sbci	r25, 0xFF	; 255
     666:	16 c0       	rjmp	.+44     	; 0x694 <__floatsisf+0x6c>
     668:	88 23       	and	r24, r24
     66a:	11 f0       	breq	.+4      	; 0x670 <__floatsisf+0x48>
     66c:	96 e9       	ldi	r25, 0x96	; 150
     66e:	11 c0       	rjmp	.+34     	; 0x692 <__floatsisf+0x6a>
     670:	77 23       	and	r23, r23
     672:	21 f0       	breq	.+8      	; 0x67c <__floatsisf+0x54>
     674:	9e e8       	ldi	r25, 0x8E	; 142
     676:	87 2f       	mov	r24, r23
     678:	76 2f       	mov	r23, r22
     67a:	05 c0       	rjmp	.+10     	; 0x686 <__floatsisf+0x5e>
     67c:	66 23       	and	r22, r22
     67e:	71 f0       	breq	.+28     	; 0x69c <__floatsisf+0x74>
     680:	96 e8       	ldi	r25, 0x86	; 134
     682:	86 2f       	mov	r24, r22
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	2a f0       	brmi	.+10     	; 0x694 <__floatsisf+0x6c>
     68a:	9a 95       	dec	r25
     68c:	66 0f       	add	r22, r22
     68e:	77 1f       	adc	r23, r23
     690:	88 1f       	adc	r24, r24
     692:	da f7       	brpl	.-10     	; 0x68a <__floatsisf+0x62>
     694:	88 0f       	add	r24, r24
     696:	96 95       	lsr	r25
     698:	87 95       	ror	r24
     69a:	97 f9       	bld	r25, 7
     69c:	08 95       	ret

0000069e <__fp_inf>:
     69e:	97 f9       	bld	r25, 7
     6a0:	9f 67       	ori	r25, 0x7F	; 127
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	08 95       	ret

000006aa <__fp_nan>:
     6aa:	9f ef       	ldi	r25, 0xFF	; 255
     6ac:	80 ec       	ldi	r24, 0xC0	; 192
     6ae:	08 95       	ret

000006b0 <__fp_pscA>:
     6b0:	00 24       	eor	r0, r0
     6b2:	0a 94       	dec	r0
     6b4:	16 16       	cp	r1, r22
     6b6:	17 06       	cpc	r1, r23
     6b8:	18 06       	cpc	r1, r24
     6ba:	09 06       	cpc	r0, r25
     6bc:	08 95       	ret

000006be <__fp_pscB>:
     6be:	00 24       	eor	r0, r0
     6c0:	0a 94       	dec	r0
     6c2:	12 16       	cp	r1, r18
     6c4:	13 06       	cpc	r1, r19
     6c6:	14 06       	cpc	r1, r20
     6c8:	05 06       	cpc	r0, r21
     6ca:	08 95       	ret

000006cc <__fp_round>:
     6cc:	09 2e       	mov	r0, r25
     6ce:	03 94       	inc	r0
     6d0:	00 0c       	add	r0, r0
     6d2:	11 f4       	brne	.+4      	; 0x6d8 <__fp_round+0xc>
     6d4:	88 23       	and	r24, r24
     6d6:	52 f0       	brmi	.+20     	; 0x6ec <__fp_round+0x20>
     6d8:	bb 0f       	add	r27, r27
     6da:	40 f4       	brcc	.+16     	; 0x6ec <__fp_round+0x20>
     6dc:	bf 2b       	or	r27, r31
     6de:	11 f4       	brne	.+4      	; 0x6e4 <__fp_round+0x18>
     6e0:	60 ff       	sbrs	r22, 0
     6e2:	04 c0       	rjmp	.+8      	; 0x6ec <__fp_round+0x20>
     6e4:	6f 5f       	subi	r22, 0xFF	; 255
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
     6e8:	8f 4f       	sbci	r24, 0xFF	; 255
     6ea:	9f 4f       	sbci	r25, 0xFF	; 255
     6ec:	08 95       	ret

000006ee <__fp_split3>:
     6ee:	57 fd       	sbrc	r21, 7
     6f0:	90 58       	subi	r25, 0x80	; 128
     6f2:	44 0f       	add	r20, r20
     6f4:	55 1f       	adc	r21, r21
     6f6:	59 f0       	breq	.+22     	; 0x70e <__fp_splitA+0x10>
     6f8:	5f 3f       	cpi	r21, 0xFF	; 255
     6fa:	71 f0       	breq	.+28     	; 0x718 <__fp_splitA+0x1a>
     6fc:	47 95       	ror	r20

000006fe <__fp_splitA>:
     6fe:	88 0f       	add	r24, r24
     700:	97 fb       	bst	r25, 7
     702:	99 1f       	adc	r25, r25
     704:	61 f0       	breq	.+24     	; 0x71e <__fp_splitA+0x20>
     706:	9f 3f       	cpi	r25, 0xFF	; 255
     708:	79 f0       	breq	.+30     	; 0x728 <__fp_splitA+0x2a>
     70a:	87 95       	ror	r24
     70c:	08 95       	ret
     70e:	12 16       	cp	r1, r18
     710:	13 06       	cpc	r1, r19
     712:	14 06       	cpc	r1, r20
     714:	55 1f       	adc	r21, r21
     716:	f2 cf       	rjmp	.-28     	; 0x6fc <__fp_split3+0xe>
     718:	46 95       	lsr	r20
     71a:	f1 df       	rcall	.-30     	; 0x6fe <__fp_splitA>
     71c:	08 c0       	rjmp	.+16     	; 0x72e <__fp_splitA+0x30>
     71e:	16 16       	cp	r1, r22
     720:	17 06       	cpc	r1, r23
     722:	18 06       	cpc	r1, r24
     724:	99 1f       	adc	r25, r25
     726:	f1 cf       	rjmp	.-30     	; 0x70a <__fp_splitA+0xc>
     728:	86 95       	lsr	r24
     72a:	71 05       	cpc	r23, r1
     72c:	61 05       	cpc	r22, r1
     72e:	08 94       	sec
     730:	08 95       	ret

00000732 <__fp_zero>:
     732:	e8 94       	clt

00000734 <__fp_szero>:
     734:	bb 27       	eor	r27, r27
     736:	66 27       	eor	r22, r22
     738:	77 27       	eor	r23, r23
     73a:	cb 01       	movw	r24, r22
     73c:	97 f9       	bld	r25, 7
     73e:	08 95       	ret

00000740 <__divmodhi4>:
     740:	97 fb       	bst	r25, 7
     742:	07 2e       	mov	r0, r23
     744:	16 f4       	brtc	.+4      	; 0x74a <__divmodhi4+0xa>
     746:	00 94       	com	r0
     748:	07 d0       	rcall	.+14     	; 0x758 <__divmodhi4_neg1>
     74a:	77 fd       	sbrc	r23, 7
     74c:	09 d0       	rcall	.+18     	; 0x760 <__divmodhi4_neg2>
     74e:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
     752:	07 fc       	sbrc	r0, 7
     754:	05 d0       	rcall	.+10     	; 0x760 <__divmodhi4_neg2>
     756:	3e f4       	brtc	.+14     	; 0x766 <__divmodhi4_exit>

00000758 <__divmodhi4_neg1>:
     758:	90 95       	com	r25
     75a:	81 95       	neg	r24
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	08 95       	ret

00000760 <__divmodhi4_neg2>:
     760:	70 95       	com	r23
     762:	61 95       	neg	r22
     764:	7f 4f       	sbci	r23, 0xFF	; 255

00000766 <__divmodhi4_exit>:
     766:	08 95       	ret

00000768 <__umulhisi3>:
     768:	a2 9f       	mul	r26, r18
     76a:	b0 01       	movw	r22, r0
     76c:	b3 9f       	mul	r27, r19
     76e:	c0 01       	movw	r24, r0
     770:	a3 9f       	mul	r26, r19
     772:	70 0d       	add	r23, r0
     774:	81 1d       	adc	r24, r1
     776:	11 24       	eor	r1, r1
     778:	91 1d       	adc	r25, r1
     77a:	b2 9f       	mul	r27, r18
     77c:	70 0d       	add	r23, r0
     77e:	81 1d       	adc	r24, r1
     780:	11 24       	eor	r1, r1
     782:	91 1d       	adc	r25, r1
     784:	08 95       	ret

00000786 <__udivmodhi4>:
     786:	aa 1b       	sub	r26, r26
     788:	bb 1b       	sub	r27, r27
     78a:	51 e1       	ldi	r21, 0x11	; 17
     78c:	07 c0       	rjmp	.+14     	; 0x79c <__udivmodhi4_ep>

0000078e <__udivmodhi4_loop>:
     78e:	aa 1f       	adc	r26, r26
     790:	bb 1f       	adc	r27, r27
     792:	a6 17       	cp	r26, r22
     794:	b7 07       	cpc	r27, r23
     796:	10 f0       	brcs	.+4      	; 0x79c <__udivmodhi4_ep>
     798:	a6 1b       	sub	r26, r22
     79a:	b7 0b       	sbc	r27, r23

0000079c <__udivmodhi4_ep>:
     79c:	88 1f       	adc	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	5a 95       	dec	r21
     7a2:	a9 f7       	brne	.-22     	; 0x78e <__udivmodhi4_loop>
     7a4:	80 95       	com	r24
     7a6:	90 95       	com	r25
     7a8:	bc 01       	movw	r22, r24
     7aa:	cd 01       	movw	r24, r26
     7ac:	08 95       	ret

000007ae <do_rand>:
     7ae:	8f 92       	push	r8
     7b0:	9f 92       	push	r9
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
     7c4:	68 81       	ld	r22, Y
     7c6:	79 81       	ldd	r23, Y+1	; 0x01
     7c8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ca:	9b 81       	ldd	r25, Y+3	; 0x03
     7cc:	61 15       	cp	r22, r1
     7ce:	71 05       	cpc	r23, r1
     7d0:	81 05       	cpc	r24, r1
     7d2:	91 05       	cpc	r25, r1
     7d4:	21 f4       	brne	.+8      	; 0x7de <do_rand+0x30>
     7d6:	64 e2       	ldi	r22, 0x24	; 36
     7d8:	79 ed       	ldi	r23, 0xD9	; 217
     7da:	8b e5       	ldi	r24, 0x5B	; 91
     7dc:	97 e0       	ldi	r25, 0x07	; 7
     7de:	2d e1       	ldi	r18, 0x1D	; 29
     7e0:	33 ef       	ldi	r19, 0xF3	; 243
     7e2:	41 e0       	ldi	r20, 0x01	; 1
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	0e 94 83 08 	call	0x1106	; 0x1106 <__divmodsi4>
     7ea:	49 01       	movw	r8, r18
     7ec:	5a 01       	movw	r10, r20
     7ee:	9b 01       	movw	r18, r22
     7f0:	ac 01       	movw	r20, r24
     7f2:	a7 ea       	ldi	r26, 0xA7	; 167
     7f4:	b1 e4       	ldi	r27, 0x41	; 65
     7f6:	0e 94 a2 08 	call	0x1144	; 0x1144 <__muluhisi3>
     7fa:	6b 01       	movw	r12, r22
     7fc:	7c 01       	movw	r14, r24
     7fe:	ac ee       	ldi	r26, 0xEC	; 236
     800:	b4 ef       	ldi	r27, 0xF4	; 244
     802:	a5 01       	movw	r20, r10
     804:	94 01       	movw	r18, r8
     806:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulohisi3>
     80a:	c6 0e       	add	r12, r22
     80c:	d7 1e       	adc	r13, r23
     80e:	e8 1e       	adc	r14, r24
     810:	f9 1e       	adc	r15, r25
     812:	f7 fe       	sbrs	r15, 7
     814:	06 c0       	rjmp	.+12     	; 0x822 <do_rand+0x74>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	c8 1a       	sub	r12, r24
     81a:	d1 08       	sbc	r13, r1
     81c:	e1 08       	sbc	r14, r1
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	f8 0a       	sbc	r15, r24
     822:	c8 82       	st	Y, r12
     824:	d9 82       	std	Y+1, r13	; 0x01
     826:	ea 82       	std	Y+2, r14	; 0x02
     828:	fb 82       	std	Y+3, r15	; 0x03
     82a:	c6 01       	movw	r24, r12
     82c:	9f 77       	andi	r25, 0x7F	; 127
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	cf 90       	pop	r12
     83a:	bf 90       	pop	r11
     83c:	af 90       	pop	r10
     83e:	9f 90       	pop	r9
     840:	8f 90       	pop	r8
     842:	08 95       	ret

00000844 <rand_r>:
     844:	0e 94 d7 03 	call	0x7ae	; 0x7ae <do_rand>
     848:	08 95       	ret

0000084a <rand>:
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <do_rand>
     852:	08 95       	ret

00000854 <srand>:
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	80 93 00 01 	sts	0x0100, r24
     85c:	90 93 01 01 	sts	0x0101, r25
     860:	a0 93 02 01 	sts	0x0102, r26
     864:	b0 93 03 01 	sts	0x0103, r27
     868:	08 95       	ret

0000086a <fdevopen>:
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	8b 01       	movw	r16, r22
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	31 f4       	brne	.+12     	; 0x886 <fdevopen+0x1c>
     87a:	61 15       	cp	r22, r1
     87c:	71 05       	cpc	r23, r1
     87e:	19 f4       	brne	.+6      	; 0x886 <fdevopen+0x1c>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	38 c0       	rjmp	.+112    	; 0x8f6 <fdevopen+0x8c>
     886:	6e e0       	ldi	r22, 0x0E	; 14
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 93 06 	call	0xd26	; 0xd26 <calloc>
     892:	fc 01       	movw	r30, r24
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	a1 f3       	breq	.-24     	; 0x880 <fdevopen+0x16>
     898:	80 e8       	ldi	r24, 0x80	; 128
     89a:	83 83       	std	Z+3, r24	; 0x03
     89c:	01 15       	cp	r16, r1
     89e:	11 05       	cpc	r17, r1
     8a0:	71 f0       	breq	.+28     	; 0x8be <fdevopen+0x54>
     8a2:	13 87       	std	Z+11, r17	; 0x0b
     8a4:	02 87       	std	Z+10, r16	; 0x0a
     8a6:	81 e8       	ldi	r24, 0x81	; 129
     8a8:	83 83       	std	Z+3, r24	; 0x03
     8aa:	80 91 74 02 	lds	r24, 0x0274
     8ae:	90 91 75 02 	lds	r25, 0x0275
     8b2:	89 2b       	or	r24, r25
     8b4:	21 f4       	brne	.+8      	; 0x8be <fdevopen+0x54>
     8b6:	f0 93 75 02 	sts	0x0275, r31
     8ba:	e0 93 74 02 	sts	0x0274, r30
     8be:	20 97       	sbiw	r28, 0x00	; 0
     8c0:	c9 f0       	breq	.+50     	; 0x8f4 <fdevopen+0x8a>
     8c2:	d1 87       	std	Z+9, r29	; 0x09
     8c4:	c0 87       	std	Z+8, r28	; 0x08
     8c6:	83 81       	ldd	r24, Z+3	; 0x03
     8c8:	82 60       	ori	r24, 0x02	; 2
     8ca:	83 83       	std	Z+3, r24	; 0x03
     8cc:	80 91 76 02 	lds	r24, 0x0276
     8d0:	90 91 77 02 	lds	r25, 0x0277
     8d4:	89 2b       	or	r24, r25
     8d6:	71 f4       	brne	.+28     	; 0x8f4 <fdevopen+0x8a>
     8d8:	f0 93 77 02 	sts	0x0277, r31
     8dc:	e0 93 76 02 	sts	0x0276, r30
     8e0:	80 91 78 02 	lds	r24, 0x0278
     8e4:	90 91 79 02 	lds	r25, 0x0279
     8e8:	89 2b       	or	r24, r25
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <fdevopen+0x8a>
     8ec:	f0 93 79 02 	sts	0x0279, r31
     8f0:	e0 93 78 02 	sts	0x0278, r30
     8f4:	cf 01       	movw	r24, r30
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <printf>:
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	e6 e8       	ldi	r30, 0x86	; 134
     906:	f4 e0       	ldi	r31, 0x04	; 4
     908:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__prologue_saves__+0x20>
     90c:	fe 01       	movw	r30, r28
     90e:	35 96       	adiw	r30, 0x05	; 5
     910:	61 91       	ld	r22, Z+
     912:	71 91       	ld	r23, Z+
     914:	af 01       	movw	r20, r30
     916:	80 91 76 02 	lds	r24, 0x0276
     91a:	90 91 77 02 	lds	r25, 0x0277
     91e:	0e 94 c1 04 	call	0x982	; 0x982 <vfprintf>
     922:	e2 e0       	ldi	r30, 0x02	; 2
     924:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__epilogue_restores__+0x20>

00000928 <puts>:
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	e0 91 76 02 	lds	r30, 0x0276
     934:	f0 91 77 02 	lds	r31, 0x0277
     938:	23 81       	ldd	r18, Z+3	; 0x03
     93a:	21 ff       	sbrs	r18, 1
     93c:	1b c0       	rjmp	.+54     	; 0x974 <puts+0x4c>
     93e:	ec 01       	movw	r28, r24
     940:	00 e0       	ldi	r16, 0x00	; 0
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	89 91       	ld	r24, Y+
     946:	60 91 76 02 	lds	r22, 0x0276
     94a:	70 91 77 02 	lds	r23, 0x0277
     94e:	db 01       	movw	r26, r22
     950:	18 96       	adiw	r26, 0x08	; 8
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	19 97       	sbiw	r26, 0x09	; 9
     958:	88 23       	and	r24, r24
     95a:	31 f0       	breq	.+12     	; 0x968 <puts+0x40>
     95c:	09 95       	icall
     95e:	89 2b       	or	r24, r25
     960:	89 f3       	breq	.-30     	; 0x944 <puts+0x1c>
     962:	0f ef       	ldi	r16, 0xFF	; 255
     964:	1f ef       	ldi	r17, 0xFF	; 255
     966:	ee cf       	rjmp	.-36     	; 0x944 <puts+0x1c>
     968:	8a e0       	ldi	r24, 0x0A	; 10
     96a:	09 95       	icall
     96c:	89 2b       	or	r24, r25
     96e:	11 f4       	brne	.+4      	; 0x974 <puts+0x4c>
     970:	c8 01       	movw	r24, r16
     972:	02 c0       	rjmp	.+4      	; 0x978 <puts+0x50>
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	9f ef       	ldi	r25, 0xFF	; 255
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <vfprintf>:
     982:	ac e0       	ldi	r26, 0x0C	; 12
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	e7 ec       	ldi	r30, 0xC7	; 199
     988:	f4 e0       	ldi	r31, 0x04	; 4
     98a:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__prologue_saves__>
     98e:	7c 01       	movw	r14, r24
     990:	6b 01       	movw	r12, r22
     992:	8a 01       	movw	r16, r20
     994:	fc 01       	movw	r30, r24
     996:	17 82       	std	Z+7, r1	; 0x07
     998:	16 82       	std	Z+6, r1	; 0x06
     99a:	83 81       	ldd	r24, Z+3	; 0x03
     99c:	81 ff       	sbrs	r24, 1
     99e:	bd c1       	rjmp	.+890    	; 0xd1a <vfprintf+0x398>
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	4c 01       	movw	r8, r24
     9a6:	f7 01       	movw	r30, r14
     9a8:	93 81       	ldd	r25, Z+3	; 0x03
     9aa:	f6 01       	movw	r30, r12
     9ac:	93 fd       	sbrc	r25, 3
     9ae:	85 91       	lpm	r24, Z+
     9b0:	93 ff       	sbrs	r25, 3
     9b2:	81 91       	ld	r24, Z+
     9b4:	6f 01       	movw	r12, r30
     9b6:	88 23       	and	r24, r24
     9b8:	09 f4       	brne	.+2      	; 0x9bc <vfprintf+0x3a>
     9ba:	ab c1       	rjmp	.+854    	; 0xd12 <vfprintf+0x390>
     9bc:	85 32       	cpi	r24, 0x25	; 37
     9be:	39 f4       	brne	.+14     	; 0x9ce <vfprintf+0x4c>
     9c0:	93 fd       	sbrc	r25, 3
     9c2:	85 91       	lpm	r24, Z+
     9c4:	93 ff       	sbrs	r25, 3
     9c6:	81 91       	ld	r24, Z+
     9c8:	6f 01       	movw	r12, r30
     9ca:	85 32       	cpi	r24, 0x25	; 37
     9cc:	29 f4       	brne	.+10     	; 0x9d8 <vfprintf+0x56>
     9ce:	b7 01       	movw	r22, r14
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     9d6:	e7 cf       	rjmp	.-50     	; 0x9a6 <vfprintf+0x24>
     9d8:	51 2c       	mov	r5, r1
     9da:	31 2c       	mov	r3, r1
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	20 32       	cpi	r18, 0x20	; 32
     9e0:	a0 f4       	brcc	.+40     	; 0xa0a <vfprintf+0x88>
     9e2:	8b 32       	cpi	r24, 0x2B	; 43
     9e4:	69 f0       	breq	.+26     	; 0xa00 <vfprintf+0x7e>
     9e6:	30 f4       	brcc	.+12     	; 0x9f4 <vfprintf+0x72>
     9e8:	80 32       	cpi	r24, 0x20	; 32
     9ea:	59 f0       	breq	.+22     	; 0xa02 <vfprintf+0x80>
     9ec:	83 32       	cpi	r24, 0x23	; 35
     9ee:	69 f4       	brne	.+26     	; 0xa0a <vfprintf+0x88>
     9f0:	20 61       	ori	r18, 0x10	; 16
     9f2:	2c c0       	rjmp	.+88     	; 0xa4c <vfprintf+0xca>
     9f4:	8d 32       	cpi	r24, 0x2D	; 45
     9f6:	39 f0       	breq	.+14     	; 0xa06 <vfprintf+0x84>
     9f8:	80 33       	cpi	r24, 0x30	; 48
     9fa:	39 f4       	brne	.+14     	; 0xa0a <vfprintf+0x88>
     9fc:	21 60       	ori	r18, 0x01	; 1
     9fe:	26 c0       	rjmp	.+76     	; 0xa4c <vfprintf+0xca>
     a00:	22 60       	ori	r18, 0x02	; 2
     a02:	24 60       	ori	r18, 0x04	; 4
     a04:	23 c0       	rjmp	.+70     	; 0xa4c <vfprintf+0xca>
     a06:	28 60       	ori	r18, 0x08	; 8
     a08:	21 c0       	rjmp	.+66     	; 0xa4c <vfprintf+0xca>
     a0a:	27 fd       	sbrc	r18, 7
     a0c:	27 c0       	rjmp	.+78     	; 0xa5c <vfprintf+0xda>
     a0e:	30 ed       	ldi	r19, 0xD0	; 208
     a10:	38 0f       	add	r19, r24
     a12:	3a 30       	cpi	r19, 0x0A	; 10
     a14:	78 f4       	brcc	.+30     	; 0xa34 <vfprintf+0xb2>
     a16:	26 ff       	sbrs	r18, 6
     a18:	06 c0       	rjmp	.+12     	; 0xa26 <vfprintf+0xa4>
     a1a:	fa e0       	ldi	r31, 0x0A	; 10
     a1c:	5f 9e       	mul	r5, r31
     a1e:	30 0d       	add	r19, r0
     a20:	11 24       	eor	r1, r1
     a22:	53 2e       	mov	r5, r19
     a24:	13 c0       	rjmp	.+38     	; 0xa4c <vfprintf+0xca>
     a26:	8a e0       	ldi	r24, 0x0A	; 10
     a28:	38 9e       	mul	r3, r24
     a2a:	30 0d       	add	r19, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	33 2e       	mov	r3, r19
     a30:	20 62       	ori	r18, 0x20	; 32
     a32:	0c c0       	rjmp	.+24     	; 0xa4c <vfprintf+0xca>
     a34:	8e 32       	cpi	r24, 0x2E	; 46
     a36:	21 f4       	brne	.+8      	; 0xa40 <vfprintf+0xbe>
     a38:	26 fd       	sbrc	r18, 6
     a3a:	6b c1       	rjmp	.+726    	; 0xd12 <vfprintf+0x390>
     a3c:	20 64       	ori	r18, 0x40	; 64
     a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0xca>
     a40:	8c 36       	cpi	r24, 0x6C	; 108
     a42:	11 f4       	brne	.+4      	; 0xa48 <vfprintf+0xc6>
     a44:	20 68       	ori	r18, 0x80	; 128
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <vfprintf+0xca>
     a48:	88 36       	cpi	r24, 0x68	; 104
     a4a:	41 f4       	brne	.+16     	; 0xa5c <vfprintf+0xda>
     a4c:	f6 01       	movw	r30, r12
     a4e:	93 fd       	sbrc	r25, 3
     a50:	85 91       	lpm	r24, Z+
     a52:	93 ff       	sbrs	r25, 3
     a54:	81 91       	ld	r24, Z+
     a56:	6f 01       	movw	r12, r30
     a58:	81 11       	cpse	r24, r1
     a5a:	c1 cf       	rjmp	.-126    	; 0x9de <vfprintf+0x5c>
     a5c:	98 2f       	mov	r25, r24
     a5e:	9f 7d       	andi	r25, 0xDF	; 223
     a60:	95 54       	subi	r25, 0x45	; 69
     a62:	93 30       	cpi	r25, 0x03	; 3
     a64:	28 f4       	brcc	.+10     	; 0xa70 <vfprintf+0xee>
     a66:	0c 5f       	subi	r16, 0xFC	; 252
     a68:	1f 4f       	sbci	r17, 0xFF	; 255
     a6a:	ff e3       	ldi	r31, 0x3F	; 63
     a6c:	f9 83       	std	Y+1, r31	; 0x01
     a6e:	0d c0       	rjmp	.+26     	; 0xa8a <vfprintf+0x108>
     a70:	83 36       	cpi	r24, 0x63	; 99
     a72:	31 f0       	breq	.+12     	; 0xa80 <vfprintf+0xfe>
     a74:	83 37       	cpi	r24, 0x73	; 115
     a76:	71 f0       	breq	.+28     	; 0xa94 <vfprintf+0x112>
     a78:	83 35       	cpi	r24, 0x53	; 83
     a7a:	09 f0       	breq	.+2      	; 0xa7e <vfprintf+0xfc>
     a7c:	5b c0       	rjmp	.+182    	; 0xb34 <vfprintf+0x1b2>
     a7e:	22 c0       	rjmp	.+68     	; 0xac4 <vfprintf+0x142>
     a80:	f8 01       	movw	r30, r16
     a82:	80 81       	ld	r24, Z
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	0e 5f       	subi	r16, 0xFE	; 254
     a88:	1f 4f       	sbci	r17, 0xFF	; 255
     a8a:	44 24       	eor	r4, r4
     a8c:	43 94       	inc	r4
     a8e:	51 2c       	mov	r5, r1
     a90:	54 01       	movw	r10, r8
     a92:	15 c0       	rjmp	.+42     	; 0xabe <vfprintf+0x13c>
     a94:	38 01       	movw	r6, r16
     a96:	f2 e0       	ldi	r31, 0x02	; 2
     a98:	6f 0e       	add	r6, r31
     a9a:	71 1c       	adc	r7, r1
     a9c:	f8 01       	movw	r30, r16
     a9e:	a0 80       	ld	r10, Z
     aa0:	b1 80       	ldd	r11, Z+1	; 0x01
     aa2:	26 ff       	sbrs	r18, 6
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <vfprintf+0x12a>
     aa6:	65 2d       	mov	r22, r5
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <vfprintf+0x12e>
     aac:	6f ef       	ldi	r22, 0xFF	; 255
     aae:	7f ef       	ldi	r23, 0xFF	; 255
     ab0:	c5 01       	movw	r24, r10
     ab2:	2c 87       	std	Y+12, r18	; 0x0c
     ab4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <strnlen>
     ab8:	2c 01       	movw	r4, r24
     aba:	83 01       	movw	r16, r6
     abc:	2c 85       	ldd	r18, Y+12	; 0x0c
     abe:	2f 77       	andi	r18, 0x7F	; 127
     ac0:	22 2e       	mov	r2, r18
     ac2:	17 c0       	rjmp	.+46     	; 0xaf2 <vfprintf+0x170>
     ac4:	38 01       	movw	r6, r16
     ac6:	f2 e0       	ldi	r31, 0x02	; 2
     ac8:	6f 0e       	add	r6, r31
     aca:	71 1c       	adc	r7, r1
     acc:	f8 01       	movw	r30, r16
     ace:	a0 80       	ld	r10, Z
     ad0:	b1 80       	ldd	r11, Z+1	; 0x01
     ad2:	26 ff       	sbrs	r18, 6
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <vfprintf+0x15a>
     ad6:	65 2d       	mov	r22, r5
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <vfprintf+0x15e>
     adc:	6f ef       	ldi	r22, 0xFF	; 255
     ade:	7f ef       	ldi	r23, 0xFF	; 255
     ae0:	c5 01       	movw	r24, r10
     ae2:	2c 87       	std	Y+12, r18	; 0x0c
     ae4:	0e 94 d6 07 	call	0xfac	; 0xfac <strnlen_P>
     ae8:	2c 01       	movw	r4, r24
     aea:	2c 85       	ldd	r18, Y+12	; 0x0c
     aec:	20 68       	ori	r18, 0x80	; 128
     aee:	22 2e       	mov	r2, r18
     af0:	83 01       	movw	r16, r6
     af2:	23 fc       	sbrc	r2, 3
     af4:	1b c0       	rjmp	.+54     	; 0xb2c <vfprintf+0x1aa>
     af6:	83 2d       	mov	r24, r3
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	48 16       	cp	r4, r24
     afc:	59 06       	cpc	r5, r25
     afe:	b0 f4       	brcc	.+44     	; 0xb2c <vfprintf+0x1aa>
     b00:	b7 01       	movw	r22, r14
     b02:	80 e2       	ldi	r24, 0x20	; 32
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     b0a:	3a 94       	dec	r3
     b0c:	f4 cf       	rjmp	.-24     	; 0xaf6 <vfprintf+0x174>
     b0e:	f5 01       	movw	r30, r10
     b10:	27 fc       	sbrc	r2, 7
     b12:	85 91       	lpm	r24, Z+
     b14:	27 fe       	sbrs	r2, 7
     b16:	81 91       	ld	r24, Z+
     b18:	5f 01       	movw	r10, r30
     b1a:	b7 01       	movw	r22, r14
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     b22:	31 10       	cpse	r3, r1
     b24:	3a 94       	dec	r3
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	4f 1a       	sub	r4, r31
     b2a:	51 08       	sbc	r5, r1
     b2c:	41 14       	cp	r4, r1
     b2e:	51 04       	cpc	r5, r1
     b30:	71 f7       	brne	.-36     	; 0xb0e <vfprintf+0x18c>
     b32:	e5 c0       	rjmp	.+458    	; 0xcfe <vfprintf+0x37c>
     b34:	84 36       	cpi	r24, 0x64	; 100
     b36:	11 f0       	breq	.+4      	; 0xb3c <vfprintf+0x1ba>
     b38:	89 36       	cpi	r24, 0x69	; 105
     b3a:	39 f5       	brne	.+78     	; 0xb8a <vfprintf+0x208>
     b3c:	f8 01       	movw	r30, r16
     b3e:	27 ff       	sbrs	r18, 7
     b40:	07 c0       	rjmp	.+14     	; 0xb50 <vfprintf+0x1ce>
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	0c 5f       	subi	r16, 0xFC	; 252
     b4c:	1f 4f       	sbci	r17, 0xFF	; 255
     b4e:	08 c0       	rjmp	.+16     	; 0xb60 <vfprintf+0x1de>
     b50:	60 81       	ld	r22, Z
     b52:	71 81       	ldd	r23, Z+1	; 0x01
     b54:	88 27       	eor	r24, r24
     b56:	77 fd       	sbrc	r23, 7
     b58:	80 95       	com	r24
     b5a:	98 2f       	mov	r25, r24
     b5c:	0e 5f       	subi	r16, 0xFE	; 254
     b5e:	1f 4f       	sbci	r17, 0xFF	; 255
     b60:	2f 76       	andi	r18, 0x6F	; 111
     b62:	b2 2e       	mov	r11, r18
     b64:	97 ff       	sbrs	r25, 7
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <vfprintf+0x1f8>
     b68:	90 95       	com	r25
     b6a:	80 95       	com	r24
     b6c:	70 95       	com	r23
     b6e:	61 95       	neg	r22
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	20 68       	ori	r18, 0x80	; 128
     b78:	b2 2e       	mov	r11, r18
     b7a:	2a e0       	ldi	r18, 0x0A	; 10
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	a4 01       	movw	r20, r8
     b80:	0e 94 25 08 	call	0x104a	; 0x104a <__ultoa_invert>
     b84:	a8 2e       	mov	r10, r24
     b86:	a8 18       	sub	r10, r8
     b88:	44 c0       	rjmp	.+136    	; 0xc12 <vfprintf+0x290>
     b8a:	85 37       	cpi	r24, 0x75	; 117
     b8c:	29 f4       	brne	.+10     	; 0xb98 <vfprintf+0x216>
     b8e:	2f 7e       	andi	r18, 0xEF	; 239
     b90:	b2 2e       	mov	r11, r18
     b92:	2a e0       	ldi	r18, 0x0A	; 10
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	25 c0       	rjmp	.+74     	; 0xbe2 <vfprintf+0x260>
     b98:	f2 2f       	mov	r31, r18
     b9a:	f9 7f       	andi	r31, 0xF9	; 249
     b9c:	bf 2e       	mov	r11, r31
     b9e:	8f 36       	cpi	r24, 0x6F	; 111
     ba0:	c1 f0       	breq	.+48     	; 0xbd2 <vfprintf+0x250>
     ba2:	18 f4       	brcc	.+6      	; 0xbaa <vfprintf+0x228>
     ba4:	88 35       	cpi	r24, 0x58	; 88
     ba6:	79 f0       	breq	.+30     	; 0xbc6 <vfprintf+0x244>
     ba8:	b4 c0       	rjmp	.+360    	; 0xd12 <vfprintf+0x390>
     baa:	80 37       	cpi	r24, 0x70	; 112
     bac:	19 f0       	breq	.+6      	; 0xbb4 <vfprintf+0x232>
     bae:	88 37       	cpi	r24, 0x78	; 120
     bb0:	21 f0       	breq	.+8      	; 0xbba <vfprintf+0x238>
     bb2:	af c0       	rjmp	.+350    	; 0xd12 <vfprintf+0x390>
     bb4:	2f 2f       	mov	r18, r31
     bb6:	20 61       	ori	r18, 0x10	; 16
     bb8:	b2 2e       	mov	r11, r18
     bba:	b4 fe       	sbrs	r11, 4
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <vfprintf+0x256>
     bbe:	8b 2d       	mov	r24, r11
     bc0:	84 60       	ori	r24, 0x04	; 4
     bc2:	b8 2e       	mov	r11, r24
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <vfprintf+0x256>
     bc6:	24 ff       	sbrs	r18, 4
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <vfprintf+0x25c>
     bca:	9f 2f       	mov	r25, r31
     bcc:	96 60       	ori	r25, 0x06	; 6
     bce:	b9 2e       	mov	r11, r25
     bd0:	06 c0       	rjmp	.+12     	; 0xbde <vfprintf+0x25c>
     bd2:	28 e0       	ldi	r18, 0x08	; 8
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <vfprintf+0x260>
     bd8:	20 e1       	ldi	r18, 0x10	; 16
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x260>
     bde:	20 e1       	ldi	r18, 0x10	; 16
     be0:	32 e0       	ldi	r19, 0x02	; 2
     be2:	f8 01       	movw	r30, r16
     be4:	b7 fe       	sbrs	r11, 7
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <vfprintf+0x274>
     be8:	60 81       	ld	r22, Z
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	0c 5f       	subi	r16, 0xFC	; 252
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <vfprintf+0x280>
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 5f       	subi	r16, 0xFE	; 254
     c00:	1f 4f       	sbci	r17, 0xFF	; 255
     c02:	a4 01       	movw	r20, r8
     c04:	0e 94 25 08 	call	0x104a	; 0x104a <__ultoa_invert>
     c08:	a8 2e       	mov	r10, r24
     c0a:	a8 18       	sub	r10, r8
     c0c:	fb 2d       	mov	r31, r11
     c0e:	ff 77       	andi	r31, 0x7F	; 127
     c10:	bf 2e       	mov	r11, r31
     c12:	b6 fe       	sbrs	r11, 6
     c14:	0b c0       	rjmp	.+22     	; 0xc2c <vfprintf+0x2aa>
     c16:	2b 2d       	mov	r18, r11
     c18:	2e 7f       	andi	r18, 0xFE	; 254
     c1a:	a5 14       	cp	r10, r5
     c1c:	50 f4       	brcc	.+20     	; 0xc32 <vfprintf+0x2b0>
     c1e:	b4 fe       	sbrs	r11, 4
     c20:	0a c0       	rjmp	.+20     	; 0xc36 <vfprintf+0x2b4>
     c22:	b2 fc       	sbrc	r11, 2
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <vfprintf+0x2b4>
     c26:	2b 2d       	mov	r18, r11
     c28:	2e 7e       	andi	r18, 0xEE	; 238
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <vfprintf+0x2b4>
     c2c:	7a 2c       	mov	r7, r10
     c2e:	2b 2d       	mov	r18, r11
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <vfprintf+0x2b6>
     c32:	7a 2c       	mov	r7, r10
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <vfprintf+0x2b6>
     c36:	75 2c       	mov	r7, r5
     c38:	24 ff       	sbrs	r18, 4
     c3a:	0d c0       	rjmp	.+26     	; 0xc56 <vfprintf+0x2d4>
     c3c:	fe 01       	movw	r30, r28
     c3e:	ea 0d       	add	r30, r10
     c40:	f1 1d       	adc	r31, r1
     c42:	80 81       	ld	r24, Z
     c44:	80 33       	cpi	r24, 0x30	; 48
     c46:	11 f4       	brne	.+4      	; 0xc4c <vfprintf+0x2ca>
     c48:	29 7e       	andi	r18, 0xE9	; 233
     c4a:	09 c0       	rjmp	.+18     	; 0xc5e <vfprintf+0x2dc>
     c4c:	22 ff       	sbrs	r18, 2
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <vfprintf+0x2da>
     c50:	73 94       	inc	r7
     c52:	73 94       	inc	r7
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <vfprintf+0x2dc>
     c56:	82 2f       	mov	r24, r18
     c58:	86 78       	andi	r24, 0x86	; 134
     c5a:	09 f0       	breq	.+2      	; 0xc5e <vfprintf+0x2dc>
     c5c:	73 94       	inc	r7
     c5e:	23 fd       	sbrc	r18, 3
     c60:	13 c0       	rjmp	.+38     	; 0xc88 <vfprintf+0x306>
     c62:	20 ff       	sbrs	r18, 0
     c64:	06 c0       	rjmp	.+12     	; 0xc72 <vfprintf+0x2f0>
     c66:	5a 2c       	mov	r5, r10
     c68:	73 14       	cp	r7, r3
     c6a:	18 f4       	brcc	.+6      	; 0xc72 <vfprintf+0x2f0>
     c6c:	53 0c       	add	r5, r3
     c6e:	57 18       	sub	r5, r7
     c70:	73 2c       	mov	r7, r3
     c72:	73 14       	cp	r7, r3
     c74:	68 f4       	brcc	.+26     	; 0xc90 <vfprintf+0x30e>
     c76:	b7 01       	movw	r22, r14
     c78:	80 e2       	ldi	r24, 0x20	; 32
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	2c 87       	std	Y+12, r18	; 0x0c
     c7e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     c82:	73 94       	inc	r7
     c84:	2c 85       	ldd	r18, Y+12	; 0x0c
     c86:	f5 cf       	rjmp	.-22     	; 0xc72 <vfprintf+0x2f0>
     c88:	73 14       	cp	r7, r3
     c8a:	10 f4       	brcc	.+4      	; 0xc90 <vfprintf+0x30e>
     c8c:	37 18       	sub	r3, r7
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <vfprintf+0x310>
     c90:	31 2c       	mov	r3, r1
     c92:	24 ff       	sbrs	r18, 4
     c94:	12 c0       	rjmp	.+36     	; 0xcba <vfprintf+0x338>
     c96:	b7 01       	movw	r22, r14
     c98:	80 e3       	ldi	r24, 0x30	; 48
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	2c 87       	std	Y+12, r18	; 0x0c
     c9e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     ca2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ca4:	22 ff       	sbrs	r18, 2
     ca6:	17 c0       	rjmp	.+46     	; 0xcd6 <vfprintf+0x354>
     ca8:	21 ff       	sbrs	r18, 1
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <vfprintf+0x330>
     cac:	88 e5       	ldi	r24, 0x58	; 88
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x334>
     cb2:	88 e7       	ldi	r24, 0x78	; 120
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	b7 01       	movw	r22, r14
     cb8:	0c c0       	rjmp	.+24     	; 0xcd2 <vfprintf+0x350>
     cba:	82 2f       	mov	r24, r18
     cbc:	86 78       	andi	r24, 0x86	; 134
     cbe:	59 f0       	breq	.+22     	; 0xcd6 <vfprintf+0x354>
     cc0:	21 fd       	sbrc	r18, 1
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <vfprintf+0x346>
     cc4:	80 e2       	ldi	r24, 0x20	; 32
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <vfprintf+0x348>
     cc8:	8b e2       	ldi	r24, 0x2B	; 43
     cca:	27 fd       	sbrc	r18, 7
     ccc:	8d e2       	ldi	r24, 0x2D	; 45
     cce:	b7 01       	movw	r22, r14
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     cd6:	a5 14       	cp	r10, r5
     cd8:	38 f4       	brcc	.+14     	; 0xce8 <vfprintf+0x366>
     cda:	b7 01       	movw	r22, r14
     cdc:	80 e3       	ldi	r24, 0x30	; 48
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     ce4:	5a 94       	dec	r5
     ce6:	f7 cf       	rjmp	.-18     	; 0xcd6 <vfprintf+0x354>
     ce8:	aa 94       	dec	r10
     cea:	f4 01       	movw	r30, r8
     cec:	ea 0d       	add	r30, r10
     cee:	f1 1d       	adc	r31, r1
     cf0:	80 81       	ld	r24, Z
     cf2:	b7 01       	movw	r22, r14
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     cfa:	a1 10       	cpse	r10, r1
     cfc:	f5 cf       	rjmp	.-22     	; 0xce8 <vfprintf+0x366>
     cfe:	33 20       	and	r3, r3
     d00:	09 f4       	brne	.+2      	; 0xd04 <vfprintf+0x382>
     d02:	51 ce       	rjmp	.-862    	; 0x9a6 <vfprintf+0x24>
     d04:	b7 01       	movw	r22, r14
     d06:	80 e2       	ldi	r24, 0x20	; 32
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <fputc>
     d0e:	3a 94       	dec	r3
     d10:	f6 cf       	rjmp	.-20     	; 0xcfe <vfprintf+0x37c>
     d12:	f7 01       	movw	r30, r14
     d14:	86 81       	ldd	r24, Z+6	; 0x06
     d16:	97 81       	ldd	r25, Z+7	; 0x07
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x39c>
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	9f ef       	ldi	r25, 0xFF	; 255
     d1e:	2c 96       	adiw	r28, 0x0c	; 12
     d20:	e2 e1       	ldi	r30, 0x12	; 18
     d22:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__epilogue_restores__>

00000d26 <calloc>:
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	86 9f       	mul	r24, r22
     d30:	80 01       	movw	r16, r0
     d32:	87 9f       	mul	r24, r23
     d34:	10 0d       	add	r17, r0
     d36:	96 9f       	mul	r25, r22
     d38:	10 0d       	add	r17, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	c8 01       	movw	r24, r16
     d3e:	0e 94 af 06 	call	0xd5e	; 0xd5e <malloc>
     d42:	ec 01       	movw	r28, r24
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	29 f0       	breq	.+10     	; 0xd52 <calloc+0x2c>
     d48:	a8 01       	movw	r20, r16
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <memset>
     d52:	ce 01       	movw	r24, r28
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	08 95       	ret

00000d5e <malloc>:
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	91 05       	cpc	r25, r1
     d66:	10 f4       	brcc	.+4      	; 0xd6c <malloc+0xe>
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	e0 91 7c 02 	lds	r30, 0x027C
     d70:	f0 91 7d 02 	lds	r31, 0x027D
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	39 f1       	breq	.+78     	; 0xdce <malloc+0x70>
     d80:	40 81       	ld	r20, Z
     d82:	51 81       	ldd	r21, Z+1	; 0x01
     d84:	48 17       	cp	r20, r24
     d86:	59 07       	cpc	r21, r25
     d88:	b8 f0       	brcs	.+46     	; 0xdb8 <malloc+0x5a>
     d8a:	48 17       	cp	r20, r24
     d8c:	59 07       	cpc	r21, r25
     d8e:	71 f4       	brne	.+28     	; 0xdac <malloc+0x4e>
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	10 97       	sbiw	r26, 0x00	; 0
     d96:	29 f0       	breq	.+10     	; 0xda2 <malloc+0x44>
     d98:	13 96       	adiw	r26, 0x03	; 3
     d9a:	9c 93       	st	X, r25
     d9c:	8e 93       	st	-X, r24
     d9e:	12 97       	sbiw	r26, 0x02	; 2
     da0:	2c c0       	rjmp	.+88     	; 0xdfa <malloc+0x9c>
     da2:	90 93 7d 02 	sts	0x027D, r25
     da6:	80 93 7c 02 	sts	0x027C, r24
     daa:	27 c0       	rjmp	.+78     	; 0xdfa <malloc+0x9c>
     dac:	21 15       	cp	r18, r1
     dae:	31 05       	cpc	r19, r1
     db0:	31 f0       	breq	.+12     	; 0xdbe <malloc+0x60>
     db2:	42 17       	cp	r20, r18
     db4:	53 07       	cpc	r21, r19
     db6:	18 f0       	brcs	.+6      	; 0xdbe <malloc+0x60>
     db8:	a9 01       	movw	r20, r18
     dba:	db 01       	movw	r26, r22
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <malloc+0x62>
     dbe:	ef 01       	movw	r28, r30
     dc0:	9a 01       	movw	r18, r20
     dc2:	bd 01       	movw	r22, r26
     dc4:	df 01       	movw	r26, r30
     dc6:	02 80       	ldd	r0, Z+2	; 0x02
     dc8:	f3 81       	ldd	r31, Z+3	; 0x03
     dca:	e0 2d       	mov	r30, r0
     dcc:	d7 cf       	rjmp	.-82     	; 0xd7c <malloc+0x1e>
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	f9 f0       	breq	.+62     	; 0xe12 <malloc+0xb4>
     dd4:	28 1b       	sub	r18, r24
     dd6:	39 0b       	sbc	r19, r25
     dd8:	24 30       	cpi	r18, 0x04	; 4
     dda:	31 05       	cpc	r19, r1
     ddc:	80 f4       	brcc	.+32     	; 0xdfe <malloc+0xa0>
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	61 15       	cp	r22, r1
     de4:	71 05       	cpc	r23, r1
     de6:	21 f0       	breq	.+8      	; 0xdf0 <malloc+0x92>
     de8:	fb 01       	movw	r30, r22
     dea:	93 83       	std	Z+3, r25	; 0x03
     dec:	82 83       	std	Z+2, r24	; 0x02
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <malloc+0x9a>
     df0:	90 93 7d 02 	sts	0x027D, r25
     df4:	80 93 7c 02 	sts	0x027C, r24
     df8:	fe 01       	movw	r30, r28
     dfa:	32 96       	adiw	r30, 0x02	; 2
     dfc:	44 c0       	rjmp	.+136    	; 0xe86 <malloc+0x128>
     dfe:	fe 01       	movw	r30, r28
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	81 93       	st	Z+, r24
     e06:	91 93       	st	Z+, r25
     e08:	22 50       	subi	r18, 0x02	; 2
     e0a:	31 09       	sbc	r19, r1
     e0c:	39 83       	std	Y+1, r19	; 0x01
     e0e:	28 83       	st	Y, r18
     e10:	3a c0       	rjmp	.+116    	; 0xe86 <malloc+0x128>
     e12:	20 91 7a 02 	lds	r18, 0x027A
     e16:	30 91 7b 02 	lds	r19, 0x027B
     e1a:	23 2b       	or	r18, r19
     e1c:	41 f4       	brne	.+16     	; 0xe2e <malloc+0xd0>
     e1e:	20 91 06 01 	lds	r18, 0x0106
     e22:	30 91 07 01 	lds	r19, 0x0107
     e26:	30 93 7b 02 	sts	0x027B, r19
     e2a:	20 93 7a 02 	sts	0x027A, r18
     e2e:	20 91 04 01 	lds	r18, 0x0104
     e32:	30 91 05 01 	lds	r19, 0x0105
     e36:	21 15       	cp	r18, r1
     e38:	31 05       	cpc	r19, r1
     e3a:	41 f4       	brne	.+16     	; 0xe4c <malloc+0xee>
     e3c:	2d b7       	in	r18, 0x3d	; 61
     e3e:	3e b7       	in	r19, 0x3e	; 62
     e40:	40 91 08 01 	lds	r20, 0x0108
     e44:	50 91 09 01 	lds	r21, 0x0109
     e48:	24 1b       	sub	r18, r20
     e4a:	35 0b       	sbc	r19, r21
     e4c:	e0 91 7a 02 	lds	r30, 0x027A
     e50:	f0 91 7b 02 	lds	r31, 0x027B
     e54:	e2 17       	cp	r30, r18
     e56:	f3 07       	cpc	r31, r19
     e58:	a0 f4       	brcc	.+40     	; 0xe82 <malloc+0x124>
     e5a:	2e 1b       	sub	r18, r30
     e5c:	3f 0b       	sbc	r19, r31
     e5e:	28 17       	cp	r18, r24
     e60:	39 07       	cpc	r19, r25
     e62:	78 f0       	brcs	.+30     	; 0xe82 <malloc+0x124>
     e64:	ac 01       	movw	r20, r24
     e66:	4e 5f       	subi	r20, 0xFE	; 254
     e68:	5f 4f       	sbci	r21, 0xFF	; 255
     e6a:	24 17       	cp	r18, r20
     e6c:	35 07       	cpc	r19, r21
     e6e:	48 f0       	brcs	.+18     	; 0xe82 <malloc+0x124>
     e70:	4e 0f       	add	r20, r30
     e72:	5f 1f       	adc	r21, r31
     e74:	50 93 7b 02 	sts	0x027B, r21
     e78:	40 93 7a 02 	sts	0x027A, r20
     e7c:	81 93       	st	Z+, r24
     e7e:	91 93       	st	Z+, r25
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <malloc+0x128>
     e82:	e0 e0       	ldi	r30, 0x00	; 0
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	cf 01       	movw	r24, r30
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <free>:
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	09 f4       	brne	.+2      	; 0xe98 <free+0xa>
     e96:	87 c0       	rjmp	.+270    	; 0xfa6 <free+0x118>
     e98:	fc 01       	movw	r30, r24
     e9a:	32 97       	sbiw	r30, 0x02	; 2
     e9c:	13 82       	std	Z+3, r1	; 0x03
     e9e:	12 82       	std	Z+2, r1	; 0x02
     ea0:	c0 91 7c 02 	lds	r28, 0x027C
     ea4:	d0 91 7d 02 	lds	r29, 0x027D
     ea8:	20 97       	sbiw	r28, 0x00	; 0
     eaa:	81 f4       	brne	.+32     	; 0xecc <free+0x3e>
     eac:	20 81       	ld	r18, Z
     eae:	31 81       	ldd	r19, Z+1	; 0x01
     eb0:	28 0f       	add	r18, r24
     eb2:	39 1f       	adc	r19, r25
     eb4:	80 91 7a 02 	lds	r24, 0x027A
     eb8:	90 91 7b 02 	lds	r25, 0x027B
     ebc:	82 17       	cp	r24, r18
     ebe:	93 07       	cpc	r25, r19
     ec0:	79 f5       	brne	.+94     	; 0xf20 <free+0x92>
     ec2:	f0 93 7b 02 	sts	0x027B, r31
     ec6:	e0 93 7a 02 	sts	0x027A, r30
     eca:	6d c0       	rjmp	.+218    	; 0xfa6 <free+0x118>
     ecc:	de 01       	movw	r26, r28
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	ae 17       	cp	r26, r30
     ed4:	bf 07       	cpc	r27, r31
     ed6:	50 f4       	brcc	.+20     	; 0xeec <free+0x5e>
     ed8:	12 96       	adiw	r26, 0x02	; 2
     eda:	4d 91       	ld	r20, X+
     edc:	5c 91       	ld	r21, X
     ede:	13 97       	sbiw	r26, 0x03	; 3
     ee0:	9d 01       	movw	r18, r26
     ee2:	41 15       	cp	r20, r1
     ee4:	51 05       	cpc	r21, r1
     ee6:	09 f1       	breq	.+66     	; 0xf2a <free+0x9c>
     ee8:	da 01       	movw	r26, r20
     eea:	f3 cf       	rjmp	.-26     	; 0xed2 <free+0x44>
     eec:	b3 83       	std	Z+3, r27	; 0x03
     eee:	a2 83       	std	Z+2, r26	; 0x02
     ef0:	40 81       	ld	r20, Z
     ef2:	51 81       	ldd	r21, Z+1	; 0x01
     ef4:	84 0f       	add	r24, r20
     ef6:	95 1f       	adc	r25, r21
     ef8:	8a 17       	cp	r24, r26
     efa:	9b 07       	cpc	r25, r27
     efc:	71 f4       	brne	.+28     	; 0xf1a <free+0x8c>
     efe:	8d 91       	ld	r24, X+
     f00:	9c 91       	ld	r25, X
     f02:	11 97       	sbiw	r26, 0x01	; 1
     f04:	84 0f       	add	r24, r20
     f06:	95 1f       	adc	r25, r21
     f08:	02 96       	adiw	r24, 0x02	; 2
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24
     f0e:	12 96       	adiw	r26, 0x02	; 2
     f10:	8d 91       	ld	r24, X+
     f12:	9c 91       	ld	r25, X
     f14:	13 97       	sbiw	r26, 0x03	; 3
     f16:	93 83       	std	Z+3, r25	; 0x03
     f18:	82 83       	std	Z+2, r24	; 0x02
     f1a:	21 15       	cp	r18, r1
     f1c:	31 05       	cpc	r19, r1
     f1e:	29 f4       	brne	.+10     	; 0xf2a <free+0x9c>
     f20:	f0 93 7d 02 	sts	0x027D, r31
     f24:	e0 93 7c 02 	sts	0x027C, r30
     f28:	3e c0       	rjmp	.+124    	; 0xfa6 <free+0x118>
     f2a:	d9 01       	movw	r26, r18
     f2c:	13 96       	adiw	r26, 0x03	; 3
     f2e:	fc 93       	st	X, r31
     f30:	ee 93       	st	-X, r30
     f32:	12 97       	sbiw	r26, 0x02	; 2
     f34:	4d 91       	ld	r20, X+
     f36:	5d 91       	ld	r21, X+
     f38:	a4 0f       	add	r26, r20
     f3a:	b5 1f       	adc	r27, r21
     f3c:	ea 17       	cp	r30, r26
     f3e:	fb 07       	cpc	r31, r27
     f40:	79 f4       	brne	.+30     	; 0xf60 <free+0xd2>
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	84 0f       	add	r24, r20
     f48:	95 1f       	adc	r25, r21
     f4a:	02 96       	adiw	r24, 0x02	; 2
     f4c:	d9 01       	movw	r26, r18
     f4e:	11 96       	adiw	r26, 0x01	; 1
     f50:	9c 93       	st	X, r25
     f52:	8e 93       	st	-X, r24
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	13 96       	adiw	r26, 0x03	; 3
     f5a:	9c 93       	st	X, r25
     f5c:	8e 93       	st	-X, r24
     f5e:	12 97       	sbiw	r26, 0x02	; 2
     f60:	e0 e0       	ldi	r30, 0x00	; 0
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	9b 81       	ldd	r25, Y+3	; 0x03
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	19 f0       	breq	.+6      	; 0xf72 <free+0xe4>
     f6c:	fe 01       	movw	r30, r28
     f6e:	ec 01       	movw	r28, r24
     f70:	f9 cf       	rjmp	.-14     	; 0xf64 <free+0xd6>
     f72:	ce 01       	movw	r24, r28
     f74:	02 96       	adiw	r24, 0x02	; 2
     f76:	28 81       	ld	r18, Y
     f78:	39 81       	ldd	r19, Y+1	; 0x01
     f7a:	82 0f       	add	r24, r18
     f7c:	93 1f       	adc	r25, r19
     f7e:	20 91 7a 02 	lds	r18, 0x027A
     f82:	30 91 7b 02 	lds	r19, 0x027B
     f86:	28 17       	cp	r18, r24
     f88:	39 07       	cpc	r19, r25
     f8a:	69 f4       	brne	.+26     	; 0xfa6 <free+0x118>
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	29 f4       	brne	.+10     	; 0xf9a <free+0x10c>
     f90:	10 92 7d 02 	sts	0x027D, r1
     f94:	10 92 7c 02 	sts	0x027C, r1
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <free+0x110>
     f9a:	13 82       	std	Z+3, r1	; 0x03
     f9c:	12 82       	std	Z+2, r1	; 0x02
     f9e:	d0 93 7b 02 	sts	0x027B, r29
     fa2:	c0 93 7a 02 	sts	0x027A, r28
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <strnlen_P>:
     fac:	fc 01       	movw	r30, r24
     fae:	05 90       	lpm	r0, Z+
     fb0:	61 50       	subi	r22, 0x01	; 1
     fb2:	70 40       	sbci	r23, 0x00	; 0
     fb4:	01 10       	cpse	r0, r1
     fb6:	d8 f7       	brcc	.-10     	; 0xfae <strnlen_P+0x2>
     fb8:	80 95       	com	r24
     fba:	90 95       	com	r25
     fbc:	8e 0f       	add	r24, r30
     fbe:	9f 1f       	adc	r25, r31
     fc0:	08 95       	ret

00000fc2 <memset>:
     fc2:	dc 01       	movw	r26, r24
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <memset+0x6>
     fc6:	6d 93       	st	X+, r22
     fc8:	41 50       	subi	r20, 0x01	; 1
     fca:	50 40       	sbci	r21, 0x00	; 0
     fcc:	e0 f7       	brcc	.-8      	; 0xfc6 <memset+0x4>
     fce:	08 95       	ret

00000fd0 <strnlen>:
     fd0:	fc 01       	movw	r30, r24
     fd2:	61 50       	subi	r22, 0x01	; 1
     fd4:	70 40       	sbci	r23, 0x00	; 0
     fd6:	01 90       	ld	r0, Z+
     fd8:	01 10       	cpse	r0, r1
     fda:	d8 f7       	brcc	.-10     	; 0xfd2 <strnlen+0x2>
     fdc:	80 95       	com	r24
     fde:	90 95       	com	r25
     fe0:	8e 0f       	add	r24, r30
     fe2:	9f 1f       	adc	r25, r31
     fe4:	08 95       	ret

00000fe6 <fputc>:
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	18 2f       	mov	r17, r24
     ff0:	09 2f       	mov	r16, r25
     ff2:	eb 01       	movw	r28, r22
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	81 fd       	sbrc	r24, 1
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <fputc+0x1a>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	20 c0       	rjmp	.+64     	; 0x1040 <fputc+0x5a>
    1000:	82 ff       	sbrs	r24, 2
    1002:	10 c0       	rjmp	.+32     	; 0x1024 <fputc+0x3e>
    1004:	4e 81       	ldd	r20, Y+6	; 0x06
    1006:	5f 81       	ldd	r21, Y+7	; 0x07
    1008:	2c 81       	ldd	r18, Y+4	; 0x04
    100a:	3d 81       	ldd	r19, Y+5	; 0x05
    100c:	42 17       	cp	r20, r18
    100e:	53 07       	cpc	r21, r19
    1010:	7c f4       	brge	.+30     	; 0x1030 <fputc+0x4a>
    1012:	e8 81       	ld	r30, Y
    1014:	f9 81       	ldd	r31, Y+1	; 0x01
    1016:	9f 01       	movw	r18, r30
    1018:	2f 5f       	subi	r18, 0xFF	; 255
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	39 83       	std	Y+1, r19	; 0x01
    101e:	28 83       	st	Y, r18
    1020:	10 83       	st	Z, r17
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <fputc+0x4a>
    1024:	e8 85       	ldd	r30, Y+8	; 0x08
    1026:	f9 85       	ldd	r31, Y+9	; 0x09
    1028:	81 2f       	mov	r24, r17
    102a:	09 95       	icall
    102c:	89 2b       	or	r24, r25
    102e:	29 f7       	brne	.-54     	; 0xffa <fputc+0x14>
    1030:	2e 81       	ldd	r18, Y+6	; 0x06
    1032:	3f 81       	ldd	r19, Y+7	; 0x07
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	3f 83       	std	Y+7, r19	; 0x07
    103a:	2e 83       	std	Y+6, r18	; 0x06
    103c:	81 2f       	mov	r24, r17
    103e:	90 2f       	mov	r25, r16
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	08 95       	ret

0000104a <__ultoa_invert>:
    104a:	fa 01       	movw	r30, r20
    104c:	aa 27       	eor	r26, r26
    104e:	28 30       	cpi	r18, 0x08	; 8
    1050:	51 f1       	breq	.+84     	; 0x10a6 <__ultoa_invert+0x5c>
    1052:	20 31       	cpi	r18, 0x10	; 16
    1054:	81 f1       	breq	.+96     	; 0x10b6 <__ultoa_invert+0x6c>
    1056:	e8 94       	clt
    1058:	6f 93       	push	r22
    105a:	6e 7f       	andi	r22, 0xFE	; 254
    105c:	6e 5f       	subi	r22, 0xFE	; 254
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	8f 4f       	sbci	r24, 0xFF	; 255
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	af 4f       	sbci	r26, 0xFF	; 255
    1066:	b1 e0       	ldi	r27, 0x01	; 1
    1068:	3e d0       	rcall	.+124    	; 0x10e6 <__ultoa_invert+0x9c>
    106a:	b4 e0       	ldi	r27, 0x04	; 4
    106c:	3c d0       	rcall	.+120    	; 0x10e6 <__ultoa_invert+0x9c>
    106e:	67 0f       	add	r22, r23
    1070:	78 1f       	adc	r23, r24
    1072:	89 1f       	adc	r24, r25
    1074:	9a 1f       	adc	r25, r26
    1076:	a1 1d       	adc	r26, r1
    1078:	68 0f       	add	r22, r24
    107a:	79 1f       	adc	r23, r25
    107c:	8a 1f       	adc	r24, r26
    107e:	91 1d       	adc	r25, r1
    1080:	a1 1d       	adc	r26, r1
    1082:	6a 0f       	add	r22, r26
    1084:	71 1d       	adc	r23, r1
    1086:	81 1d       	adc	r24, r1
    1088:	91 1d       	adc	r25, r1
    108a:	a1 1d       	adc	r26, r1
    108c:	20 d0       	rcall	.+64     	; 0x10ce <__ultoa_invert+0x84>
    108e:	09 f4       	brne	.+2      	; 0x1092 <__ultoa_invert+0x48>
    1090:	68 94       	set
    1092:	3f 91       	pop	r19
    1094:	2a e0       	ldi	r18, 0x0A	; 10
    1096:	26 9f       	mul	r18, r22
    1098:	11 24       	eor	r1, r1
    109a:	30 19       	sub	r19, r0
    109c:	30 5d       	subi	r19, 0xD0	; 208
    109e:	31 93       	st	Z+, r19
    10a0:	de f6       	brtc	.-74     	; 0x1058 <__ultoa_invert+0xe>
    10a2:	cf 01       	movw	r24, r30
    10a4:	08 95       	ret
    10a6:	46 2f       	mov	r20, r22
    10a8:	47 70       	andi	r20, 0x07	; 7
    10aa:	40 5d       	subi	r20, 0xD0	; 208
    10ac:	41 93       	st	Z+, r20
    10ae:	b3 e0       	ldi	r27, 0x03	; 3
    10b0:	0f d0       	rcall	.+30     	; 0x10d0 <__ultoa_invert+0x86>
    10b2:	c9 f7       	brne	.-14     	; 0x10a6 <__ultoa_invert+0x5c>
    10b4:	f6 cf       	rjmp	.-20     	; 0x10a2 <__ultoa_invert+0x58>
    10b6:	46 2f       	mov	r20, r22
    10b8:	4f 70       	andi	r20, 0x0F	; 15
    10ba:	40 5d       	subi	r20, 0xD0	; 208
    10bc:	4a 33       	cpi	r20, 0x3A	; 58
    10be:	18 f0       	brcs	.+6      	; 0x10c6 <__ultoa_invert+0x7c>
    10c0:	49 5d       	subi	r20, 0xD9	; 217
    10c2:	31 fd       	sbrc	r19, 1
    10c4:	40 52       	subi	r20, 0x20	; 32
    10c6:	41 93       	st	Z+, r20
    10c8:	02 d0       	rcall	.+4      	; 0x10ce <__ultoa_invert+0x84>
    10ca:	a9 f7       	brne	.-22     	; 0x10b6 <__ultoa_invert+0x6c>
    10cc:	ea cf       	rjmp	.-44     	; 0x10a2 <__ultoa_invert+0x58>
    10ce:	b4 e0       	ldi	r27, 0x04	; 4
    10d0:	a6 95       	lsr	r26
    10d2:	97 95       	ror	r25
    10d4:	87 95       	ror	r24
    10d6:	77 95       	ror	r23
    10d8:	67 95       	ror	r22
    10da:	ba 95       	dec	r27
    10dc:	c9 f7       	brne	.-14     	; 0x10d0 <__ultoa_invert+0x86>
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	61 05       	cpc	r22, r1
    10e2:	71 05       	cpc	r23, r1
    10e4:	08 95       	ret
    10e6:	9b 01       	movw	r18, r22
    10e8:	ac 01       	movw	r20, r24
    10ea:	0a 2e       	mov	r0, r26
    10ec:	06 94       	lsr	r0
    10ee:	57 95       	ror	r21
    10f0:	47 95       	ror	r20
    10f2:	37 95       	ror	r19
    10f4:	27 95       	ror	r18
    10f6:	ba 95       	dec	r27
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__ultoa_invert+0xa2>
    10fa:	62 0f       	add	r22, r18
    10fc:	73 1f       	adc	r23, r19
    10fe:	84 1f       	adc	r24, r20
    1100:	95 1f       	adc	r25, r21
    1102:	a0 1d       	adc	r26, r0
    1104:	08 95       	ret

00001106 <__divmodsi4>:
    1106:	05 2e       	mov	r0, r21
    1108:	97 fb       	bst	r25, 7
    110a:	1e f4       	brtc	.+6      	; 0x1112 <__divmodsi4+0xc>
    110c:	00 94       	com	r0
    110e:	0e 94 9a 08 	call	0x1134	; 0x1134 <__negsi2>
    1112:	57 fd       	sbrc	r21, 7
    1114:	07 d0       	rcall	.+14     	; 0x1124 <__divmodsi4_neg2>
    1116:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__udivmodsi4>
    111a:	07 fc       	sbrc	r0, 7
    111c:	03 d0       	rcall	.+6      	; 0x1124 <__divmodsi4_neg2>
    111e:	4e f4       	brtc	.+18     	; 0x1132 <__divmodsi4_exit>
    1120:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__negsi2>

00001124 <__divmodsi4_neg2>:
    1124:	50 95       	com	r21
    1126:	40 95       	com	r20
    1128:	30 95       	com	r19
    112a:	21 95       	neg	r18
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	4f 4f       	sbci	r20, 0xFF	; 255
    1130:	5f 4f       	sbci	r21, 0xFF	; 255

00001132 <__divmodsi4_exit>:
    1132:	08 95       	ret

00001134 <__negsi2>:
    1134:	90 95       	com	r25
    1136:	80 95       	com	r24
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	08 95       	ret

00001144 <__muluhisi3>:
    1144:	0e 94 b4 03 	call	0x768	; 0x768 <__umulhisi3>
    1148:	a5 9f       	mul	r26, r21
    114a:	90 0d       	add	r25, r0
    114c:	b4 9f       	mul	r27, r20
    114e:	90 0d       	add	r25, r0
    1150:	a4 9f       	mul	r26, r20
    1152:	80 0d       	add	r24, r0
    1154:	91 1d       	adc	r25, r1
    1156:	11 24       	eor	r1, r1
    1158:	08 95       	ret

0000115a <__mulshisi3>:
    115a:	b7 ff       	sbrs	r27, 7
    115c:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__muluhisi3>

00001160 <__mulohisi3>:
    1160:	0e 94 a2 08 	call	0x1144	; 0x1144 <__muluhisi3>
    1164:	82 1b       	sub	r24, r18
    1166:	93 0b       	sbc	r25, r19
    1168:	08 95       	ret

0000116a <__prologue_saves__>:
    116a:	2f 92       	push	r2
    116c:	3f 92       	push	r3
    116e:	4f 92       	push	r4
    1170:	5f 92       	push	r5
    1172:	6f 92       	push	r6
    1174:	7f 92       	push	r7
    1176:	8f 92       	push	r8
    1178:	9f 92       	push	r9
    117a:	af 92       	push	r10
    117c:	bf 92       	push	r11
    117e:	cf 92       	push	r12
    1180:	df 92       	push	r13
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	ca 1b       	sub	r28, r26
    1194:	db 0b       	sbc	r29, r27
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	09 94       	ijmp

000011a2 <__epilogue_restores__>:
    11a2:	2a 88       	ldd	r2, Y+18	; 0x12
    11a4:	39 88       	ldd	r3, Y+17	; 0x11
    11a6:	48 88       	ldd	r4, Y+16	; 0x10
    11a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    11aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    11ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    11ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    11b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11b4:	b9 84       	ldd	r11, Y+9	; 0x09
    11b6:	c8 84       	ldd	r12, Y+8	; 0x08
    11b8:	df 80       	ldd	r13, Y+7	; 0x07
    11ba:	ee 80       	ldd	r14, Y+6	; 0x06
    11bc:	fd 80       	ldd	r15, Y+5	; 0x05
    11be:	0c 81       	ldd	r16, Y+4	; 0x04
    11c0:	1b 81       	ldd	r17, Y+3	; 0x03
    11c2:	aa 81       	ldd	r26, Y+2	; 0x02
    11c4:	b9 81       	ldd	r27, Y+1	; 0x01
    11c6:	ce 0f       	add	r28, r30
    11c8:	d1 1d       	adc	r29, r1
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	ed 01       	movw	r28, r26
    11d6:	08 95       	ret

000011d8 <__udivmodsi4>:
    11d8:	a1 e2       	ldi	r26, 0x21	; 33
    11da:	1a 2e       	mov	r1, r26
    11dc:	aa 1b       	sub	r26, r26
    11de:	bb 1b       	sub	r27, r27
    11e0:	fd 01       	movw	r30, r26
    11e2:	0d c0       	rjmp	.+26     	; 0x11fe <__udivmodsi4_ep>

000011e4 <__udivmodsi4_loop>:
    11e4:	aa 1f       	adc	r26, r26
    11e6:	bb 1f       	adc	r27, r27
    11e8:	ee 1f       	adc	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	a2 17       	cp	r26, r18
    11ee:	b3 07       	cpc	r27, r19
    11f0:	e4 07       	cpc	r30, r20
    11f2:	f5 07       	cpc	r31, r21
    11f4:	20 f0       	brcs	.+8      	; 0x11fe <__udivmodsi4_ep>
    11f6:	a2 1b       	sub	r26, r18
    11f8:	b3 0b       	sbc	r27, r19
    11fa:	e4 0b       	sbc	r30, r20
    11fc:	f5 0b       	sbc	r31, r21

000011fe <__udivmodsi4_ep>:
    11fe:	66 1f       	adc	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	1a 94       	dec	r1
    1208:	69 f7       	brne	.-38     	; 0x11e4 <__udivmodsi4_loop>
    120a:	60 95       	com	r22
    120c:	70 95       	com	r23
    120e:	80 95       	com	r24
    1210:	90 95       	com	r25
    1212:	9b 01       	movw	r18, r22
    1214:	ac 01       	movw	r20, r24
    1216:	bd 01       	movw	r22, r26
    1218:	cf 01       	movw	r24, r30
    121a:	08 95       	ret

0000121c <_exit>:
    121c:	f8 94       	cli

0000121e <__stop_program>:
    121e:	ff cf       	rjmp	.-2      	; 0x121e <__stop_program>
