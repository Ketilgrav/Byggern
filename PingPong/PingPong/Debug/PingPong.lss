
PingPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  00000e80  00000f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800248  00800248  0000105c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000823  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000496  00000000  00000000  000019ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fa  00000000  00000000  00001e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030c  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000341  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e8       	ldi	r30, 0x80	; 128
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 34       	cpi	r26, 0x48	; 72
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 e4       	ldi	r26, 0x48	; 72
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 35       	cpi	r26, 0x52	; 82
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  a6:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
 */ 

#include "ADC_Driver.h"

void ADC_init(){
	clear_bit(INTR_DDR,INTR_bit);
  ae:	b9 98       	cbi	0x17, 1	; 23
  b0:	08 95       	ret

000000b2 <ADC_convert>:
}

//Channel 0-3. (tilsvarer 1-4 i datablad, 0indekserte dem)
uint8_t ADC_convert(char channel){
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	08 f0       	brcs	.+2      	; 0xb8 <ADC_convert+0x6>
  b6:	83 e0       	ldi	r24, 0x03	; 3
	
	//ch1 = 0100, ch2 = 0101, ch3 = 0110, ch4 = 0111, dette er lsb
	if(channel > 3) channel = 3;
	else if(channel< 0) channel = 0;
	
	*ADC_memory = ADC_single_ended | channel;
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	80 93 00 14 	sts	0x1400, r24
	
	//Venter på svar
	while(read_bit(INTR_PIN,INTR_bit));
  be:	b1 99       	sbic	0x16, 1	; 22
  c0:	fe cf       	rjmp	.-4      	; 0xbe <ADC_convert+0xc>
	
	return *ADC_memory;
  c2:	80 91 00 14 	lds	r24, 0x1400
	
}
  c6:	08 95       	ret

000000c8 <SRAM_test>:
	set_bit(SFIOR, XMM2);	//100 -> releaser pc7-pc4 fra minne opperasjoner, til å bli brukt i jtag.
	SRAM_test();
}


void SRAM_test(void){
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
  d8:	8a e0       	ldi	r24, 0x0A	; 10
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	9f 93       	push	r25
  de:	8f 93       	push	r24
  e0:	0e 94 b0 02 	call	0x560	; 0x560 <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
  e4:	0e 94 55 02 	call	0x4aa	; 0x4aa <rand>
  e8:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
  ea:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <srand>
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	d0 e0       	ldi	r29, 0x00	; 0


void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
		uint8_t some_value = rand();
		ext_ram[i] = some_value;					//Setter inn en tilfeldig verdi
		uint8_t retreived_value = ext_ram[i];		//Måler den tilbake
		if (retreived_value != some_value) {		//Registrerer om den ble rett.
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
  fa:	0f 2e       	mov	r0, r31
  fc:	f2 e2       	ldi	r31, 0x22	; 34
  fe:	ef 2e       	mov	r14, r31
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	ff 2e       	mov	r15, r31
 104:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
		uint8_t some_value = rand();
 106:	0e 94 55 02 	call	0x4aa	; 0x4aa <rand>
 10a:	fe 01       	movw	r30, r28
 10c:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;					//Setter inn en tilfeldig verdi
 10e:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];		//Måler den tilbake
 110:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {		//Registrerer om den ble rett.
 112:	28 17       	cp	r18, r24
 114:	a9 f0       	breq	.+42     	; 0x140 <SRAM_test+0x78>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
 116:	99 27       	eor	r25, r25
 118:	9f 93       	push	r25
 11a:	8f 93       	push	r24
 11c:	1f 92       	push	r1
 11e:	2f 93       	push	r18
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	ff 92       	push	r15
 126:	ef 92       	push	r14
 128:	0e 94 b0 02 	call	0x560	; 0x560 <printf>
			write_errors++;
 12c:	0f 5f       	subi	r16, 0xFF	; 255
 12e:	1f 4f       	sbci	r17, 0xFF	; 255
 130:	8d b7       	in	r24, 0x3d	; 61
 132:	9e b7       	in	r25, 0x3e	; 62
 134:	08 96       	adiw	r24, 0x08	; 8
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	9e bf       	out	0x3e, r25	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	c1 15       	cp	r28, r1
 144:	98 e0       	ldi	r25, 0x08	; 8
 146:	d9 07       	cpc	r29, r25
 148:	f1 f6       	brne	.-68     	; 0x106 <SRAM_test+0x3e>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
 14a:	c6 01       	movw	r24, r12
 14c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 154:	e1 2c       	mov	r14, r1
 156:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
 158:	0f 2e       	mov	r0, r31
 15a:	fc e5       	ldi	r31, 0x5C	; 92
 15c:	cf 2e       	mov	r12, r31
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	df 2e       	mov	r13, r31
 162:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 164:	0e 94 55 02 	call	0x4aa	; 0x4aa <rand>
 168:	fe 01       	movw	r30, r28
 16a:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
 16c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 16e:	28 17       	cp	r18, r24
 170:	b1 f0       	breq	.+44     	; 0x19e <SRAM_test+0xd6>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
 172:	99 27       	eor	r25, r25
 174:	9f 93       	push	r25
 176:	8f 93       	push	r24
 178:	1f 92       	push	r1
 17a:	2f 93       	push	r18
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	df 92       	push	r13
 182:	cf 92       	push	r12
 184:	0e 94 b0 02 	call	0x560	; 0x560 <printf>
			retrieval_errors++;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	e8 1a       	sub	r14, r24
 18c:	f8 0a       	sbc	r15, r24
 18e:	8d b7       	in	r24, 0x3d	; 61
 190:	9e b7       	in	r25, 0x3e	; 62
 192:	08 96       	adiw	r24, 0x08	; 8
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	9e bf       	out	0x3e, r25	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	c1 15       	cp	r28, r1
 1a2:	98 e0       	ldi	r25, 0x08	; 8
 1a4:	d9 07       	cpc	r29, r25
 1a6:	f1 f6       	brne	.-68     	; 0x164 <SRAM_test+0x9c>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase \n \n\r", write_errors, retrieval_errors);
 1a8:	ff 92       	push	r15
 1aa:	ef 92       	push	r14
 1ac:	1f 93       	push	r17
 1ae:	0f 93       	push	r16
 1b0:	8a e9       	ldi	r24, 0x9A	; 154
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	9f 93       	push	r25
 1b6:	8f 93       	push	r24
 1b8:	0e 94 b0 02 	call	0x560	; 0x560 <printf>
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	08 95       	ret

000001da <SRAM_INIT>:
 */ 

#include "external_SRAM.h"

void SRAM_INIT(void){
	set_bit(MCUCR, SRE);	//External ram endable
 1da:	85 b7       	in	r24, 0x35	; 53
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);	//100 -> releaser pc7-pc4 fra minne opperasjoner, til å bli brukt i jtag.
 1e0:	80 b7       	in	r24, 0x30	; 48
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	80 bf       	out	0x30, r24	; 48
	SRAM_test();
 1e6:	0e 94 64 00 	call	0xc8	; 0xc8 <SRAM_test>
 1ea:	08 95       	ret

000001ec <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 1ec:	5d 9b       	sbis	0x0b, 5	; 11
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <USART_Transmit>

	//Put data into buffer, sends the data
	UDR0 = data;
 1f0:	8c b9       	out	0x0c, r24	; 12
 1f2:	08 95       	ret

000001f4 <USART_Receive>:
}

unsigned char USART_Receive(void){
	
	//Wait for data to be received
	while( !(UCSR0A & (1<<RXC0)) );
 1f4:	5f 9b       	sbis	0x0b, 7	; 11
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <USART_Receive>
	//Get and return received data from buffer
	return UDR0;
 1f8:	8c b1       	in	r24, 0x0c	; 12
 1fa:	08 95       	ret

000001fc <USART_Init>:
void USART_Init(){
	//ubbr = F_CPU
	int baudRate = 19200;
	unsigned int ubrr = F_CPU/(16*baudRate) -1;
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (unsigned char)ubrr;
 200:	8f e0       	ldi	r24, 0x0F	; 15
 202:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B	 = (1<<RXEN0)|(1<<TXEN0);
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	8a b9       	out	0x0a, r24	; 10
		//RXEN:  Aktiverer USART receiver
		//TXEN: Aktiverer USART transmitter
		
	
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 208:	8e e8       	ldi	r24, 0x8E	; 142
 20a:	80 bd       	out	0x20, r24	; 32
		//URSEL: Skriver til UCSRC istedet for UBRRH, ved 1.
		//USBS0: Antall stop bits, 0->1bit, 1->2bit
		//UCZ0/1/2: Character size 011->8bit. 
		
	//Slik at vi kan bruke printf;
	fdevopen(USART_Transmit,USART_Receive);
 20c:	6a ef       	ldi	r22, 0xFA	; 250
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	86 ef       	ldi	r24, 0xF6	; 246
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 65 02 	call	0x4ca	; 0x4ca <fdevopen>
 218:	08 95       	ret

0000021a <joystick_calibrate>:
 */ 

#include "JoyStick.h"


void joystick_calibrate(JoyStick* js){
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
	js->x_rest = ADC_convert(channelX);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
 226:	8e 83       	std	Y+6, r24	; 0x06
	js->y_rest = ADC_convert(channelY);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
 22e:	8f 83       	std	Y+7, r24	; 0x07
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <joystick_descreet>:
	joystick_descreet(&(js->y_descreet));
	
}

void joystick_descreet(int8_t* var){
	if(*var > slack){
 236:	fc 01       	movw	r30, r24
 238:	20 81       	ld	r18, Z
 23a:	20 31       	cpi	r18, 0x10	; 16
 23c:	1c f0       	brlt	.+6      	; 0x244 <joystick_descreet+0xe>
		*var = 1;
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	20 83       	st	Z, r18
 242:	08 95       	ret
	}
	else if(*var < -slack){
 244:	21 3f       	cpi	r18, 0xF1	; 241
 246:	24 f4       	brge	.+8      	; 0x250 <joystick_descreet+0x1a>
		*var = -1;
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
 24e:	08 95       	ret
	}
	else{
		*var = 0;
 250:	fc 01       	movw	r30, r24
 252:	10 82       	st	Z, r1
 254:	08 95       	ret

00000256 <joystick_update>:
void joystick_calibrate(JoyStick* js){
	js->x_rest = ADC_convert(channelX);
	js->y_rest = ADC_convert(channelY);
}

void joystick_update(JoyStick* js){
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	ec 01       	movw	r28, r24
	js->x_voltage = ADC_convert(channelX);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
 262:	88 83       	st	Y, r24
	js->y_voltage = ADC_convert(channelY);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
 26a:	28 2f       	mov	r18, r24
 26c:	89 83       	std	Y+1, r24	; 0x01
	js->x_percent = (js->x_voltage - js->x_rest)*100/js->x_rest;
 26e:	6e 81       	ldd	r22, Y+6	; 0x06
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	48 81       	ld	r20, Y
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	46 1b       	sub	r20, r22
 278:	57 0b       	sbc	r21, r23
 27a:	e4 e6       	ldi	r30, 0x64	; 100
 27c:	e4 9f       	mul	r30, r20
 27e:	c0 01       	movw	r24, r0
 280:	e5 9f       	mul	r30, r21
 282:	90 0d       	add	r25, r0
 284:	11 24       	eor	r1, r1
 286:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__divmodhi4>
 28a:	6a 83       	std	Y+2, r22	; 0x02
	js->y_percent = (js->y_voltage - js->y_rest)*100/js->y_rest;
 28c:	6f 81       	ldd	r22, Y+7	; 0x07
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	26 1b       	sub	r18, r22
 294:	37 0b       	sbc	r19, r23
 296:	e2 9f       	mul	r30, r18
 298:	c0 01       	movw	r24, r0
 29a:	e3 9f       	mul	r30, r19
 29c:	90 0d       	add	r25, r0
 29e:	11 24       	eor	r1, r1
 2a0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__divmodhi4>
 2a4:	6b 83       	std	Y+3, r22	; 0x03
	
	joystick_descreet(&(js->x_descreet));
 2a6:	ce 01       	movw	r24, r28
 2a8:	04 96       	adiw	r24, 0x04	; 4
 2aa:	0e 94 1b 01 	call	0x236	; 0x236 <joystick_descreet>
	joystick_descreet(&(js->y_descreet));
 2ae:	ce 01       	movw	r24, r28
 2b0:	05 96       	adiw	r24, 0x05	; 5
 2b2:	0e 94 1b 01 	call	0x236	; 0x236 <joystick_descreet>
	
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <main>:
#include "Drivers/UsartDriver.h"
#include "Drivers/external_SRAM.h"
#include "Drivers/ADC_Driver.h"
#include "HW_Controll/JoyStick.h"

int main(void){
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	28 97       	sbiw	r28, 0x08	; 8
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
	USART_Init();
 2d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <USART_Init>
	SRAM_INIT();
 2d4:	0e 94 ed 00 	call	0x1da	; 0x1da <SRAM_INIT>
	ADC_init();
 2d8:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	set_bit(DDRB, PB0);
 2dc:	b8 9a       	sbi	0x17, 0	; 23
	
	
	JoyStick js;
	joystick_calibrate(&js);
 2de:	ce 01       	movw	r24, r28
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	0e 94 0d 01 	call	0x21a	; 0x21a <joystick_calibrate>
	
	
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 2e6:	88 ef       	ldi	r24, 0xF8	; 248
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 c4 02 	call	0x588	; 0x588 <puts>
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
 2ee:	01 e0       	ldi	r16, 0x01	; 1
 2f0:	10 e0       	ldi	r17, 0x00	; 0
		if(!(mainLoopCounter%10)){
			toggle_bit(PORTB, PB0);
		}
		joystick_update(&js);
		printf("X: %i      \t", js.x_voltage);
 2f2:	0f 2e       	mov	r0, r31
 2f4:	f8 e1       	ldi	r31, 0x18	; 24
 2f6:	af 2e       	mov	r10, r31
 2f8:	f2 e0       	ldi	r31, 0x02	; 2
 2fa:	bf 2e       	mov	r11, r31
 2fc:	f0 2d       	mov	r31, r0
		printf("Y: %i      \t", js.y_voltage);
 2fe:	0f 2e       	mov	r0, r31
 300:	f5 e2       	ldi	r31, 0x25	; 37
 302:	cf 2e       	mov	r12, r31
 304:	f2 e0       	ldi	r31, 0x02	; 2
 306:	df 2e       	mov	r13, r31
 308:	f0 2d       	mov	r31, r0
		printf("fdfdf: %u           \r", (js.x_voltage - js.x_rest));
 30a:	0f 2e       	mov	r0, r31
 30c:	f2 e3       	ldi	r31, 0x32	; 50
 30e:	ef 2e       	mov	r14, r31
 310:	f2 e0       	ldi	r31, 0x02	; 2
 312:	ff 2e       	mov	r15, r31
 314:	f0 2d       	mov	r31, r0
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
		if(!(mainLoopCounter%10)){
			toggle_bit(PORTB, PB0);
 316:	99 24       	eor	r9, r9
 318:	93 94       	inc	r9
 31a:	03 c0       	rjmp	.+6      	; 0x322 <main+0x66>
 31c:	88 b3       	in	r24, 0x18	; 24
 31e:	89 25       	eor	r24, r9
 320:	88 bb       	out	0x18, r24	; 24
		}
		joystick_update(&js);
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	0e 94 2b 01 	call	0x256	; 0x256 <joystick_update>
		printf("X: %i      \t", js.x_voltage);
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	1f 92       	push	r1
 32e:	8f 93       	push	r24
 330:	bf 92       	push	r11
 332:	af 92       	push	r10
 334:	0e 94 b0 02 	call	0x560	; 0x560 <printf>
		printf("Y: %i      \t", js.y_voltage);
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	1f 92       	push	r1
 33c:	8f 93       	push	r24
 33e:	df 92       	push	r13
 340:	cf 92       	push	r12
 342:	0e 94 b0 02 	call	0x560	; 0x560 <printf>
		printf("fdfdf: %u           \r", (js.x_voltage - js.x_rest));
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	2f 81       	ldd	r18, Y+7	; 0x07
 34c:	82 1b       	sub	r24, r18
 34e:	91 09       	sbc	r25, r1
 350:	9f 93       	push	r25
 352:	8f 93       	push	r24
 354:	ff 92       	push	r15
 356:	ef 92       	push	r14
 358:	0e 94 b0 02 	call	0x560	; 0x560 <printf>
	
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
 35c:	0f 5f       	subi	r16, 0xFF	; 255
 35e:	1f 4f       	sbci	r17, 0xFF	; 255
		if(!(mainLoopCounter%10)){
 360:	98 01       	movw	r18, r16
 362:	ad ec       	ldi	r26, 0xCD	; 205
 364:	bc ec       	ldi	r27, 0xCC	; 204
 366:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__umulhisi3>
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	9c 01       	movw	r18, r24
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	82 0f       	add	r24, r18
 38a:	93 1f       	adc	r25, r19
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
 396:	08 17       	cp	r16, r24
 398:	19 07       	cpc	r17, r25
 39a:	09 f4       	brne	.+2      	; 0x39e <main+0xe2>
 39c:	bf cf       	rjmp	.-130    	; 0x31c <main+0x60>
 39e:	c1 cf       	rjmp	.-126    	; 0x322 <main+0x66>

000003a0 <__divmodhi4>:
 3a0:	97 fb       	bst	r25, 7
 3a2:	07 2e       	mov	r0, r23
 3a4:	16 f4       	brtc	.+4      	; 0x3aa <__divmodhi4+0xa>
 3a6:	00 94       	com	r0
 3a8:	07 d0       	rcall	.+14     	; 0x3b8 <__divmodhi4_neg1>
 3aa:	77 fd       	sbrc	r23, 7
 3ac:	09 d0       	rcall	.+18     	; 0x3c0 <__divmodhi4_neg2>
 3ae:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__udivmodhi4>
 3b2:	07 fc       	sbrc	r0, 7
 3b4:	05 d0       	rcall	.+10     	; 0x3c0 <__divmodhi4_neg2>
 3b6:	3e f4       	brtc	.+14     	; 0x3c6 <__divmodhi4_exit>

000003b8 <__divmodhi4_neg1>:
 3b8:	90 95       	com	r25
 3ba:	81 95       	neg	r24
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	08 95       	ret

000003c0 <__divmodhi4_neg2>:
 3c0:	70 95       	com	r23
 3c2:	61 95       	neg	r22
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255

000003c6 <__divmodhi4_exit>:
 3c6:	08 95       	ret

000003c8 <__umulhisi3>:
 3c8:	a2 9f       	mul	r26, r18
 3ca:	b0 01       	movw	r22, r0
 3cc:	b3 9f       	mul	r27, r19
 3ce:	c0 01       	movw	r24, r0
 3d0:	a3 9f       	mul	r26, r19
 3d2:	70 0d       	add	r23, r0
 3d4:	81 1d       	adc	r24, r1
 3d6:	11 24       	eor	r1, r1
 3d8:	91 1d       	adc	r25, r1
 3da:	b2 9f       	mul	r27, r18
 3dc:	70 0d       	add	r23, r0
 3de:	81 1d       	adc	r24, r1
 3e0:	11 24       	eor	r1, r1
 3e2:	91 1d       	adc	r25, r1
 3e4:	08 95       	ret

000003e6 <__udivmodhi4>:
 3e6:	aa 1b       	sub	r26, r26
 3e8:	bb 1b       	sub	r27, r27
 3ea:	51 e1       	ldi	r21, 0x11	; 17
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <__udivmodhi4_ep>

000003ee <__udivmodhi4_loop>:
 3ee:	aa 1f       	adc	r26, r26
 3f0:	bb 1f       	adc	r27, r27
 3f2:	a6 17       	cp	r26, r22
 3f4:	b7 07       	cpc	r27, r23
 3f6:	10 f0       	brcs	.+4      	; 0x3fc <__udivmodhi4_ep>
 3f8:	a6 1b       	sub	r26, r22
 3fa:	b7 0b       	sbc	r27, r23

000003fc <__udivmodhi4_ep>:
 3fc:	88 1f       	adc	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	5a 95       	dec	r21
 402:	a9 f7       	brne	.-22     	; 0x3ee <__udivmodhi4_loop>
 404:	80 95       	com	r24
 406:	90 95       	com	r25
 408:	bc 01       	movw	r22, r24
 40a:	cd 01       	movw	r24, r26
 40c:	08 95       	ret

0000040e <do_rand>:
 40e:	8f 92       	push	r8
 410:	9f 92       	push	r9
 412:	af 92       	push	r10
 414:	bf 92       	push	r11
 416:	cf 92       	push	r12
 418:	df 92       	push	r13
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	ec 01       	movw	r28, r24
 424:	68 81       	ld	r22, Y
 426:	79 81       	ldd	r23, Y+1	; 0x01
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	9b 81       	ldd	r25, Y+3	; 0x03
 42c:	61 15       	cp	r22, r1
 42e:	71 05       	cpc	r23, r1
 430:	81 05       	cpc	r24, r1
 432:	91 05       	cpc	r25, r1
 434:	21 f4       	brne	.+8      	; 0x43e <do_rand+0x30>
 436:	64 e2       	ldi	r22, 0x24	; 36
 438:	79 ed       	ldi	r23, 0xD9	; 217
 43a:	8b e5       	ldi	r24, 0x5B	; 91
 43c:	97 e0       	ldi	r25, 0x07	; 7
 43e:	2d e1       	ldi	r18, 0x1D	; 29
 440:	33 ef       	ldi	r19, 0xF3	; 243
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	0e 94 b3 06 	call	0xd66	; 0xd66 <__divmodsi4>
 44a:	49 01       	movw	r8, r18
 44c:	5a 01       	movw	r10, r20
 44e:	9b 01       	movw	r18, r22
 450:	ac 01       	movw	r20, r24
 452:	a7 ea       	ldi	r26, 0xA7	; 167
 454:	b1 e4       	ldi	r27, 0x41	; 65
 456:	0e 94 d2 06 	call	0xda4	; 0xda4 <__muluhisi3>
 45a:	6b 01       	movw	r12, r22
 45c:	7c 01       	movw	r14, r24
 45e:	ac ee       	ldi	r26, 0xEC	; 236
 460:	b4 ef       	ldi	r27, 0xF4	; 244
 462:	a5 01       	movw	r20, r10
 464:	94 01       	movw	r18, r8
 466:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__mulohisi3>
 46a:	c6 0e       	add	r12, r22
 46c:	d7 1e       	adc	r13, r23
 46e:	e8 1e       	adc	r14, r24
 470:	f9 1e       	adc	r15, r25
 472:	f7 fe       	sbrs	r15, 7
 474:	06 c0       	rjmp	.+12     	; 0x482 <do_rand+0x74>
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	c8 1a       	sub	r12, r24
 47a:	d1 08       	sbc	r13, r1
 47c:	e1 08       	sbc	r14, r1
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	f8 0a       	sbc	r15, r24
 482:	c8 82       	st	Y, r12
 484:	d9 82       	std	Y+1, r13	; 0x01
 486:	ea 82       	std	Y+2, r14	; 0x02
 488:	fb 82       	std	Y+3, r15	; 0x03
 48a:	c6 01       	movw	r24, r12
 48c:	9f 77       	andi	r25, 0x7F	; 127
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	bf 90       	pop	r11
 49c:	af 90       	pop	r10
 49e:	9f 90       	pop	r9
 4a0:	8f 90       	pop	r8
 4a2:	08 95       	ret

000004a4 <rand_r>:
 4a4:	0e 94 07 02 	call	0x40e	; 0x40e <do_rand>
 4a8:	08 95       	ret

000004aa <rand>:
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 07 02 	call	0x40e	; 0x40e <do_rand>
 4b2:	08 95       	ret

000004b4 <srand>:
 4b4:	a0 e0       	ldi	r26, 0x00	; 0
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	80 93 00 01 	sts	0x0100, r24
 4bc:	90 93 01 01 	sts	0x0101, r25
 4c0:	a0 93 02 01 	sts	0x0102, r26
 4c4:	b0 93 03 01 	sts	0x0103, r27
 4c8:	08 95       	ret

000004ca <fdevopen>:
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	ec 01       	movw	r28, r24
 4d4:	8b 01       	movw	r16, r22
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	31 f4       	brne	.+12     	; 0x4e6 <fdevopen+0x1c>
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	19 f4       	brne	.+6      	; 0x4e6 <fdevopen+0x1c>
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	38 c0       	rjmp	.+112    	; 0x556 <__stack+0x57>
 4e6:	6e e0       	ldi	r22, 0x0E	; 14
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 c3 04 	call	0x986	; 0x986 <calloc>
 4f2:	fc 01       	movw	r30, r24
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	a1 f3       	breq	.-24     	; 0x4e0 <fdevopen+0x16>
 4f8:	80 e8       	ldi	r24, 0x80	; 128
 4fa:	83 83       	std	Z+3, r24	; 0x03
 4fc:	01 15       	cp	r16, r1
 4fe:	11 05       	cpc	r17, r1
 500:	71 f0       	breq	.+28     	; 0x51e <__stack+0x1f>
 502:	13 87       	std	Z+11, r17	; 0x0b
 504:	02 87       	std	Z+10, r16	; 0x0a
 506:	81 e8       	ldi	r24, 0x81	; 129
 508:	83 83       	std	Z+3, r24	; 0x03
 50a:	80 91 48 02 	lds	r24, 0x0248
 50e:	90 91 49 02 	lds	r25, 0x0249
 512:	89 2b       	or	r24, r25
 514:	21 f4       	brne	.+8      	; 0x51e <__stack+0x1f>
 516:	f0 93 49 02 	sts	0x0249, r31
 51a:	e0 93 48 02 	sts	0x0248, r30
 51e:	20 97       	sbiw	r28, 0x00	; 0
 520:	c9 f0       	breq	.+50     	; 0x554 <__stack+0x55>
 522:	d1 87       	std	Z+9, r29	; 0x09
 524:	c0 87       	std	Z+8, r28	; 0x08
 526:	83 81       	ldd	r24, Z+3	; 0x03
 528:	82 60       	ori	r24, 0x02	; 2
 52a:	83 83       	std	Z+3, r24	; 0x03
 52c:	80 91 4a 02 	lds	r24, 0x024A
 530:	90 91 4b 02 	lds	r25, 0x024B
 534:	89 2b       	or	r24, r25
 536:	71 f4       	brne	.+28     	; 0x554 <__stack+0x55>
 538:	f0 93 4b 02 	sts	0x024B, r31
 53c:	e0 93 4a 02 	sts	0x024A, r30
 540:	80 91 4c 02 	lds	r24, 0x024C
 544:	90 91 4d 02 	lds	r25, 0x024D
 548:	89 2b       	or	r24, r25
 54a:	21 f4       	brne	.+8      	; 0x554 <__stack+0x55>
 54c:	f0 93 4d 02 	sts	0x024D, r31
 550:	e0 93 4c 02 	sts	0x024C, r30
 554:	cf 01       	movw	r24, r30
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	08 95       	ret

00000560 <printf>:
 560:	a0 e0       	ldi	r26, 0x00	; 0
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e6 eb       	ldi	r30, 0xB6	; 182
 566:	f2 e0       	ldi	r31, 0x02	; 2
 568:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__prologue_saves__+0x20>
 56c:	fe 01       	movw	r30, r28
 56e:	35 96       	adiw	r30, 0x05	; 5
 570:	61 91       	ld	r22, Z+
 572:	71 91       	ld	r23, Z+
 574:	af 01       	movw	r20, r30
 576:	80 91 4a 02 	lds	r24, 0x024A
 57a:	90 91 4b 02 	lds	r25, 0x024B
 57e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vfprintf>
 582:	e2 e0       	ldi	r30, 0x02	; 2
 584:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__epilogue_restores__+0x20>

00000588 <puts>:
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	e0 91 4a 02 	lds	r30, 0x024A
 594:	f0 91 4b 02 	lds	r31, 0x024B
 598:	23 81       	ldd	r18, Z+3	; 0x03
 59a:	21 ff       	sbrs	r18, 1
 59c:	1b c0       	rjmp	.+54     	; 0x5d4 <puts+0x4c>
 59e:	ec 01       	movw	r28, r24
 5a0:	00 e0       	ldi	r16, 0x00	; 0
 5a2:	10 e0       	ldi	r17, 0x00	; 0
 5a4:	89 91       	ld	r24, Y+
 5a6:	60 91 4a 02 	lds	r22, 0x024A
 5aa:	70 91 4b 02 	lds	r23, 0x024B
 5ae:	db 01       	movw	r26, r22
 5b0:	18 96       	adiw	r26, 0x08	; 8
 5b2:	ed 91       	ld	r30, X+
 5b4:	fc 91       	ld	r31, X
 5b6:	19 97       	sbiw	r26, 0x09	; 9
 5b8:	88 23       	and	r24, r24
 5ba:	31 f0       	breq	.+12     	; 0x5c8 <puts+0x40>
 5bc:	09 95       	icall
 5be:	89 2b       	or	r24, r25
 5c0:	89 f3       	breq	.-30     	; 0x5a4 <puts+0x1c>
 5c2:	0f ef       	ldi	r16, 0xFF	; 255
 5c4:	1f ef       	ldi	r17, 0xFF	; 255
 5c6:	ee cf       	rjmp	.-36     	; 0x5a4 <puts+0x1c>
 5c8:	8a e0       	ldi	r24, 0x0A	; 10
 5ca:	09 95       	icall
 5cc:	89 2b       	or	r24, r25
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <puts+0x4c>
 5d0:	c8 01       	movw	r24, r16
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <puts+0x50>
 5d4:	8f ef       	ldi	r24, 0xFF	; 255
 5d6:	9f ef       	ldi	r25, 0xFF	; 255
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	1f 91       	pop	r17
 5de:	0f 91       	pop	r16
 5e0:	08 95       	ret

000005e2 <vfprintf>:
 5e2:	ac e0       	ldi	r26, 0x0C	; 12
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	e7 ef       	ldi	r30, 0xF7	; 247
 5e8:	f2 e0       	ldi	r31, 0x02	; 2
 5ea:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__prologue_saves__>
 5ee:	7c 01       	movw	r14, r24
 5f0:	6b 01       	movw	r12, r22
 5f2:	8a 01       	movw	r16, r20
 5f4:	fc 01       	movw	r30, r24
 5f6:	17 82       	std	Z+7, r1	; 0x07
 5f8:	16 82       	std	Z+6, r1	; 0x06
 5fa:	83 81       	ldd	r24, Z+3	; 0x03
 5fc:	81 ff       	sbrs	r24, 1
 5fe:	bd c1       	rjmp	.+890    	; 0x97a <vfprintf+0x398>
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	4c 01       	movw	r8, r24
 606:	f7 01       	movw	r30, r14
 608:	93 81       	ldd	r25, Z+3	; 0x03
 60a:	f6 01       	movw	r30, r12
 60c:	93 fd       	sbrc	r25, 3
 60e:	85 91       	lpm	r24, Z+
 610:	93 ff       	sbrs	r25, 3
 612:	81 91       	ld	r24, Z+
 614:	6f 01       	movw	r12, r30
 616:	88 23       	and	r24, r24
 618:	09 f4       	brne	.+2      	; 0x61c <vfprintf+0x3a>
 61a:	ab c1       	rjmp	.+854    	; 0x972 <vfprintf+0x390>
 61c:	85 32       	cpi	r24, 0x25	; 37
 61e:	39 f4       	brne	.+14     	; 0x62e <vfprintf+0x4c>
 620:	93 fd       	sbrc	r25, 3
 622:	85 91       	lpm	r24, Z+
 624:	93 ff       	sbrs	r25, 3
 626:	81 91       	ld	r24, Z+
 628:	6f 01       	movw	r12, r30
 62a:	85 32       	cpi	r24, 0x25	; 37
 62c:	29 f4       	brne	.+10     	; 0x638 <vfprintf+0x56>
 62e:	b7 01       	movw	r22, r14
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 636:	e7 cf       	rjmp	.-50     	; 0x606 <vfprintf+0x24>
 638:	51 2c       	mov	r5, r1
 63a:	31 2c       	mov	r3, r1
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	20 32       	cpi	r18, 0x20	; 32
 640:	a0 f4       	brcc	.+40     	; 0x66a <vfprintf+0x88>
 642:	8b 32       	cpi	r24, 0x2B	; 43
 644:	69 f0       	breq	.+26     	; 0x660 <vfprintf+0x7e>
 646:	30 f4       	brcc	.+12     	; 0x654 <vfprintf+0x72>
 648:	80 32       	cpi	r24, 0x20	; 32
 64a:	59 f0       	breq	.+22     	; 0x662 <vfprintf+0x80>
 64c:	83 32       	cpi	r24, 0x23	; 35
 64e:	69 f4       	brne	.+26     	; 0x66a <vfprintf+0x88>
 650:	20 61       	ori	r18, 0x10	; 16
 652:	2c c0       	rjmp	.+88     	; 0x6ac <vfprintf+0xca>
 654:	8d 32       	cpi	r24, 0x2D	; 45
 656:	39 f0       	breq	.+14     	; 0x666 <vfprintf+0x84>
 658:	80 33       	cpi	r24, 0x30	; 48
 65a:	39 f4       	brne	.+14     	; 0x66a <vfprintf+0x88>
 65c:	21 60       	ori	r18, 0x01	; 1
 65e:	26 c0       	rjmp	.+76     	; 0x6ac <vfprintf+0xca>
 660:	22 60       	ori	r18, 0x02	; 2
 662:	24 60       	ori	r18, 0x04	; 4
 664:	23 c0       	rjmp	.+70     	; 0x6ac <vfprintf+0xca>
 666:	28 60       	ori	r18, 0x08	; 8
 668:	21 c0       	rjmp	.+66     	; 0x6ac <vfprintf+0xca>
 66a:	27 fd       	sbrc	r18, 7
 66c:	27 c0       	rjmp	.+78     	; 0x6bc <vfprintf+0xda>
 66e:	30 ed       	ldi	r19, 0xD0	; 208
 670:	38 0f       	add	r19, r24
 672:	3a 30       	cpi	r19, 0x0A	; 10
 674:	78 f4       	brcc	.+30     	; 0x694 <vfprintf+0xb2>
 676:	26 ff       	sbrs	r18, 6
 678:	06 c0       	rjmp	.+12     	; 0x686 <vfprintf+0xa4>
 67a:	fa e0       	ldi	r31, 0x0A	; 10
 67c:	5f 9e       	mul	r5, r31
 67e:	30 0d       	add	r19, r0
 680:	11 24       	eor	r1, r1
 682:	53 2e       	mov	r5, r19
 684:	13 c0       	rjmp	.+38     	; 0x6ac <vfprintf+0xca>
 686:	8a e0       	ldi	r24, 0x0A	; 10
 688:	38 9e       	mul	r3, r24
 68a:	30 0d       	add	r19, r0
 68c:	11 24       	eor	r1, r1
 68e:	33 2e       	mov	r3, r19
 690:	20 62       	ori	r18, 0x20	; 32
 692:	0c c0       	rjmp	.+24     	; 0x6ac <vfprintf+0xca>
 694:	8e 32       	cpi	r24, 0x2E	; 46
 696:	21 f4       	brne	.+8      	; 0x6a0 <vfprintf+0xbe>
 698:	26 fd       	sbrc	r18, 6
 69a:	6b c1       	rjmp	.+726    	; 0x972 <vfprintf+0x390>
 69c:	20 64       	ori	r18, 0x40	; 64
 69e:	06 c0       	rjmp	.+12     	; 0x6ac <vfprintf+0xca>
 6a0:	8c 36       	cpi	r24, 0x6C	; 108
 6a2:	11 f4       	brne	.+4      	; 0x6a8 <vfprintf+0xc6>
 6a4:	20 68       	ori	r18, 0x80	; 128
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <vfprintf+0xca>
 6a8:	88 36       	cpi	r24, 0x68	; 104
 6aa:	41 f4       	brne	.+16     	; 0x6bc <vfprintf+0xda>
 6ac:	f6 01       	movw	r30, r12
 6ae:	93 fd       	sbrc	r25, 3
 6b0:	85 91       	lpm	r24, Z+
 6b2:	93 ff       	sbrs	r25, 3
 6b4:	81 91       	ld	r24, Z+
 6b6:	6f 01       	movw	r12, r30
 6b8:	81 11       	cpse	r24, r1
 6ba:	c1 cf       	rjmp	.-126    	; 0x63e <vfprintf+0x5c>
 6bc:	98 2f       	mov	r25, r24
 6be:	9f 7d       	andi	r25, 0xDF	; 223
 6c0:	95 54       	subi	r25, 0x45	; 69
 6c2:	93 30       	cpi	r25, 0x03	; 3
 6c4:	28 f4       	brcc	.+10     	; 0x6d0 <vfprintf+0xee>
 6c6:	0c 5f       	subi	r16, 0xFC	; 252
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ca:	ff e3       	ldi	r31, 0x3F	; 63
 6cc:	f9 83       	std	Y+1, r31	; 0x01
 6ce:	0d c0       	rjmp	.+26     	; 0x6ea <vfprintf+0x108>
 6d0:	83 36       	cpi	r24, 0x63	; 99
 6d2:	31 f0       	breq	.+12     	; 0x6e0 <vfprintf+0xfe>
 6d4:	83 37       	cpi	r24, 0x73	; 115
 6d6:	71 f0       	breq	.+28     	; 0x6f4 <vfprintf+0x112>
 6d8:	83 35       	cpi	r24, 0x53	; 83
 6da:	09 f0       	breq	.+2      	; 0x6de <vfprintf+0xfc>
 6dc:	5b c0       	rjmp	.+182    	; 0x794 <vfprintf+0x1b2>
 6de:	22 c0       	rjmp	.+68     	; 0x724 <vfprintf+0x142>
 6e0:	f8 01       	movw	r30, r16
 6e2:	80 81       	ld	r24, Z
 6e4:	89 83       	std	Y+1, r24	; 0x01
 6e6:	0e 5f       	subi	r16, 0xFE	; 254
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	44 24       	eor	r4, r4
 6ec:	43 94       	inc	r4
 6ee:	51 2c       	mov	r5, r1
 6f0:	54 01       	movw	r10, r8
 6f2:	15 c0       	rjmp	.+42     	; 0x71e <vfprintf+0x13c>
 6f4:	38 01       	movw	r6, r16
 6f6:	f2 e0       	ldi	r31, 0x02	; 2
 6f8:	6f 0e       	add	r6, r31
 6fa:	71 1c       	adc	r7, r1
 6fc:	f8 01       	movw	r30, r16
 6fe:	a0 80       	ld	r10, Z
 700:	b1 80       	ldd	r11, Z+1	; 0x01
 702:	26 ff       	sbrs	r18, 6
 704:	03 c0       	rjmp	.+6      	; 0x70c <vfprintf+0x12a>
 706:	65 2d       	mov	r22, r5
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <vfprintf+0x12e>
 70c:	6f ef       	ldi	r22, 0xFF	; 255
 70e:	7f ef       	ldi	r23, 0xFF	; 255
 710:	c5 01       	movw	r24, r10
 712:	2c 87       	std	Y+12, r18	; 0x0c
 714:	0e 94 18 06 	call	0xc30	; 0xc30 <strnlen>
 718:	2c 01       	movw	r4, r24
 71a:	83 01       	movw	r16, r6
 71c:	2c 85       	ldd	r18, Y+12	; 0x0c
 71e:	2f 77       	andi	r18, 0x7F	; 127
 720:	22 2e       	mov	r2, r18
 722:	17 c0       	rjmp	.+46     	; 0x752 <vfprintf+0x170>
 724:	38 01       	movw	r6, r16
 726:	f2 e0       	ldi	r31, 0x02	; 2
 728:	6f 0e       	add	r6, r31
 72a:	71 1c       	adc	r7, r1
 72c:	f8 01       	movw	r30, r16
 72e:	a0 80       	ld	r10, Z
 730:	b1 80       	ldd	r11, Z+1	; 0x01
 732:	26 ff       	sbrs	r18, 6
 734:	03 c0       	rjmp	.+6      	; 0x73c <vfprintf+0x15a>
 736:	65 2d       	mov	r22, r5
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0x15e>
 73c:	6f ef       	ldi	r22, 0xFF	; 255
 73e:	7f ef       	ldi	r23, 0xFF	; 255
 740:	c5 01       	movw	r24, r10
 742:	2c 87       	std	Y+12, r18	; 0x0c
 744:	0e 94 06 06 	call	0xc0c	; 0xc0c <strnlen_P>
 748:	2c 01       	movw	r4, r24
 74a:	2c 85       	ldd	r18, Y+12	; 0x0c
 74c:	20 68       	ori	r18, 0x80	; 128
 74e:	22 2e       	mov	r2, r18
 750:	83 01       	movw	r16, r6
 752:	23 fc       	sbrc	r2, 3
 754:	1b c0       	rjmp	.+54     	; 0x78c <vfprintf+0x1aa>
 756:	83 2d       	mov	r24, r3
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	48 16       	cp	r4, r24
 75c:	59 06       	cpc	r5, r25
 75e:	b0 f4       	brcc	.+44     	; 0x78c <vfprintf+0x1aa>
 760:	b7 01       	movw	r22, r14
 762:	80 e2       	ldi	r24, 0x20	; 32
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 76a:	3a 94       	dec	r3
 76c:	f4 cf       	rjmp	.-24     	; 0x756 <vfprintf+0x174>
 76e:	f5 01       	movw	r30, r10
 770:	27 fc       	sbrc	r2, 7
 772:	85 91       	lpm	r24, Z+
 774:	27 fe       	sbrs	r2, 7
 776:	81 91       	ld	r24, Z+
 778:	5f 01       	movw	r10, r30
 77a:	b7 01       	movw	r22, r14
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 782:	31 10       	cpse	r3, r1
 784:	3a 94       	dec	r3
 786:	f1 e0       	ldi	r31, 0x01	; 1
 788:	4f 1a       	sub	r4, r31
 78a:	51 08       	sbc	r5, r1
 78c:	41 14       	cp	r4, r1
 78e:	51 04       	cpc	r5, r1
 790:	71 f7       	brne	.-36     	; 0x76e <vfprintf+0x18c>
 792:	e5 c0       	rjmp	.+458    	; 0x95e <vfprintf+0x37c>
 794:	84 36       	cpi	r24, 0x64	; 100
 796:	11 f0       	breq	.+4      	; 0x79c <vfprintf+0x1ba>
 798:	89 36       	cpi	r24, 0x69	; 105
 79a:	39 f5       	brne	.+78     	; 0x7ea <vfprintf+0x208>
 79c:	f8 01       	movw	r30, r16
 79e:	27 ff       	sbrs	r18, 7
 7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <vfprintf+0x1ce>
 7a2:	60 81       	ld	r22, Z
 7a4:	71 81       	ldd	r23, Z+1	; 0x01
 7a6:	82 81       	ldd	r24, Z+2	; 0x02
 7a8:	93 81       	ldd	r25, Z+3	; 0x03
 7aa:	0c 5f       	subi	r16, 0xFC	; 252
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <vfprintf+0x1de>
 7b0:	60 81       	ld	r22, Z
 7b2:	71 81       	ldd	r23, Z+1	; 0x01
 7b4:	88 27       	eor	r24, r24
 7b6:	77 fd       	sbrc	r23, 7
 7b8:	80 95       	com	r24
 7ba:	98 2f       	mov	r25, r24
 7bc:	0e 5f       	subi	r16, 0xFE	; 254
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	2f 76       	andi	r18, 0x6F	; 111
 7c2:	b2 2e       	mov	r11, r18
 7c4:	97 ff       	sbrs	r25, 7
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <vfprintf+0x1f8>
 7c8:	90 95       	com	r25
 7ca:	80 95       	com	r24
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	20 68       	ori	r18, 0x80	; 128
 7d8:	b2 2e       	mov	r11, r18
 7da:	2a e0       	ldi	r18, 0x0A	; 10
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	a4 01       	movw	r20, r8
 7e0:	0e 94 55 06 	call	0xcaa	; 0xcaa <__ultoa_invert>
 7e4:	a8 2e       	mov	r10, r24
 7e6:	a8 18       	sub	r10, r8
 7e8:	44 c0       	rjmp	.+136    	; 0x872 <vfprintf+0x290>
 7ea:	85 37       	cpi	r24, 0x75	; 117
 7ec:	29 f4       	brne	.+10     	; 0x7f8 <vfprintf+0x216>
 7ee:	2f 7e       	andi	r18, 0xEF	; 239
 7f0:	b2 2e       	mov	r11, r18
 7f2:	2a e0       	ldi	r18, 0x0A	; 10
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	25 c0       	rjmp	.+74     	; 0x842 <vfprintf+0x260>
 7f8:	f2 2f       	mov	r31, r18
 7fa:	f9 7f       	andi	r31, 0xF9	; 249
 7fc:	bf 2e       	mov	r11, r31
 7fe:	8f 36       	cpi	r24, 0x6F	; 111
 800:	c1 f0       	breq	.+48     	; 0x832 <vfprintf+0x250>
 802:	18 f4       	brcc	.+6      	; 0x80a <vfprintf+0x228>
 804:	88 35       	cpi	r24, 0x58	; 88
 806:	79 f0       	breq	.+30     	; 0x826 <vfprintf+0x244>
 808:	b4 c0       	rjmp	.+360    	; 0x972 <vfprintf+0x390>
 80a:	80 37       	cpi	r24, 0x70	; 112
 80c:	19 f0       	breq	.+6      	; 0x814 <vfprintf+0x232>
 80e:	88 37       	cpi	r24, 0x78	; 120
 810:	21 f0       	breq	.+8      	; 0x81a <vfprintf+0x238>
 812:	af c0       	rjmp	.+350    	; 0x972 <vfprintf+0x390>
 814:	2f 2f       	mov	r18, r31
 816:	20 61       	ori	r18, 0x10	; 16
 818:	b2 2e       	mov	r11, r18
 81a:	b4 fe       	sbrs	r11, 4
 81c:	0d c0       	rjmp	.+26     	; 0x838 <vfprintf+0x256>
 81e:	8b 2d       	mov	r24, r11
 820:	84 60       	ori	r24, 0x04	; 4
 822:	b8 2e       	mov	r11, r24
 824:	09 c0       	rjmp	.+18     	; 0x838 <vfprintf+0x256>
 826:	24 ff       	sbrs	r18, 4
 828:	0a c0       	rjmp	.+20     	; 0x83e <vfprintf+0x25c>
 82a:	9f 2f       	mov	r25, r31
 82c:	96 60       	ori	r25, 0x06	; 6
 82e:	b9 2e       	mov	r11, r25
 830:	06 c0       	rjmp	.+12     	; 0x83e <vfprintf+0x25c>
 832:	28 e0       	ldi	r18, 0x08	; 8
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	05 c0       	rjmp	.+10     	; 0x842 <vfprintf+0x260>
 838:	20 e1       	ldi	r18, 0x10	; 16
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	02 c0       	rjmp	.+4      	; 0x842 <vfprintf+0x260>
 83e:	20 e1       	ldi	r18, 0x10	; 16
 840:	32 e0       	ldi	r19, 0x02	; 2
 842:	f8 01       	movw	r30, r16
 844:	b7 fe       	sbrs	r11, 7
 846:	07 c0       	rjmp	.+14     	; 0x856 <vfprintf+0x274>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	82 81       	ldd	r24, Z+2	; 0x02
 84e:	93 81       	ldd	r25, Z+3	; 0x03
 850:	0c 5f       	subi	r16, 0xFC	; 252
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	06 c0       	rjmp	.+12     	; 0x862 <vfprintf+0x280>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 5f       	subi	r16, 0xFE	; 254
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	a4 01       	movw	r20, r8
 864:	0e 94 55 06 	call	0xcaa	; 0xcaa <__ultoa_invert>
 868:	a8 2e       	mov	r10, r24
 86a:	a8 18       	sub	r10, r8
 86c:	fb 2d       	mov	r31, r11
 86e:	ff 77       	andi	r31, 0x7F	; 127
 870:	bf 2e       	mov	r11, r31
 872:	b6 fe       	sbrs	r11, 6
 874:	0b c0       	rjmp	.+22     	; 0x88c <vfprintf+0x2aa>
 876:	2b 2d       	mov	r18, r11
 878:	2e 7f       	andi	r18, 0xFE	; 254
 87a:	a5 14       	cp	r10, r5
 87c:	50 f4       	brcc	.+20     	; 0x892 <vfprintf+0x2b0>
 87e:	b4 fe       	sbrs	r11, 4
 880:	0a c0       	rjmp	.+20     	; 0x896 <vfprintf+0x2b4>
 882:	b2 fc       	sbrc	r11, 2
 884:	08 c0       	rjmp	.+16     	; 0x896 <vfprintf+0x2b4>
 886:	2b 2d       	mov	r18, r11
 888:	2e 7e       	andi	r18, 0xEE	; 238
 88a:	05 c0       	rjmp	.+10     	; 0x896 <vfprintf+0x2b4>
 88c:	7a 2c       	mov	r7, r10
 88e:	2b 2d       	mov	r18, r11
 890:	03 c0       	rjmp	.+6      	; 0x898 <vfprintf+0x2b6>
 892:	7a 2c       	mov	r7, r10
 894:	01 c0       	rjmp	.+2      	; 0x898 <vfprintf+0x2b6>
 896:	75 2c       	mov	r7, r5
 898:	24 ff       	sbrs	r18, 4
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <vfprintf+0x2d4>
 89c:	fe 01       	movw	r30, r28
 89e:	ea 0d       	add	r30, r10
 8a0:	f1 1d       	adc	r31, r1
 8a2:	80 81       	ld	r24, Z
 8a4:	80 33       	cpi	r24, 0x30	; 48
 8a6:	11 f4       	brne	.+4      	; 0x8ac <vfprintf+0x2ca>
 8a8:	29 7e       	andi	r18, 0xE9	; 233
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <vfprintf+0x2dc>
 8ac:	22 ff       	sbrs	r18, 2
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <vfprintf+0x2da>
 8b0:	73 94       	inc	r7
 8b2:	73 94       	inc	r7
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <vfprintf+0x2dc>
 8b6:	82 2f       	mov	r24, r18
 8b8:	86 78       	andi	r24, 0x86	; 134
 8ba:	09 f0       	breq	.+2      	; 0x8be <vfprintf+0x2dc>
 8bc:	73 94       	inc	r7
 8be:	23 fd       	sbrc	r18, 3
 8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <vfprintf+0x306>
 8c2:	20 ff       	sbrs	r18, 0
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <vfprintf+0x2f0>
 8c6:	5a 2c       	mov	r5, r10
 8c8:	73 14       	cp	r7, r3
 8ca:	18 f4       	brcc	.+6      	; 0x8d2 <vfprintf+0x2f0>
 8cc:	53 0c       	add	r5, r3
 8ce:	57 18       	sub	r5, r7
 8d0:	73 2c       	mov	r7, r3
 8d2:	73 14       	cp	r7, r3
 8d4:	68 f4       	brcc	.+26     	; 0x8f0 <vfprintf+0x30e>
 8d6:	b7 01       	movw	r22, r14
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	2c 87       	std	Y+12, r18	; 0x0c
 8de:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 8e2:	73 94       	inc	r7
 8e4:	2c 85       	ldd	r18, Y+12	; 0x0c
 8e6:	f5 cf       	rjmp	.-22     	; 0x8d2 <vfprintf+0x2f0>
 8e8:	73 14       	cp	r7, r3
 8ea:	10 f4       	brcc	.+4      	; 0x8f0 <vfprintf+0x30e>
 8ec:	37 18       	sub	r3, r7
 8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <vfprintf+0x310>
 8f0:	31 2c       	mov	r3, r1
 8f2:	24 ff       	sbrs	r18, 4
 8f4:	12 c0       	rjmp	.+36     	; 0x91a <vfprintf+0x338>
 8f6:	b7 01       	movw	r22, r14
 8f8:	80 e3       	ldi	r24, 0x30	; 48
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	2c 87       	std	Y+12, r18	; 0x0c
 8fe:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 902:	2c 85       	ldd	r18, Y+12	; 0x0c
 904:	22 ff       	sbrs	r18, 2
 906:	17 c0       	rjmp	.+46     	; 0x936 <vfprintf+0x354>
 908:	21 ff       	sbrs	r18, 1
 90a:	03 c0       	rjmp	.+6      	; 0x912 <vfprintf+0x330>
 90c:	88 e5       	ldi	r24, 0x58	; 88
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	02 c0       	rjmp	.+4      	; 0x916 <vfprintf+0x334>
 912:	88 e7       	ldi	r24, 0x78	; 120
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	b7 01       	movw	r22, r14
 918:	0c c0       	rjmp	.+24     	; 0x932 <vfprintf+0x350>
 91a:	82 2f       	mov	r24, r18
 91c:	86 78       	andi	r24, 0x86	; 134
 91e:	59 f0       	breq	.+22     	; 0x936 <vfprintf+0x354>
 920:	21 fd       	sbrc	r18, 1
 922:	02 c0       	rjmp	.+4      	; 0x928 <vfprintf+0x346>
 924:	80 e2       	ldi	r24, 0x20	; 32
 926:	01 c0       	rjmp	.+2      	; 0x92a <vfprintf+0x348>
 928:	8b e2       	ldi	r24, 0x2B	; 43
 92a:	27 fd       	sbrc	r18, 7
 92c:	8d e2       	ldi	r24, 0x2D	; 45
 92e:	b7 01       	movw	r22, r14
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 936:	a5 14       	cp	r10, r5
 938:	38 f4       	brcc	.+14     	; 0x948 <vfprintf+0x366>
 93a:	b7 01       	movw	r22, r14
 93c:	80 e3       	ldi	r24, 0x30	; 48
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 944:	5a 94       	dec	r5
 946:	f7 cf       	rjmp	.-18     	; 0x936 <vfprintf+0x354>
 948:	aa 94       	dec	r10
 94a:	f4 01       	movw	r30, r8
 94c:	ea 0d       	add	r30, r10
 94e:	f1 1d       	adc	r31, r1
 950:	80 81       	ld	r24, Z
 952:	b7 01       	movw	r22, r14
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 95a:	a1 10       	cpse	r10, r1
 95c:	f5 cf       	rjmp	.-22     	; 0x948 <vfprintf+0x366>
 95e:	33 20       	and	r3, r3
 960:	09 f4       	brne	.+2      	; 0x964 <vfprintf+0x382>
 962:	51 ce       	rjmp	.-862    	; 0x606 <vfprintf+0x24>
 964:	b7 01       	movw	r22, r14
 966:	80 e2       	ldi	r24, 0x20	; 32
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 96e:	3a 94       	dec	r3
 970:	f6 cf       	rjmp	.-20     	; 0x95e <vfprintf+0x37c>
 972:	f7 01       	movw	r30, r14
 974:	86 81       	ldd	r24, Z+6	; 0x06
 976:	97 81       	ldd	r25, Z+7	; 0x07
 978:	02 c0       	rjmp	.+4      	; 0x97e <vfprintf+0x39c>
 97a:	8f ef       	ldi	r24, 0xFF	; 255
 97c:	9f ef       	ldi	r25, 0xFF	; 255
 97e:	2c 96       	adiw	r28, 0x0c	; 12
 980:	e2 e1       	ldi	r30, 0x12	; 18
 982:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__epilogue_restores__>

00000986 <calloc>:
 986:	0f 93       	push	r16
 988:	1f 93       	push	r17
 98a:	cf 93       	push	r28
 98c:	df 93       	push	r29
 98e:	86 9f       	mul	r24, r22
 990:	80 01       	movw	r16, r0
 992:	87 9f       	mul	r24, r23
 994:	10 0d       	add	r17, r0
 996:	96 9f       	mul	r25, r22
 998:	10 0d       	add	r17, r0
 99a:	11 24       	eor	r1, r1
 99c:	c8 01       	movw	r24, r16
 99e:	0e 94 df 04 	call	0x9be	; 0x9be <malloc>
 9a2:	ec 01       	movw	r28, r24
 9a4:	00 97       	sbiw	r24, 0x00	; 0
 9a6:	29 f0       	breq	.+10     	; 0x9b2 <calloc+0x2c>
 9a8:	a8 01       	movw	r20, r16
 9aa:	60 e0       	ldi	r22, 0x00	; 0
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	0e 94 11 06 	call	0xc22	; 0xc22 <memset>
 9b2:	ce 01       	movw	r24, r28
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	08 95       	ret

000009be <malloc>:
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	82 30       	cpi	r24, 0x02	; 2
 9c4:	91 05       	cpc	r25, r1
 9c6:	10 f4       	brcc	.+4      	; 0x9cc <malloc+0xe>
 9c8:	82 e0       	ldi	r24, 0x02	; 2
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	e0 91 50 02 	lds	r30, 0x0250
 9d0:	f0 91 51 02 	lds	r31, 0x0251
 9d4:	20 e0       	ldi	r18, 0x00	; 0
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	a0 e0       	ldi	r26, 0x00	; 0
 9da:	b0 e0       	ldi	r27, 0x00	; 0
 9dc:	30 97       	sbiw	r30, 0x00	; 0
 9de:	39 f1       	breq	.+78     	; 0xa2e <malloc+0x70>
 9e0:	40 81       	ld	r20, Z
 9e2:	51 81       	ldd	r21, Z+1	; 0x01
 9e4:	48 17       	cp	r20, r24
 9e6:	59 07       	cpc	r21, r25
 9e8:	b8 f0       	brcs	.+46     	; 0xa18 <malloc+0x5a>
 9ea:	48 17       	cp	r20, r24
 9ec:	59 07       	cpc	r21, r25
 9ee:	71 f4       	brne	.+28     	; 0xa0c <malloc+0x4e>
 9f0:	82 81       	ldd	r24, Z+2	; 0x02
 9f2:	93 81       	ldd	r25, Z+3	; 0x03
 9f4:	10 97       	sbiw	r26, 0x00	; 0
 9f6:	29 f0       	breq	.+10     	; 0xa02 <malloc+0x44>
 9f8:	13 96       	adiw	r26, 0x03	; 3
 9fa:	9c 93       	st	X, r25
 9fc:	8e 93       	st	-X, r24
 9fe:	12 97       	sbiw	r26, 0x02	; 2
 a00:	2c c0       	rjmp	.+88     	; 0xa5a <malloc+0x9c>
 a02:	90 93 51 02 	sts	0x0251, r25
 a06:	80 93 50 02 	sts	0x0250, r24
 a0a:	27 c0       	rjmp	.+78     	; 0xa5a <malloc+0x9c>
 a0c:	21 15       	cp	r18, r1
 a0e:	31 05       	cpc	r19, r1
 a10:	31 f0       	breq	.+12     	; 0xa1e <malloc+0x60>
 a12:	42 17       	cp	r20, r18
 a14:	53 07       	cpc	r21, r19
 a16:	18 f0       	brcs	.+6      	; 0xa1e <malloc+0x60>
 a18:	a9 01       	movw	r20, r18
 a1a:	db 01       	movw	r26, r22
 a1c:	01 c0       	rjmp	.+2      	; 0xa20 <malloc+0x62>
 a1e:	ef 01       	movw	r28, r30
 a20:	9a 01       	movw	r18, r20
 a22:	bd 01       	movw	r22, r26
 a24:	df 01       	movw	r26, r30
 a26:	02 80       	ldd	r0, Z+2	; 0x02
 a28:	f3 81       	ldd	r31, Z+3	; 0x03
 a2a:	e0 2d       	mov	r30, r0
 a2c:	d7 cf       	rjmp	.-82     	; 0x9dc <malloc+0x1e>
 a2e:	21 15       	cp	r18, r1
 a30:	31 05       	cpc	r19, r1
 a32:	f9 f0       	breq	.+62     	; 0xa72 <malloc+0xb4>
 a34:	28 1b       	sub	r18, r24
 a36:	39 0b       	sbc	r19, r25
 a38:	24 30       	cpi	r18, 0x04	; 4
 a3a:	31 05       	cpc	r19, r1
 a3c:	80 f4       	brcc	.+32     	; 0xa5e <malloc+0xa0>
 a3e:	8a 81       	ldd	r24, Y+2	; 0x02
 a40:	9b 81       	ldd	r25, Y+3	; 0x03
 a42:	61 15       	cp	r22, r1
 a44:	71 05       	cpc	r23, r1
 a46:	21 f0       	breq	.+8      	; 0xa50 <malloc+0x92>
 a48:	fb 01       	movw	r30, r22
 a4a:	93 83       	std	Z+3, r25	; 0x03
 a4c:	82 83       	std	Z+2, r24	; 0x02
 a4e:	04 c0       	rjmp	.+8      	; 0xa58 <malloc+0x9a>
 a50:	90 93 51 02 	sts	0x0251, r25
 a54:	80 93 50 02 	sts	0x0250, r24
 a58:	fe 01       	movw	r30, r28
 a5a:	32 96       	adiw	r30, 0x02	; 2
 a5c:	44 c0       	rjmp	.+136    	; 0xae6 <malloc+0x128>
 a5e:	fe 01       	movw	r30, r28
 a60:	e2 0f       	add	r30, r18
 a62:	f3 1f       	adc	r31, r19
 a64:	81 93       	st	Z+, r24
 a66:	91 93       	st	Z+, r25
 a68:	22 50       	subi	r18, 0x02	; 2
 a6a:	31 09       	sbc	r19, r1
 a6c:	39 83       	std	Y+1, r19	; 0x01
 a6e:	28 83       	st	Y, r18
 a70:	3a c0       	rjmp	.+116    	; 0xae6 <malloc+0x128>
 a72:	20 91 4e 02 	lds	r18, 0x024E
 a76:	30 91 4f 02 	lds	r19, 0x024F
 a7a:	23 2b       	or	r18, r19
 a7c:	41 f4       	brne	.+16     	; 0xa8e <malloc+0xd0>
 a7e:	20 91 06 01 	lds	r18, 0x0106
 a82:	30 91 07 01 	lds	r19, 0x0107
 a86:	30 93 4f 02 	sts	0x024F, r19
 a8a:	20 93 4e 02 	sts	0x024E, r18
 a8e:	20 91 04 01 	lds	r18, 0x0104
 a92:	30 91 05 01 	lds	r19, 0x0105
 a96:	21 15       	cp	r18, r1
 a98:	31 05       	cpc	r19, r1
 a9a:	41 f4       	brne	.+16     	; 0xaac <malloc+0xee>
 a9c:	2d b7       	in	r18, 0x3d	; 61
 a9e:	3e b7       	in	r19, 0x3e	; 62
 aa0:	40 91 08 01 	lds	r20, 0x0108
 aa4:	50 91 09 01 	lds	r21, 0x0109
 aa8:	24 1b       	sub	r18, r20
 aaa:	35 0b       	sbc	r19, r21
 aac:	e0 91 4e 02 	lds	r30, 0x024E
 ab0:	f0 91 4f 02 	lds	r31, 0x024F
 ab4:	e2 17       	cp	r30, r18
 ab6:	f3 07       	cpc	r31, r19
 ab8:	a0 f4       	brcc	.+40     	; 0xae2 <malloc+0x124>
 aba:	2e 1b       	sub	r18, r30
 abc:	3f 0b       	sbc	r19, r31
 abe:	28 17       	cp	r18, r24
 ac0:	39 07       	cpc	r19, r25
 ac2:	78 f0       	brcs	.+30     	; 0xae2 <malloc+0x124>
 ac4:	ac 01       	movw	r20, r24
 ac6:	4e 5f       	subi	r20, 0xFE	; 254
 ac8:	5f 4f       	sbci	r21, 0xFF	; 255
 aca:	24 17       	cp	r18, r20
 acc:	35 07       	cpc	r19, r21
 ace:	48 f0       	brcs	.+18     	; 0xae2 <malloc+0x124>
 ad0:	4e 0f       	add	r20, r30
 ad2:	5f 1f       	adc	r21, r31
 ad4:	50 93 4f 02 	sts	0x024F, r21
 ad8:	40 93 4e 02 	sts	0x024E, r20
 adc:	81 93       	st	Z+, r24
 ade:	91 93       	st	Z+, r25
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <malloc+0x128>
 ae2:	e0 e0       	ldi	r30, 0x00	; 0
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	cf 01       	movw	r24, r30
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	08 95       	ret

00000aee <free>:
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	00 97       	sbiw	r24, 0x00	; 0
 af4:	09 f4       	brne	.+2      	; 0xaf8 <free+0xa>
 af6:	87 c0       	rjmp	.+270    	; 0xc06 <free+0x118>
 af8:	fc 01       	movw	r30, r24
 afa:	32 97       	sbiw	r30, 0x02	; 2
 afc:	13 82       	std	Z+3, r1	; 0x03
 afe:	12 82       	std	Z+2, r1	; 0x02
 b00:	c0 91 50 02 	lds	r28, 0x0250
 b04:	d0 91 51 02 	lds	r29, 0x0251
 b08:	20 97       	sbiw	r28, 0x00	; 0
 b0a:	81 f4       	brne	.+32     	; 0xb2c <free+0x3e>
 b0c:	20 81       	ld	r18, Z
 b0e:	31 81       	ldd	r19, Z+1	; 0x01
 b10:	28 0f       	add	r18, r24
 b12:	39 1f       	adc	r19, r25
 b14:	80 91 4e 02 	lds	r24, 0x024E
 b18:	90 91 4f 02 	lds	r25, 0x024F
 b1c:	82 17       	cp	r24, r18
 b1e:	93 07       	cpc	r25, r19
 b20:	79 f5       	brne	.+94     	; 0xb80 <free+0x92>
 b22:	f0 93 4f 02 	sts	0x024F, r31
 b26:	e0 93 4e 02 	sts	0x024E, r30
 b2a:	6d c0       	rjmp	.+218    	; 0xc06 <free+0x118>
 b2c:	de 01       	movw	r26, r28
 b2e:	20 e0       	ldi	r18, 0x00	; 0
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	ae 17       	cp	r26, r30
 b34:	bf 07       	cpc	r27, r31
 b36:	50 f4       	brcc	.+20     	; 0xb4c <free+0x5e>
 b38:	12 96       	adiw	r26, 0x02	; 2
 b3a:	4d 91       	ld	r20, X+
 b3c:	5c 91       	ld	r21, X
 b3e:	13 97       	sbiw	r26, 0x03	; 3
 b40:	9d 01       	movw	r18, r26
 b42:	41 15       	cp	r20, r1
 b44:	51 05       	cpc	r21, r1
 b46:	09 f1       	breq	.+66     	; 0xb8a <free+0x9c>
 b48:	da 01       	movw	r26, r20
 b4a:	f3 cf       	rjmp	.-26     	; 0xb32 <free+0x44>
 b4c:	b3 83       	std	Z+3, r27	; 0x03
 b4e:	a2 83       	std	Z+2, r26	; 0x02
 b50:	40 81       	ld	r20, Z
 b52:	51 81       	ldd	r21, Z+1	; 0x01
 b54:	84 0f       	add	r24, r20
 b56:	95 1f       	adc	r25, r21
 b58:	8a 17       	cp	r24, r26
 b5a:	9b 07       	cpc	r25, r27
 b5c:	71 f4       	brne	.+28     	; 0xb7a <free+0x8c>
 b5e:	8d 91       	ld	r24, X+
 b60:	9c 91       	ld	r25, X
 b62:	11 97       	sbiw	r26, 0x01	; 1
 b64:	84 0f       	add	r24, r20
 b66:	95 1f       	adc	r25, r21
 b68:	02 96       	adiw	r24, 0x02	; 2
 b6a:	91 83       	std	Z+1, r25	; 0x01
 b6c:	80 83       	st	Z, r24
 b6e:	12 96       	adiw	r26, 0x02	; 2
 b70:	8d 91       	ld	r24, X+
 b72:	9c 91       	ld	r25, X
 b74:	13 97       	sbiw	r26, 0x03	; 3
 b76:	93 83       	std	Z+3, r25	; 0x03
 b78:	82 83       	std	Z+2, r24	; 0x02
 b7a:	21 15       	cp	r18, r1
 b7c:	31 05       	cpc	r19, r1
 b7e:	29 f4       	brne	.+10     	; 0xb8a <free+0x9c>
 b80:	f0 93 51 02 	sts	0x0251, r31
 b84:	e0 93 50 02 	sts	0x0250, r30
 b88:	3e c0       	rjmp	.+124    	; 0xc06 <free+0x118>
 b8a:	d9 01       	movw	r26, r18
 b8c:	13 96       	adiw	r26, 0x03	; 3
 b8e:	fc 93       	st	X, r31
 b90:	ee 93       	st	-X, r30
 b92:	12 97       	sbiw	r26, 0x02	; 2
 b94:	4d 91       	ld	r20, X+
 b96:	5d 91       	ld	r21, X+
 b98:	a4 0f       	add	r26, r20
 b9a:	b5 1f       	adc	r27, r21
 b9c:	ea 17       	cp	r30, r26
 b9e:	fb 07       	cpc	r31, r27
 ba0:	79 f4       	brne	.+30     	; 0xbc0 <free+0xd2>
 ba2:	80 81       	ld	r24, Z
 ba4:	91 81       	ldd	r25, Z+1	; 0x01
 ba6:	84 0f       	add	r24, r20
 ba8:	95 1f       	adc	r25, r21
 baa:	02 96       	adiw	r24, 0x02	; 2
 bac:	d9 01       	movw	r26, r18
 bae:	11 96       	adiw	r26, 0x01	; 1
 bb0:	9c 93       	st	X, r25
 bb2:	8e 93       	st	-X, r24
 bb4:	82 81       	ldd	r24, Z+2	; 0x02
 bb6:	93 81       	ldd	r25, Z+3	; 0x03
 bb8:	13 96       	adiw	r26, 0x03	; 3
 bba:	9c 93       	st	X, r25
 bbc:	8e 93       	st	-X, r24
 bbe:	12 97       	sbiw	r26, 0x02	; 2
 bc0:	e0 e0       	ldi	r30, 0x00	; 0
 bc2:	f0 e0       	ldi	r31, 0x00	; 0
 bc4:	8a 81       	ldd	r24, Y+2	; 0x02
 bc6:	9b 81       	ldd	r25, Y+3	; 0x03
 bc8:	00 97       	sbiw	r24, 0x00	; 0
 bca:	19 f0       	breq	.+6      	; 0xbd2 <free+0xe4>
 bcc:	fe 01       	movw	r30, r28
 bce:	ec 01       	movw	r28, r24
 bd0:	f9 cf       	rjmp	.-14     	; 0xbc4 <free+0xd6>
 bd2:	ce 01       	movw	r24, r28
 bd4:	02 96       	adiw	r24, 0x02	; 2
 bd6:	28 81       	ld	r18, Y
 bd8:	39 81       	ldd	r19, Y+1	; 0x01
 bda:	82 0f       	add	r24, r18
 bdc:	93 1f       	adc	r25, r19
 bde:	20 91 4e 02 	lds	r18, 0x024E
 be2:	30 91 4f 02 	lds	r19, 0x024F
 be6:	28 17       	cp	r18, r24
 be8:	39 07       	cpc	r19, r25
 bea:	69 f4       	brne	.+26     	; 0xc06 <free+0x118>
 bec:	30 97       	sbiw	r30, 0x00	; 0
 bee:	29 f4       	brne	.+10     	; 0xbfa <free+0x10c>
 bf0:	10 92 51 02 	sts	0x0251, r1
 bf4:	10 92 50 02 	sts	0x0250, r1
 bf8:	02 c0       	rjmp	.+4      	; 0xbfe <free+0x110>
 bfa:	13 82       	std	Z+3, r1	; 0x03
 bfc:	12 82       	std	Z+2, r1	; 0x02
 bfe:	d0 93 4f 02 	sts	0x024F, r29
 c02:	c0 93 4e 02 	sts	0x024E, r28
 c06:	df 91       	pop	r29
 c08:	cf 91       	pop	r28
 c0a:	08 95       	ret

00000c0c <strnlen_P>:
 c0c:	fc 01       	movw	r30, r24
 c0e:	05 90       	lpm	r0, Z+
 c10:	61 50       	subi	r22, 0x01	; 1
 c12:	70 40       	sbci	r23, 0x00	; 0
 c14:	01 10       	cpse	r0, r1
 c16:	d8 f7       	brcc	.-10     	; 0xc0e <strnlen_P+0x2>
 c18:	80 95       	com	r24
 c1a:	90 95       	com	r25
 c1c:	8e 0f       	add	r24, r30
 c1e:	9f 1f       	adc	r25, r31
 c20:	08 95       	ret

00000c22 <memset>:
 c22:	dc 01       	movw	r26, r24
 c24:	01 c0       	rjmp	.+2      	; 0xc28 <memset+0x6>
 c26:	6d 93       	st	X+, r22
 c28:	41 50       	subi	r20, 0x01	; 1
 c2a:	50 40       	sbci	r21, 0x00	; 0
 c2c:	e0 f7       	brcc	.-8      	; 0xc26 <memset+0x4>
 c2e:	08 95       	ret

00000c30 <strnlen>:
 c30:	fc 01       	movw	r30, r24
 c32:	61 50       	subi	r22, 0x01	; 1
 c34:	70 40       	sbci	r23, 0x00	; 0
 c36:	01 90       	ld	r0, Z+
 c38:	01 10       	cpse	r0, r1
 c3a:	d8 f7       	brcc	.-10     	; 0xc32 <strnlen+0x2>
 c3c:	80 95       	com	r24
 c3e:	90 95       	com	r25
 c40:	8e 0f       	add	r24, r30
 c42:	9f 1f       	adc	r25, r31
 c44:	08 95       	ret

00000c46 <fputc>:
 c46:	0f 93       	push	r16
 c48:	1f 93       	push	r17
 c4a:	cf 93       	push	r28
 c4c:	df 93       	push	r29
 c4e:	18 2f       	mov	r17, r24
 c50:	09 2f       	mov	r16, r25
 c52:	eb 01       	movw	r28, r22
 c54:	8b 81       	ldd	r24, Y+3	; 0x03
 c56:	81 fd       	sbrc	r24, 1
 c58:	03 c0       	rjmp	.+6      	; 0xc60 <fputc+0x1a>
 c5a:	8f ef       	ldi	r24, 0xFF	; 255
 c5c:	9f ef       	ldi	r25, 0xFF	; 255
 c5e:	20 c0       	rjmp	.+64     	; 0xca0 <fputc+0x5a>
 c60:	82 ff       	sbrs	r24, 2
 c62:	10 c0       	rjmp	.+32     	; 0xc84 <fputc+0x3e>
 c64:	4e 81       	ldd	r20, Y+6	; 0x06
 c66:	5f 81       	ldd	r21, Y+7	; 0x07
 c68:	2c 81       	ldd	r18, Y+4	; 0x04
 c6a:	3d 81       	ldd	r19, Y+5	; 0x05
 c6c:	42 17       	cp	r20, r18
 c6e:	53 07       	cpc	r21, r19
 c70:	7c f4       	brge	.+30     	; 0xc90 <fputc+0x4a>
 c72:	e8 81       	ld	r30, Y
 c74:	f9 81       	ldd	r31, Y+1	; 0x01
 c76:	9f 01       	movw	r18, r30
 c78:	2f 5f       	subi	r18, 0xFF	; 255
 c7a:	3f 4f       	sbci	r19, 0xFF	; 255
 c7c:	39 83       	std	Y+1, r19	; 0x01
 c7e:	28 83       	st	Y, r18
 c80:	10 83       	st	Z, r17
 c82:	06 c0       	rjmp	.+12     	; 0xc90 <fputc+0x4a>
 c84:	e8 85       	ldd	r30, Y+8	; 0x08
 c86:	f9 85       	ldd	r31, Y+9	; 0x09
 c88:	81 2f       	mov	r24, r17
 c8a:	09 95       	icall
 c8c:	89 2b       	or	r24, r25
 c8e:	29 f7       	brne	.-54     	; 0xc5a <fputc+0x14>
 c90:	2e 81       	ldd	r18, Y+6	; 0x06
 c92:	3f 81       	ldd	r19, Y+7	; 0x07
 c94:	2f 5f       	subi	r18, 0xFF	; 255
 c96:	3f 4f       	sbci	r19, 0xFF	; 255
 c98:	3f 83       	std	Y+7, r19	; 0x07
 c9a:	2e 83       	std	Y+6, r18	; 0x06
 c9c:	81 2f       	mov	r24, r17
 c9e:	90 2f       	mov	r25, r16
 ca0:	df 91       	pop	r29
 ca2:	cf 91       	pop	r28
 ca4:	1f 91       	pop	r17
 ca6:	0f 91       	pop	r16
 ca8:	08 95       	ret

00000caa <__ultoa_invert>:
 caa:	fa 01       	movw	r30, r20
 cac:	aa 27       	eor	r26, r26
 cae:	28 30       	cpi	r18, 0x08	; 8
 cb0:	51 f1       	breq	.+84     	; 0xd06 <__ultoa_invert+0x5c>
 cb2:	20 31       	cpi	r18, 0x10	; 16
 cb4:	81 f1       	breq	.+96     	; 0xd16 <__ultoa_invert+0x6c>
 cb6:	e8 94       	clt
 cb8:	6f 93       	push	r22
 cba:	6e 7f       	andi	r22, 0xFE	; 254
 cbc:	6e 5f       	subi	r22, 0xFE	; 254
 cbe:	7f 4f       	sbci	r23, 0xFF	; 255
 cc0:	8f 4f       	sbci	r24, 0xFF	; 255
 cc2:	9f 4f       	sbci	r25, 0xFF	; 255
 cc4:	af 4f       	sbci	r26, 0xFF	; 255
 cc6:	b1 e0       	ldi	r27, 0x01	; 1
 cc8:	3e d0       	rcall	.+124    	; 0xd46 <__ultoa_invert+0x9c>
 cca:	b4 e0       	ldi	r27, 0x04	; 4
 ccc:	3c d0       	rcall	.+120    	; 0xd46 <__ultoa_invert+0x9c>
 cce:	67 0f       	add	r22, r23
 cd0:	78 1f       	adc	r23, r24
 cd2:	89 1f       	adc	r24, r25
 cd4:	9a 1f       	adc	r25, r26
 cd6:	a1 1d       	adc	r26, r1
 cd8:	68 0f       	add	r22, r24
 cda:	79 1f       	adc	r23, r25
 cdc:	8a 1f       	adc	r24, r26
 cde:	91 1d       	adc	r25, r1
 ce0:	a1 1d       	adc	r26, r1
 ce2:	6a 0f       	add	r22, r26
 ce4:	71 1d       	adc	r23, r1
 ce6:	81 1d       	adc	r24, r1
 ce8:	91 1d       	adc	r25, r1
 cea:	a1 1d       	adc	r26, r1
 cec:	20 d0       	rcall	.+64     	; 0xd2e <__ultoa_invert+0x84>
 cee:	09 f4       	brne	.+2      	; 0xcf2 <__ultoa_invert+0x48>
 cf0:	68 94       	set
 cf2:	3f 91       	pop	r19
 cf4:	2a e0       	ldi	r18, 0x0A	; 10
 cf6:	26 9f       	mul	r18, r22
 cf8:	11 24       	eor	r1, r1
 cfa:	30 19       	sub	r19, r0
 cfc:	30 5d       	subi	r19, 0xD0	; 208
 cfe:	31 93       	st	Z+, r19
 d00:	de f6       	brtc	.-74     	; 0xcb8 <__ultoa_invert+0xe>
 d02:	cf 01       	movw	r24, r30
 d04:	08 95       	ret
 d06:	46 2f       	mov	r20, r22
 d08:	47 70       	andi	r20, 0x07	; 7
 d0a:	40 5d       	subi	r20, 0xD0	; 208
 d0c:	41 93       	st	Z+, r20
 d0e:	b3 e0       	ldi	r27, 0x03	; 3
 d10:	0f d0       	rcall	.+30     	; 0xd30 <__ultoa_invert+0x86>
 d12:	c9 f7       	brne	.-14     	; 0xd06 <__ultoa_invert+0x5c>
 d14:	f6 cf       	rjmp	.-20     	; 0xd02 <__ultoa_invert+0x58>
 d16:	46 2f       	mov	r20, r22
 d18:	4f 70       	andi	r20, 0x0F	; 15
 d1a:	40 5d       	subi	r20, 0xD0	; 208
 d1c:	4a 33       	cpi	r20, 0x3A	; 58
 d1e:	18 f0       	brcs	.+6      	; 0xd26 <__ultoa_invert+0x7c>
 d20:	49 5d       	subi	r20, 0xD9	; 217
 d22:	31 fd       	sbrc	r19, 1
 d24:	40 52       	subi	r20, 0x20	; 32
 d26:	41 93       	st	Z+, r20
 d28:	02 d0       	rcall	.+4      	; 0xd2e <__ultoa_invert+0x84>
 d2a:	a9 f7       	brne	.-22     	; 0xd16 <__ultoa_invert+0x6c>
 d2c:	ea cf       	rjmp	.-44     	; 0xd02 <__ultoa_invert+0x58>
 d2e:	b4 e0       	ldi	r27, 0x04	; 4
 d30:	a6 95       	lsr	r26
 d32:	97 95       	ror	r25
 d34:	87 95       	ror	r24
 d36:	77 95       	ror	r23
 d38:	67 95       	ror	r22
 d3a:	ba 95       	dec	r27
 d3c:	c9 f7       	brne	.-14     	; 0xd30 <__ultoa_invert+0x86>
 d3e:	00 97       	sbiw	r24, 0x00	; 0
 d40:	61 05       	cpc	r22, r1
 d42:	71 05       	cpc	r23, r1
 d44:	08 95       	ret
 d46:	9b 01       	movw	r18, r22
 d48:	ac 01       	movw	r20, r24
 d4a:	0a 2e       	mov	r0, r26
 d4c:	06 94       	lsr	r0
 d4e:	57 95       	ror	r21
 d50:	47 95       	ror	r20
 d52:	37 95       	ror	r19
 d54:	27 95       	ror	r18
 d56:	ba 95       	dec	r27
 d58:	c9 f7       	brne	.-14     	; 0xd4c <__ultoa_invert+0xa2>
 d5a:	62 0f       	add	r22, r18
 d5c:	73 1f       	adc	r23, r19
 d5e:	84 1f       	adc	r24, r20
 d60:	95 1f       	adc	r25, r21
 d62:	a0 1d       	adc	r26, r0
 d64:	08 95       	ret

00000d66 <__divmodsi4>:
 d66:	05 2e       	mov	r0, r21
 d68:	97 fb       	bst	r25, 7
 d6a:	1e f4       	brtc	.+6      	; 0xd72 <__divmodsi4+0xc>
 d6c:	00 94       	com	r0
 d6e:	0e 94 ca 06 	call	0xd94	; 0xd94 <__negsi2>
 d72:	57 fd       	sbrc	r21, 7
 d74:	07 d0       	rcall	.+14     	; 0xd84 <__divmodsi4_neg2>
 d76:	0e 94 1c 07 	call	0xe38	; 0xe38 <__udivmodsi4>
 d7a:	07 fc       	sbrc	r0, 7
 d7c:	03 d0       	rcall	.+6      	; 0xd84 <__divmodsi4_neg2>
 d7e:	4e f4       	brtc	.+18     	; 0xd92 <__divmodsi4_exit>
 d80:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__negsi2>

00000d84 <__divmodsi4_neg2>:
 d84:	50 95       	com	r21
 d86:	40 95       	com	r20
 d88:	30 95       	com	r19
 d8a:	21 95       	neg	r18
 d8c:	3f 4f       	sbci	r19, 0xFF	; 255
 d8e:	4f 4f       	sbci	r20, 0xFF	; 255
 d90:	5f 4f       	sbci	r21, 0xFF	; 255

00000d92 <__divmodsi4_exit>:
 d92:	08 95       	ret

00000d94 <__negsi2>:
 d94:	90 95       	com	r25
 d96:	80 95       	com	r24
 d98:	70 95       	com	r23
 d9a:	61 95       	neg	r22
 d9c:	7f 4f       	sbci	r23, 0xFF	; 255
 d9e:	8f 4f       	sbci	r24, 0xFF	; 255
 da0:	9f 4f       	sbci	r25, 0xFF	; 255
 da2:	08 95       	ret

00000da4 <__muluhisi3>:
 da4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__umulhisi3>
 da8:	a5 9f       	mul	r26, r21
 daa:	90 0d       	add	r25, r0
 dac:	b4 9f       	mul	r27, r20
 dae:	90 0d       	add	r25, r0
 db0:	a4 9f       	mul	r26, r20
 db2:	80 0d       	add	r24, r0
 db4:	91 1d       	adc	r25, r1
 db6:	11 24       	eor	r1, r1
 db8:	08 95       	ret

00000dba <__mulshisi3>:
 dba:	b7 ff       	sbrs	r27, 7
 dbc:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__muluhisi3>

00000dc0 <__mulohisi3>:
 dc0:	0e 94 d2 06 	call	0xda4	; 0xda4 <__muluhisi3>
 dc4:	82 1b       	sub	r24, r18
 dc6:	93 0b       	sbc	r25, r19
 dc8:	08 95       	ret

00000dca <__prologue_saves__>:
 dca:	2f 92       	push	r2
 dcc:	3f 92       	push	r3
 dce:	4f 92       	push	r4
 dd0:	5f 92       	push	r5
 dd2:	6f 92       	push	r6
 dd4:	7f 92       	push	r7
 dd6:	8f 92       	push	r8
 dd8:	9f 92       	push	r9
 dda:	af 92       	push	r10
 ddc:	bf 92       	push	r11
 dde:	cf 92       	push	r12
 de0:	df 92       	push	r13
 de2:	ef 92       	push	r14
 de4:	ff 92       	push	r15
 de6:	0f 93       	push	r16
 de8:	1f 93       	push	r17
 dea:	cf 93       	push	r28
 dec:	df 93       	push	r29
 dee:	cd b7       	in	r28, 0x3d	; 61
 df0:	de b7       	in	r29, 0x3e	; 62
 df2:	ca 1b       	sub	r28, r26
 df4:	db 0b       	sbc	r29, r27
 df6:	0f b6       	in	r0, 0x3f	; 63
 df8:	f8 94       	cli
 dfa:	de bf       	out	0x3e, r29	; 62
 dfc:	0f be       	out	0x3f, r0	; 63
 dfe:	cd bf       	out	0x3d, r28	; 61
 e00:	09 94       	ijmp

00000e02 <__epilogue_restores__>:
 e02:	2a 88       	ldd	r2, Y+18	; 0x12
 e04:	39 88       	ldd	r3, Y+17	; 0x11
 e06:	48 88       	ldd	r4, Y+16	; 0x10
 e08:	5f 84       	ldd	r5, Y+15	; 0x0f
 e0a:	6e 84       	ldd	r6, Y+14	; 0x0e
 e0c:	7d 84       	ldd	r7, Y+13	; 0x0d
 e0e:	8c 84       	ldd	r8, Y+12	; 0x0c
 e10:	9b 84       	ldd	r9, Y+11	; 0x0b
 e12:	aa 84       	ldd	r10, Y+10	; 0x0a
 e14:	b9 84       	ldd	r11, Y+9	; 0x09
 e16:	c8 84       	ldd	r12, Y+8	; 0x08
 e18:	df 80       	ldd	r13, Y+7	; 0x07
 e1a:	ee 80       	ldd	r14, Y+6	; 0x06
 e1c:	fd 80       	ldd	r15, Y+5	; 0x05
 e1e:	0c 81       	ldd	r16, Y+4	; 0x04
 e20:	1b 81       	ldd	r17, Y+3	; 0x03
 e22:	aa 81       	ldd	r26, Y+2	; 0x02
 e24:	b9 81       	ldd	r27, Y+1	; 0x01
 e26:	ce 0f       	add	r28, r30
 e28:	d1 1d       	adc	r29, r1
 e2a:	0f b6       	in	r0, 0x3f	; 63
 e2c:	f8 94       	cli
 e2e:	de bf       	out	0x3e, r29	; 62
 e30:	0f be       	out	0x3f, r0	; 63
 e32:	cd bf       	out	0x3d, r28	; 61
 e34:	ed 01       	movw	r28, r26
 e36:	08 95       	ret

00000e38 <__udivmodsi4>:
 e38:	a1 e2       	ldi	r26, 0x21	; 33
 e3a:	1a 2e       	mov	r1, r26
 e3c:	aa 1b       	sub	r26, r26
 e3e:	bb 1b       	sub	r27, r27
 e40:	fd 01       	movw	r30, r26
 e42:	0d c0       	rjmp	.+26     	; 0xe5e <__udivmodsi4_ep>

00000e44 <__udivmodsi4_loop>:
 e44:	aa 1f       	adc	r26, r26
 e46:	bb 1f       	adc	r27, r27
 e48:	ee 1f       	adc	r30, r30
 e4a:	ff 1f       	adc	r31, r31
 e4c:	a2 17       	cp	r26, r18
 e4e:	b3 07       	cpc	r27, r19
 e50:	e4 07       	cpc	r30, r20
 e52:	f5 07       	cpc	r31, r21
 e54:	20 f0       	brcs	.+8      	; 0xe5e <__udivmodsi4_ep>
 e56:	a2 1b       	sub	r26, r18
 e58:	b3 0b       	sbc	r27, r19
 e5a:	e4 0b       	sbc	r30, r20
 e5c:	f5 0b       	sbc	r31, r21

00000e5e <__udivmodsi4_ep>:
 e5e:	66 1f       	adc	r22, r22
 e60:	77 1f       	adc	r23, r23
 e62:	88 1f       	adc	r24, r24
 e64:	99 1f       	adc	r25, r25
 e66:	1a 94       	dec	r1
 e68:	69 f7       	brne	.-38     	; 0xe44 <__udivmodsi4_loop>
 e6a:	60 95       	com	r22
 e6c:	70 95       	com	r23
 e6e:	80 95       	com	r24
 e70:	90 95       	com	r25
 e72:	9b 01       	movw	r18, r22
 e74:	ac 01       	movw	r20, r24
 e76:	bd 01       	movw	r22, r26
 e78:	cf 01       	movw	r24, r30
 e7a:	08 95       	ret

00000e7c <_exit>:
 e7c:	f8 94       	cli

00000e7e <__stop_program>:
 e7e:	ff cf       	rjmp	.-2      	; 0xe7e <__stop_program>
