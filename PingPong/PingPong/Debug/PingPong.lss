
PingPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800100  00001298  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001ea  008001ea  00001416  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb5  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065a  00000000  00000000  0000224f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006aa  00000000  00000000  000028a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00002f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  0000316c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d7  00000000  00000000  0000351f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003af6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 e9       	ldi	r30, 0x98	; 152
      84:	f2 e1       	ldi	r31, 0x12	; 18
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	aa 3e       	cpi	r26, 0xEA	; 234
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	aa ee       	ldi	r26, 0xEA	; 234
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a4 3f       	cpi	r26, 0xF4	; 244
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
      a6:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
 */ 

#include "ADC_Driver.h"

void ADC_init(){
	clear_bit(INTR_DDR,INTR_bit);
      ae:	b9 98       	cbi	0x17, 1	; 23
      b0:	08 95       	ret

000000b2 <ADC_convert>:
}

//Channel 0-3. (tilsvarer 1-4 i datablad, 0indekserte dem)
uint8_t ADC_convert(char channel){
      b2:	84 30       	cpi	r24, 0x04	; 4
      b4:	08 f0       	brcs	.+2      	; 0xb8 <ADC_convert+0x6>
      b6:	83 e0       	ldi	r24, 0x03	; 3
	
	//ch1 = 0100, ch2 = 0101, ch3 = 0110, ch4 = 0111, dette er lsb
	if(channel > 3) channel = 3;
	else if(channel< 0) channel = 0;
	
	*ADC_memory = ADC_single_ended | channel;
      b8:	84 60       	ori	r24, 0x04	; 4
      ba:	80 93 00 14 	sts	0x1400, r24
	
	//Venter på svar
	while(read_bit(INTR_PIN,INTR_bit));
      be:	b1 99       	sbic	0x16, 1	; 22
      c0:	fe cf       	rjmp	.-4      	; 0xbe <ADC_convert+0xc>
	
	return *ADC_memory;
      c2:	80 91 00 14 	lds	r24, 0x1400
	
}
      c6:	08 95       	ret

000000c8 <SRAM_test>:
	set_bit(SFIOR, XMM2);	//100 -> releaser pc7-pc4 fra minne opperasjoner, til å bli brukt i jtag.
	SRAM_test();
}


void SRAM_test(void){
      c8:	ef 92       	push	r14
      ca:	ff 92       	push	r15
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
      d4:	8a e0       	ldi	r24, 0x0A	; 10
      d6:	91 e0       	ldi	r25, 0x01	; 1
      d8:	9f 93       	push	r25
      da:	8f 93       	push	r24
      dc:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
      e0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <rand>
      e4:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
      e6:	0e 94 66 04 	call	0x8cc	; 0x8cc <srand>
      ea:	0f 90       	pop	r0
      ec:	0f 90       	pop	r0
      ee:	c0 e0       	ldi	r28, 0x00	; 0
      f0:	d8 e1       	ldi	r29, 0x18	; 24


void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	10 e0       	ldi	r17, 0x00	; 0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
		uint8_t some_value = rand();
      f6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <rand>
		ext_ram[i] = some_value;					//Setter inn en tilfeldig verdi
      fa:	88 83       	st	Y, r24
		uint8_t retreived_value = ext_ram[i];		//Måler den tilbake
      fc:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {		//Registrerer om den ble rett.
      fe:	98 17       	cp	r25, r24
     100:	11 f0       	breq	.+4      	; 0x106 <SRAM_test+0x3e>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
			write_errors++;
     102:	0f 5f       	subi	r16, 0xFF	; 255
     104:	1f 4f       	sbci	r17, 0xFF	; 255
     106:	21 96       	adiw	r28, 0x01	; 1
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
     108:	c1 15       	cp	r28, r1
     10a:	80 e2       	ldi	r24, 0x20	; 32
     10c:	d8 07       	cpc	r29, r24
     10e:	99 f7       	brne	.-26     	; 0xf6 <SRAM_test+0x2e>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
     110:	c7 01       	movw	r24, r14
     112:	0e 94 66 04 	call	0x8cc	; 0x8cc <srand>
     116:	c0 e0       	ldi	r28, 0x00	; 0
     118:	d8 e1       	ldi	r29, 0x18	; 24

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     11a:	e1 2c       	mov	r14, r1
     11c:	f1 2c       	mov	r15, r1
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     11e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <rand>
		uint8_t retreived_value = ext_ram[i];
     122:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
     124:	98 17       	cp	r25, r24
     126:	19 f0       	breq	.+6      	; 0x12e <SRAM_test+0x66>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
     128:	8f ef       	ldi	r24, 0xFF	; 255
     12a:	e8 1a       	sub	r14, r24
     12c:	f8 0a       	sbc	r15, r24
     12e:	21 96       	adiw	r28, 0x01	; 1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     130:	c1 15       	cp	r28, r1
     132:	80 e2       	ldi	r24, 0x20	; 32
     134:	d8 07       	cpc	r29, r24
     136:	99 f7       	brne	.-26     	; 0x11e <SRAM_test+0x56>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase \n \n\r", write_errors, retrieval_errors);
     138:	ff 92       	push	r15
     13a:	ef 92       	push	r14
     13c:	1f 93       	push	r17
     13e:	0f 93       	push	r16
     140:	82 e2       	ldi	r24, 0x22	; 34
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	9f 93       	push	r25
     146:	8f 93       	push	r24
     148:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
     14c:	0f 90       	pop	r0
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	ff 90       	pop	r15
     162:	ef 90       	pop	r14
     164:	08 95       	ret

00000166 <SRAM_INIT>:
 */ 

#include "external_SRAM.h"

void SRAM_INIT(void){
	set_bit(MCUCR, SRE);	//External ram endable
     166:	85 b7       	in	r24, 0x35	; 53
     168:	80 68       	ori	r24, 0x80	; 128
     16a:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);	//100 -> releaser pc7-pc4 fra minne opperasjoner, til å bli brukt i jtag.
     16c:	80 b7       	in	r24, 0x30	; 48
     16e:	80 62       	ori	r24, 0x20	; 32
     170:	80 bf       	out	0x30, r24	; 48
	SRAM_test();
     172:	0e 94 64 00 	call	0xc8	; 0xc8 <SRAM_test>
     176:	08 95       	ret

00000178 <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     178:	5d 9b       	sbis	0x0b, 5	; 11
     17a:	fe cf       	rjmp	.-4      	; 0x178 <USART_Transmit>

	//Put data into buffer, sends the data
	UDR0 = data;
     17c:	8c b9       	out	0x0c, r24	; 12
     17e:	08 95       	ret

00000180 <USART_Receive>:
}

unsigned char USART_Receive(void){
	
	//Wait for data to be received
	while( !(UCSR0A & (1<<RXC0)) );
     180:	5f 9b       	sbis	0x0b, 7	; 11
     182:	fe cf       	rjmp	.-4      	; 0x180 <USART_Receive>
	//Get and return received data from buffer
	return UDR0;
     184:	8c b1       	in	r24, 0x0c	; 12
}
     186:	08 95       	ret

00000188 <USART_INIT>:
void USART_INIT(){
	//ubbr = F_CPU
	int baudRate = BAUD;  //Burde vi bruke BAUD fra h fila her? og burde BAUD vÃ¦re 19200?
	unsigned int ubrr = F_CPU/(16*baudRate) -1;
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     188:	8f ef       	ldi	r24, 0xFF	; 255
     18a:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (unsigned char)ubrr;
     18c:	8f e0       	ldi	r24, 0x0F	; 15
     18e:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B	 = (1<<RXEN0)|(1<<TXEN0);
     190:	88 e1       	ldi	r24, 0x18	; 24
     192:	8a b9       	out	0x0a, r24	; 10
		//RXEN:  Aktiverer USART receiver
		//TXEN: Aktiverer USART transmitter
		
	
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     194:	8e e8       	ldi	r24, 0x8E	; 142
     196:	80 bd       	out	0x20, r24	; 32
		//URSEL: Skriver til UCSRC istedet for UBRRH, ved 1.
		//USBS0: Antall stop bits, 0->1bit, 1->2bit
		//UCZ0/1/2: Character size 011->8bit. 
		
	//Slik at vi kan bruke printf;
	fdevopen(USART_Transmit,USART_Receive);
     198:	60 ec       	ldi	r22, 0xC0	; 192
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	8c eb       	ldi	r24, 0xBC	; 188
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fdevopen>
     1a4:	08 95       	ret

000001a6 <controllers_init>:
 */ 

#include "Controllers.h"

void controllers_init(){
		clear_bit(DDRB, PB2);
     1a6:	ba 98       	cbi	0x17, 2	; 23
		clear_bit(DDRB, PB3);
     1a8:	bb 98       	cbi	0x17, 3	; 23
		clear_bit(DDRB, PB4);
     1aa:	bc 98       	cbi	0x17, 4	; 23
     1ac:	08 95       	ret

000001ae <joystick_calibrate>:
}


void joystick_calibrate(JoyStick* js){
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	ec 01       	movw	r28, r24
	js->x_rest = ADC_convert(channelX);
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     1ba:	8e 83       	std	Y+6, r24	; 0x06
	js->y_rest = ADC_convert(channelY);
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     1c2:	8f 83       	std	Y+7, r24	; 0x07
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <joystick_descreet>:
	js->y_descreet = joystick_descreet(js->y_percent);
	
}

int8_t joystick_descreet(int8_t val){
	if(val > slack_js){
     1ca:	8f 31       	cpi	r24, 0x1F	; 31
     1cc:	3c f4       	brge	.+14     	; 0x1dc <joystick_descreet+0x12>
		return 1;
	}
	else if(val < -slack_js){
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	82 3e       	cpi	r24, 0xE2	; 226
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <joystick_descreet+0xc>
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	89 2f       	mov	r24, r25
     1d8:	81 95       	neg	r24
     1da:	08 95       	ret
	
}

int8_t joystick_descreet(int8_t val){
	if(val > slack_js){
		return 1;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
		return -1;
	}
	else{
		return 0;
	}
}
     1de:	08 95       	ret

000001e0 <joystick_update>:
void joystick_calibrate(JoyStick* js){
	js->x_rest = ADC_convert(channelX);
	js->y_rest = ADC_convert(channelY);
}

void joystick_update(JoyStick* js){
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
	js->x_voltage = ADC_convert(channelX);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     1ec:	88 83       	st	Y, r24
	js->y_voltage = ADC_convert(channelY);
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     1f4:	48 2f       	mov	r20, r24
     1f6:	89 83       	std	Y+1, r24	; 0x01
	if(js->x_voltage <= js->x_rest){
     1f8:	88 81       	ld	r24, Y
     1fa:	2e 81       	ldd	r18, Y+6	; 0x06
     1fc:	28 17       	cp	r18, r24
     1fe:	90 f0       	brcs	.+36     	; 0x224 <joystick_update+0x44>
		js->x_percent = (js->x_voltage - js->x_rest)*100/(js->x_rest-1);
     200:	62 2f       	mov	r22, r18
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	28 2f       	mov	r18, r24
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	26 1b       	sub	r18, r22
     20a:	37 0b       	sbc	r19, r23
     20c:	54 e6       	ldi	r21, 0x64	; 100
     20e:	52 9f       	mul	r21, r18
     210:	c0 01       	movw	r24, r0
     212:	53 9f       	mul	r21, r19
     214:	90 0d       	add	r25, r0
     216:	11 24       	eor	r1, r1
     218:	61 50       	subi	r22, 0x01	; 1
     21a:	71 09       	sbc	r23, r1
     21c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__divmodhi4>
     220:	6a 83       	std	Y+2, r22	; 0x02
     222:	13 c0       	rjmp	.+38     	; 0x24a <joystick_update+0x6a>
	}
	else{
		js->x_percent = (js->x_voltage - js->x_rest)*100/(255-js->x_rest);
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	68 2f       	mov	r22, r24
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	62 1b       	sub	r22, r18
     22c:	73 0b       	sbc	r23, r19
     22e:	84 e6       	ldi	r24, 0x64	; 100
     230:	86 9f       	mul	r24, r22
     232:	f0 01       	movw	r30, r0
     234:	87 9f       	mul	r24, r23
     236:	f0 0d       	add	r31, r0
     238:	11 24       	eor	r1, r1
     23a:	6f ef       	ldi	r22, 0xFF	; 255
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	62 1b       	sub	r22, r18
     240:	73 0b       	sbc	r23, r19
     242:	cf 01       	movw	r24, r30
     244:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__divmodhi4>
     248:	6a 83       	std	Y+2, r22	; 0x02
	}
	if(js->y_voltage <= js->y_rest){
     24a:	2f 81       	ldd	r18, Y+7	; 0x07
     24c:	24 17       	cp	r18, r20
     24e:	88 f0       	brcs	.+34     	; 0x272 <joystick_update+0x92>
		js->y_percent = (js->y_voltage - js->y_rest)*100/(js->y_rest-1);
     250:	62 2f       	mov	r22, r18
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	46 1b       	sub	r20, r22
     258:	57 0b       	sbc	r21, r23
     25a:	24 e6       	ldi	r18, 0x64	; 100
     25c:	24 9f       	mul	r18, r20
     25e:	c0 01       	movw	r24, r0
     260:	25 9f       	mul	r18, r21
     262:	90 0d       	add	r25, r0
     264:	11 24       	eor	r1, r1
     266:	61 50       	subi	r22, 0x01	; 1
     268:	71 09       	sbc	r23, r1
     26a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__divmodhi4>
     26e:	6b 83       	std	Y+3, r22	; 0x03
     270:	11 c0       	rjmp	.+34     	; 0x294 <joystick_update+0xb4>
	}
	else{
		js->y_percent = (js->y_voltage - js->y_rest)*100/(255-js->y_rest);
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	42 1b       	sub	r20, r18
     278:	53 0b       	sbc	r21, r19
     27a:	64 e6       	ldi	r22, 0x64	; 100
     27c:	64 9f       	mul	r22, r20
     27e:	c0 01       	movw	r24, r0
     280:	65 9f       	mul	r22, r21
     282:	90 0d       	add	r25, r0
     284:	11 24       	eor	r1, r1
     286:	6f ef       	ldi	r22, 0xFF	; 255
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	62 1b       	sub	r22, r18
     28c:	73 0b       	sbc	r23, r19
     28e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__divmodhi4>
     292:	6b 83       	std	Y+3, r22	; 0x03
	}
	
	js->x_descreet = joystick_descreet(js->x_percent);
     294:	8a 81       	ldd	r24, Y+2	; 0x02
     296:	0e 94 e5 00 	call	0x1ca	; 0x1ca <joystick_descreet>
     29a:	8c 83       	std	Y+4, r24	; 0x04
	js->y_descreet = joystick_descreet(js->y_percent);
     29c:	8b 81       	ldd	r24, Y+3	; 0x03
     29e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <joystick_descreet>
     2a2:	8d 83       	std	Y+5, r24	; 0x05
	
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <slider_update>:
		return 0;
	}
}


void slider_update(Slider* sl){
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	ec 01       	movw	r28, r24
	sl->voltage = ADC_convert(sl->channel);
     2b0:	88 81       	ld	r24, Y
     2b2:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_convert>
     2b6:	89 83       	std	Y+1, r24	; 0x01
	sl->percent = sl->voltage/2.55;
     2b8:	68 2f       	mov	r22, r24
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__floatsisf>
     2c4:	23 e3       	ldi	r18, 0x33	; 51
     2c6:	33 e3       	ldi	r19, 0x33	; 51
     2c8:	43 e2       	ldi	r20, 0x23	; 35
     2ca:	50 e4       	ldi	r21, 0x40	; 64
     2cc:	0e 94 b5 02 	call	0x56a	; 0x56a <__divsf3>
     2d0:	0e 94 1d 03 	call	0x63a	; 0x63a <__fixsfsi>
     2d4:	6a 83       	std	Y+2, r22	; 0x02
	if(sl->percent < 50-slack_slider){
     2d6:	63 32       	cpi	r22, 0x23	; 35
     2d8:	1c f4       	brge	.+6      	; 0x2e0 <slider_update+0x36>
		sl->descreet =	-1;
     2da:	8f ef       	ldi	r24, 0xFF	; 255
     2dc:	8b 83       	std	Y+3, r24	; 0x03
     2de:	06 c0       	rjmp	.+12     	; 0x2ec <slider_update+0x42>
	}
	else if(sl->percent > 50+slack_slider){
     2e0:	62 34       	cpi	r22, 0x42	; 66
     2e2:	1c f0       	brlt	.+6      	; 0x2ea <slider_update+0x40>
		sl->descreet =	+1;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	8b 83       	std	Y+3, r24	; 0x03
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <slider_update+0x42>
	}
	else{
		sl->descreet =	0;
     2ea:	1b 82       	std	Y+3, r1	; 0x03
	}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <OLED_init>:
 *  Author: sverrevr
 */ 
#include "OLED.h"

void OLED_init(){	
	oled_controll = 0xae;	 //Display off (0xaf == on)
     2f2:	e0 e0       	ldi	r30, 0x00	; 0
     2f4:	f0 e1       	ldi	r31, 0x10	; 16
     2f6:	8e ea       	ldi	r24, 0xAE	; 174
     2f8:	80 83       	st	Z, r24
	
	oled_controll = 0xa1;    //segment remap (Skrive v->h)
     2fa:	81 ea       	ldi	r24, 0xA1	; 161
     2fc:	80 83       	st	Z, r24
	
	oled_controll = 0xda;	//common pads hardware: alternative
     2fe:	8a ed       	ldi	r24, 0xDA	; 218
     300:	80 83       	st	Z, r24
	oled_controll = 0x12;	//0x32 = 0b11, 0x12 = 0b01, 0x02 = 0b00, 0x22 = 0b10
     302:	82 e1       	ldi	r24, 0x12	; 18
     304:	80 83       	st	Z, r24
	
	oled_controll = 0xc8;    //common output scan direction:com63~com0 (skriver oppover(c0) eller nedover(c8))
     306:	88 ec       	ldi	r24, 0xC8	; 200
     308:	80 83       	st	Z, r24
	
	oled_controll = 0xa8;    //multiplex ration mode:
     30a:	88 ea       	ldi	r24, 0xA8	; 168
     30c:	80 83       	st	Z, r24
	oled_controll = 0x3f;	//63
     30e:	8f e3       	ldi	r24, 0x3F	; 63
     310:	80 83       	st	Z, r24
	
	oled_controll = 0xd5;    //display divide ratio/osc. freq. mode
     312:	85 ed       	ldi	r24, 0xD5	; 213
     314:	80 83       	st	Z, r24
	oled_controll = 0x80;
     316:	80 e8       	ldi	r24, 0x80	; 128
     318:	80 83       	st	Z, r24
	
	oled_controll = 0x81;   //Endre kontrast til:
     31a:	81 e8       	ldi	r24, 0x81	; 129
     31c:	80 83       	st	Z, r24
	oled_controll = 0x50;	//Dette
     31e:	80 e5       	ldi	r24, 0x50	; 80
     320:	80 83       	st	Z, r24
		
	oled_controll = 0xd9;    //set pre-charge period
     322:	89 ed       	ldi	r24, 0xD9	; 217
     324:	80 83       	st	Z, r24
	oled_controll = 0x21;
     326:	81 e2       	ldi	r24, 0x21	; 33
     328:	80 83       	st	Z, r24
	
	oled_controll = 0x20;	//Set Memory Addressing Mode
     32a:	90 e2       	ldi	r25, 0x20	; 32
     32c:	90 83       	st	Z, r25
	oled_controll = 0x00;	//0x00: Horizontal adressing mode, 0x01 Vertical, 0x02 Page, 0x03 Invalid
     32e:	10 82       	st	Z, r1
	
	oled_controll = 0xdb;    //VCOM deselect level mode
     330:	9b ed       	ldi	r25, 0xDB	; 219
     332:	90 83       	st	Z, r25
	oled_controll = 0x30;
     334:	90 e3       	ldi	r25, 0x30	; 48
     336:	90 83       	st	Z, r25
	
	oled_controll = 0xad;    //master configuration
     338:	9d ea       	ldi	r25, 0xAD	; 173
     33a:	90 83       	st	Z, r25
	oled_controll = 0x00;
     33c:	10 82       	st	Z, r1
	
	oled_controll = 0xa4;    //out follows RAM content (a5 = alle led lyser)
     33e:	94 ea       	ldi	r25, 0xA4	; 164
     340:	90 83       	st	Z, r25
	
	oled_controll = 0xa6;    //set normal display (a7 = invert)
     342:	96 ea       	ldi	r25, 0xA6	; 166
     344:	90 83       	st	Z, r25
		
	
	oled_controll = 0xaf;    // display on
     346:	9f ea       	ldi	r25, 0xAF	; 175
     348:	90 83       	st	Z, r25
	
	
	oled_controll = 0x21;	//Hvor man begynner og slutter på en linje
     34a:	80 83       	st	Z, r24
	oled_controll = 0x00;	//Fra start
     34c:	10 82       	st	Z, r1
	oled_controll = 0xFF;	//Til slutt
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	80 83       	st	Z, r24
	
	oled_controll = 0x22;	//Hvor man begynner og slutter opp go ned
     352:	92 e2       	ldi	r25, 0x22	; 34
     354:	90 83       	st	Z, r25
	oled_controll = 0x00;	//Fra start
     356:	10 82       	st	Z, r1
	oled_controll = 0xFF;	//Til slutt
     358:	80 83       	st	Z, r24
	
	oled_controll = 0x00;	//LSB til startpunkt
     35a:	10 82       	st	Z, r1
	oled_controll = 0x10;	//MSB til startbit (bortover) (så hvilken kolonne) (Kan endre siste hex tegnet fra 0 til F)
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	80 83       	st	Z, r24
	
	oled_controll = 0x40;	//Siste hextegn bestemmer hvor mye teksten flyttes opp, en verdi per bit opp. Funker ikke å endre underveis i koden?
     360:	80 e4       	ldi	r24, 0x40	; 64
     362:	80 83       	st	Z, r24
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	94 e0       	ldi	r25, 0x04	; 4
	
	//Tømmer skjermen
	for(int i = 0; i < 1024; ++i){
		oled_data = 0b00000000;
     368:	e0 e0       	ldi	r30, 0x00	; 0
     36a:	f2 e1       	ldi	r31, 0x12	; 18
     36c:	10 82       	st	Z, r1
     36e:	01 97       	sbiw	r24, 0x01	; 1
	oled_controll = 0x10;	//MSB til startbit (bortover) (så hvilken kolonne) (Kan endre siste hex tegnet fra 0 til F)
	
	oled_controll = 0x40;	//Siste hextegn bestemmer hvor mye teksten flyttes opp, en verdi per bit opp. Funker ikke å endre underveis i koden?
	
	//Tømmer skjermen
	for(int i = 0; i < 1024; ++i){
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	e1 f7       	brne	.-8      	; 0x36c <OLED_init+0x7a>
		oled_data = 0b00000000;
	}
	
	
	oled_controll = 0x20;	//Set Memory Addressing Mode
     374:	e0 e0       	ldi	r30, 0x00	; 0
     376:	f0 e1       	ldi	r31, 0x10	; 16
     378:	80 e2       	ldi	r24, 0x20	; 32
     37a:	80 83       	st	Z, r24
	oled_controll = 0x02;	//0x00: Horizontal adressing mode, 0x01 Vertical, 0x02 Page, 0x03 Invalid
     37c:	82 e0       	ldi	r24, 0x02	; 2
     37e:	80 83       	st	Z, r24
	
	
	
	//oled_data = 0b11000111;
	
	puts("OLED init'd\n\r");
     380:	80 e8       	ldi	r24, 0x80	; 128
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <puts>
     388:	08 95       	ret

0000038a <main>:
#include "Drivers/ADC_Driver.h"
#include "HW_Controll/Controllers.h"
#include "HW_Controll/OLED.h"
#include "Etc/Font.h"

int main(void){
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	60 97       	sbiw	r28, 0x10	; 16
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	USART_INIT();
     39e:	0e 94 c4 00 	call	0x188	; 0x188 <USART_INIT>
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     3a2:	8e e8       	ldi	r24, 0x8E	; 142
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <puts>
	
	SRAM_INIT();
     3aa:	0e 94 b3 00 	call	0x166	; 0x166 <SRAM_INIT>
	ADC_init();
     3ae:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	OLED_init();
     3b2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <OLED_init>
	set_bit(DDRB, PB0);
     3b6:	b8 9a       	sbi	0x17, 0	; 23
	
	controllers_init();
     3b8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <controllers_init>
	JoyStick js;
	Slider s_l;
	Slider s_r;
	joystick_calibrate(&js);
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <joystick_calibrate>
	s_l.channel = 3;
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	89 87       	std	Y+9, r24	; 0x09
	s_r.channel = 2;
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	8d 87       	std	Y+13, r24	; 0x0d
	
	printf("\n\n\n");
     3cc:	8b ea       	ldi	r24, 0xAB	; 171
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <puts>
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
     3d4:	ee 24       	eor	r14, r14
     3d6:	e3 94       	inc	r14
     3d8:	f1 2c       	mov	r15, r1
			toggle_bit(PORTB, PB0);
		}
		joystick_update(&js);
		slider_update(&s_l);
		slider_update(&s_r);
		printf("X: %i    \t", js.x_percent);
     3da:	0f 2e       	mov	r0, r31
     3dc:	fe ea       	ldi	r31, 0xAE	; 174
     3de:	8f 2e       	mov	r8, r31
     3e0:	f1 e0       	ldi	r31, 0x01	; 1
     3e2:	9f 2e       	mov	r9, r31
     3e4:	f0 2d       	mov	r31, r0
		printf("Y: %i    \t", js.y_percent);
     3e6:	0f 2e       	mov	r0, r31
     3e8:	f9 eb       	ldi	r31, 0xB9	; 185
     3ea:	af 2e       	mov	r10, r31
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	bf 2e       	mov	r11, r31
     3f0:	f0 2d       	mov	r31, r0
		printf("L: %i    \t", s_l.percent);
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f1 ed       	ldi	r31, 0xD1	; 209
     3f6:	6f 2e       	mov	r6, r31
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	7f 2e       	mov	r7, r31
     3fc:	f0 2d       	mov	r31, r0
		printf("R: %i    \t", s_r.percent);
     3fe:	0f 2e       	mov	r0, r31
     400:	f5 ec       	ldi	r31, 0xC5	; 197
     402:	4f 2e       	mov	r4, r31
     404:	f1 e0       	ldi	r31, 0x01	; 1
     406:	5f 2e       	mov	r5, r31
     408:	f0 2d       	mov	r31, r0
		printf("BR: %i    \t", read_bit(PINB,PB2));
		printf("BL: %i    \t", read_bit(PINB,PB3));
		printf("BJS: %i    \t\r", read_bit(PINB,PB4));
		
		for(int i= 0; i<8;++i){
			oled_data = font[44][i];
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	12 e1       	ldi	r17, 0x12	; 18
     40e:	0f 2e       	mov	r0, r31
     410:	f1 e4       	ldi	r31, 0x41	; 65
     412:	3f 2e       	mov	r3, r31
     414:	f0 2d       	mov	r31, r0
			oled_data = font[47][i];
		}
		for(int i= 0; i<8;++i){
			oled_data = font[44][i];
		}
		oled_controll = 0xB0 | (mainLoopCounter%8);//setter pagen
     416:	c1 2c       	mov	r12, r1
     418:	68 94       	set
     41a:	dd 24       	eor	r13, r13
     41c:	d4 f8       	bld	r13, 4
     41e:	04 c0       	rjmp	.+8      	; 0x428 <main+0x9e>
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
		if(!(mainLoopCounter%10)){
			toggle_bit(PORTB, PB0);
     420:	98 b3       	in	r25, 0x18	; 24
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	89 27       	eor	r24, r25
     426:	88 bb       	out	0x18, r24	; 24
		}
		joystick_update(&js);
     428:	ce 01       	movw	r24, r28
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <joystick_update>
		slider_update(&s_l);
     430:	ce 01       	movw	r24, r28
     432:	09 96       	adiw	r24, 0x09	; 9
     434:	0e 94 55 01 	call	0x2aa	; 0x2aa <slider_update>
		slider_update(&s_r);
     438:	ce 01       	movw	r24, r28
     43a:	0d 96       	adiw	r24, 0x0d	; 13
     43c:	0e 94 55 01 	call	0x2aa	; 0x2aa <slider_update>
		printf("X: %i    \t", js.x_percent);
     440:	2b 81       	ldd	r18, Y+3	; 0x03
     442:	82 2f       	mov	r24, r18
     444:	99 27       	eor	r25, r25
     446:	87 fd       	sbrc	r24, 7
     448:	90 95       	com	r25
     44a:	9f 93       	push	r25
     44c:	2f 93       	push	r18
     44e:	9f 92       	push	r9
     450:	8f 92       	push	r8
     452:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
		printf("Y: %i    \t", js.y_percent);
     456:	2c 81       	ldd	r18, Y+4	; 0x04
     458:	82 2f       	mov	r24, r18
     45a:	99 27       	eor	r25, r25
     45c:	87 fd       	sbrc	r24, 7
     45e:	90 95       	com	r25
     460:	9f 93       	push	r25
     462:	2f 93       	push	r18
     464:	bf 92       	push	r11
     466:	af 92       	push	r10
     468:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
		printf("L: %i    \t", s_l.percent);
     46c:	2b 85       	ldd	r18, Y+11	; 0x0b
     46e:	82 2f       	mov	r24, r18
     470:	99 27       	eor	r25, r25
     472:	87 fd       	sbrc	r24, 7
     474:	90 95       	com	r25
     476:	9f 93       	push	r25
     478:	2f 93       	push	r18
     47a:	7f 92       	push	r7
     47c:	6f 92       	push	r6
     47e:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
		printf("R: %i    \t", s_r.percent);
     482:	2f 85       	ldd	r18, Y+15	; 0x0f
     484:	82 2f       	mov	r24, r18
     486:	99 27       	eor	r25, r25
     488:	87 fd       	sbrc	r24, 7
     48a:	90 95       	com	r25
     48c:	9f 93       	push	r25
     48e:	2f 93       	push	r18
     490:	5f 92       	push	r5
     492:	4f 92       	push	r4
     494:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
		printf("BR: %i    \t", read_bit(PINB,PB2));
     498:	86 b3       	in	r24, 0x16	; 22
     49a:	84 70       	andi	r24, 0x04	; 4
     49c:	1f 92       	push	r1
     49e:	8f 93       	push	r24
     4a0:	a4 ec       	ldi	r26, 0xC4	; 196
     4a2:	b1 e0       	ldi	r27, 0x01	; 1
     4a4:	bf 93       	push	r27
     4a6:	af 93       	push	r26
     4a8:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
		printf("BL: %i    \t", read_bit(PINB,PB3));
     4ac:	86 b3       	in	r24, 0x16	; 22
     4ae:	88 70       	andi	r24, 0x08	; 8
     4b0:	1f 92       	push	r1
     4b2:	8f 93       	push	r24
     4b4:	a0 ed       	ldi	r26, 0xD0	; 208
     4b6:	b1 e0       	ldi	r27, 0x01	; 1
     4b8:	bf 93       	push	r27
     4ba:	af 93       	push	r26
     4bc:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
		printf("BJS: %i    \t\r", read_bit(PINB,PB4));
     4c0:	86 b3       	in	r24, 0x16	; 22
     4c2:	80 71       	andi	r24, 0x10	; 16
     4c4:	1f 92       	push	r1
     4c6:	8f 93       	push	r24
     4c8:	ac ed       	ldi	r26, 0xDC	; 220
     4ca:	b1 e0       	ldi	r27, 0x01	; 1
     4cc:	bf 93       	push	r27
     4ce:	af 93       	push	r26
     4d0:	0e 94 bc 04 	call	0x978	; 0x978 <printf>
		
		for(int i= 0; i<8;++i){
			oled_data = font[44][i];
     4d4:	d8 01       	movw	r26, r16
     4d6:	3c 92       	st	X, r3
     4d8:	8f e7       	ldi	r24, 0x7F	; 127
     4da:	8c 93       	st	X, r24
     4dc:	8c 93       	st	X, r24
     4de:	3c 92       	st	X, r3
     4e0:	30 e4       	ldi	r19, 0x40	; 64
     4e2:	3c 93       	st	X, r19
     4e4:	20 e6       	ldi	r18, 0x60	; 96
     4e6:	2c 93       	st	X, r18
     4e8:	90 e7       	ldi	r25, 0x70	; 112
     4ea:	9c 93       	st	X, r25
     4ec:	1c 92       	st	X, r1
		}
		for(int i= 0; i<8;++i){
			oled_data = font[47][i];
     4ee:	4c e1       	ldi	r20, 0x1C	; 28
     4f0:	4c 93       	st	X, r20
     4f2:	5e e3       	ldi	r21, 0x3E	; 62
     4f4:	5c 93       	st	X, r21
     4f6:	63 e6       	ldi	r22, 0x63	; 99
     4f8:	6c 93       	st	X, r22
     4fa:	3c 92       	st	X, r3
     4fc:	6c 93       	st	X, r22
     4fe:	5c 93       	st	X, r21
     500:	4c 93       	st	X, r20
     502:	1c 92       	st	X, r1
		}
		for(int i= 0; i<8;++i){
			oled_data = font[44][i];
     504:	3c 92       	st	X, r3
     506:	8c 93       	st	X, r24
     508:	8c 93       	st	X, r24
     50a:	3c 92       	st	X, r3
     50c:	3c 93       	st	X, r19
     50e:	2c 93       	st	X, r18
     510:	9c 93       	st	X, r25
     512:	1c 92       	st	X, r1
		}
		oled_controll = 0xB0 | (mainLoopCounter%8);//setter pagen
     514:	8e 2d       	mov	r24, r14
     516:	87 70       	andi	r24, 0x07	; 7
     518:	80 6b       	ori	r24, 0xB0	; 176
     51a:	f6 01       	movw	r30, r12
     51c:	80 83       	st	Z, r24
		oled_controll = 0x00;	//LSB til startpunkt
     51e:	10 82       	st	Z, r1
		oled_controll = 0x10;
     520:	80 e1       	ldi	r24, 0x10	; 16
     522:	80 83       	st	Z, r24
	
	printf("\n\n\n");
	
	unsigned short mainLoopCounter = 0;
    while(1){
		mainLoopCounter++;
     524:	ff ef       	ldi	r31, 0xFF	; 255
     526:	ef 1a       	sub	r14, r31
     528:	ff 0a       	sbc	r15, r31
		if(!(mainLoopCounter%10)){
     52a:	97 01       	movw	r18, r14
     52c:	ad ec       	ldi	r26, 0xCD	; 205
     52e:	bc ec       	ldi	r27, 0xCC	; 204
     530:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__umulhisi3>
     534:	96 95       	lsr	r25
     536:	87 95       	ror	r24
     538:	96 95       	lsr	r25
     53a:	87 95       	ror	r24
     53c:	96 95       	lsr	r25
     53e:	87 95       	ror	r24
     540:	9c 01       	movw	r18, r24
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	e8 16       	cp	r14, r24
     562:	f9 06       	cpc	r15, r25
     564:	09 f4       	brne	.+2      	; 0x568 <__stack+0x69>
     566:	5c cf       	rjmp	.-328    	; 0x420 <main+0x96>
     568:	5f cf       	rjmp	.-322    	; 0x428 <main+0x9e>

0000056a <__divsf3>:
     56a:	0c d0       	rcall	.+24     	; 0x584 <__divsf3x>
     56c:	eb c0       	rjmp	.+470    	; 0x744 <__fp_round>
     56e:	e3 d0       	rcall	.+454    	; 0x736 <__fp_pscB>
     570:	40 f0       	brcs	.+16     	; 0x582 <__divsf3+0x18>
     572:	da d0       	rcall	.+436    	; 0x728 <__fp_pscA>
     574:	30 f0       	brcs	.+12     	; 0x582 <__divsf3+0x18>
     576:	21 f4       	brne	.+8      	; 0x580 <__divsf3+0x16>
     578:	5f 3f       	cpi	r21, 0xFF	; 255
     57a:	19 f0       	breq	.+6      	; 0x582 <__divsf3+0x18>
     57c:	cc c0       	rjmp	.+408    	; 0x716 <__fp_inf>
     57e:	51 11       	cpse	r21, r1
     580:	15 c1       	rjmp	.+554    	; 0x7ac <__fp_szero>
     582:	cf c0       	rjmp	.+414    	; 0x722 <__fp_nan>

00000584 <__divsf3x>:
     584:	f0 d0       	rcall	.+480    	; 0x766 <__fp_split3>
     586:	98 f3       	brcs	.-26     	; 0x56e <__divsf3+0x4>

00000588 <__divsf3_pse>:
     588:	99 23       	and	r25, r25
     58a:	c9 f3       	breq	.-14     	; 0x57e <__divsf3+0x14>
     58c:	55 23       	and	r21, r21
     58e:	b1 f3       	breq	.-20     	; 0x57c <__divsf3+0x12>
     590:	95 1b       	sub	r25, r21
     592:	55 0b       	sbc	r21, r21
     594:	bb 27       	eor	r27, r27
     596:	aa 27       	eor	r26, r26
     598:	62 17       	cp	r22, r18
     59a:	73 07       	cpc	r23, r19
     59c:	84 07       	cpc	r24, r20
     59e:	38 f0       	brcs	.+14     	; 0x5ae <__divsf3_pse+0x26>
     5a0:	9f 5f       	subi	r25, 0xFF	; 255
     5a2:	5f 4f       	sbci	r21, 0xFF	; 255
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	44 1f       	adc	r20, r20
     5aa:	aa 1f       	adc	r26, r26
     5ac:	a9 f3       	breq	.-22     	; 0x598 <__divsf3_pse+0x10>
     5ae:	33 d0       	rcall	.+102    	; 0x616 <__divsf3_pse+0x8e>
     5b0:	0e 2e       	mov	r0, r30
     5b2:	3a f0       	brmi	.+14     	; 0x5c2 <__divsf3_pse+0x3a>
     5b4:	e0 e8       	ldi	r30, 0x80	; 128
     5b6:	30 d0       	rcall	.+96     	; 0x618 <__divsf3_pse+0x90>
     5b8:	91 50       	subi	r25, 0x01	; 1
     5ba:	50 40       	sbci	r21, 0x00	; 0
     5bc:	e6 95       	lsr	r30
     5be:	00 1c       	adc	r0, r0
     5c0:	ca f7       	brpl	.-14     	; 0x5b4 <__divsf3_pse+0x2c>
     5c2:	29 d0       	rcall	.+82     	; 0x616 <__divsf3_pse+0x8e>
     5c4:	fe 2f       	mov	r31, r30
     5c6:	27 d0       	rcall	.+78     	; 0x616 <__divsf3_pse+0x8e>
     5c8:	66 0f       	add	r22, r22
     5ca:	77 1f       	adc	r23, r23
     5cc:	88 1f       	adc	r24, r24
     5ce:	bb 1f       	adc	r27, r27
     5d0:	26 17       	cp	r18, r22
     5d2:	37 07       	cpc	r19, r23
     5d4:	48 07       	cpc	r20, r24
     5d6:	ab 07       	cpc	r26, r27
     5d8:	b0 e8       	ldi	r27, 0x80	; 128
     5da:	09 f0       	breq	.+2      	; 0x5de <__divsf3_pse+0x56>
     5dc:	bb 0b       	sbc	r27, r27
     5de:	80 2d       	mov	r24, r0
     5e0:	bf 01       	movw	r22, r30
     5e2:	ff 27       	eor	r31, r31
     5e4:	93 58       	subi	r25, 0x83	; 131
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	2a f0       	brmi	.+10     	; 0x5f4 <__divsf3_pse+0x6c>
     5ea:	9e 3f       	cpi	r25, 0xFE	; 254
     5ec:	51 05       	cpc	r21, r1
     5ee:	68 f0       	brcs	.+26     	; 0x60a <__divsf3_pse+0x82>
     5f0:	92 c0       	rjmp	.+292    	; 0x716 <__fp_inf>
     5f2:	dc c0       	rjmp	.+440    	; 0x7ac <__fp_szero>
     5f4:	5f 3f       	cpi	r21, 0xFF	; 255
     5f6:	ec f3       	brlt	.-6      	; 0x5f2 <__divsf3_pse+0x6a>
     5f8:	98 3e       	cpi	r25, 0xE8	; 232
     5fa:	dc f3       	brlt	.-10     	; 0x5f2 <__divsf3_pse+0x6a>
     5fc:	86 95       	lsr	r24
     5fe:	77 95       	ror	r23
     600:	67 95       	ror	r22
     602:	b7 95       	ror	r27
     604:	f7 95       	ror	r31
     606:	9f 5f       	subi	r25, 0xFF	; 255
     608:	c9 f7       	brne	.-14     	; 0x5fc <__divsf3_pse+0x74>
     60a:	88 0f       	add	r24, r24
     60c:	91 1d       	adc	r25, r1
     60e:	96 95       	lsr	r25
     610:	87 95       	ror	r24
     612:	97 f9       	bld	r25, 7
     614:	08 95       	ret
     616:	e1 e0       	ldi	r30, 0x01	; 1
     618:	66 0f       	add	r22, r22
     61a:	77 1f       	adc	r23, r23
     61c:	88 1f       	adc	r24, r24
     61e:	bb 1f       	adc	r27, r27
     620:	62 17       	cp	r22, r18
     622:	73 07       	cpc	r23, r19
     624:	84 07       	cpc	r24, r20
     626:	ba 07       	cpc	r27, r26
     628:	20 f0       	brcs	.+8      	; 0x632 <__divsf3_pse+0xaa>
     62a:	62 1b       	sub	r22, r18
     62c:	73 0b       	sbc	r23, r19
     62e:	84 0b       	sbc	r24, r20
     630:	ba 0b       	sbc	r27, r26
     632:	ee 1f       	adc	r30, r30
     634:	88 f7       	brcc	.-30     	; 0x618 <__divsf3_pse+0x90>
     636:	e0 95       	com	r30
     638:	08 95       	ret

0000063a <__fixsfsi>:
     63a:	04 d0       	rcall	.+8      	; 0x644 <__fixunssfsi>
     63c:	68 94       	set
     63e:	b1 11       	cpse	r27, r1
     640:	b5 c0       	rjmp	.+362    	; 0x7ac <__fp_szero>
     642:	08 95       	ret

00000644 <__fixunssfsi>:
     644:	98 d0       	rcall	.+304    	; 0x776 <__fp_splitA>
     646:	88 f0       	brcs	.+34     	; 0x66a <__fixunssfsi+0x26>
     648:	9f 57       	subi	r25, 0x7F	; 127
     64a:	90 f0       	brcs	.+36     	; 0x670 <__fixunssfsi+0x2c>
     64c:	b9 2f       	mov	r27, r25
     64e:	99 27       	eor	r25, r25
     650:	b7 51       	subi	r27, 0x17	; 23
     652:	a0 f0       	brcs	.+40     	; 0x67c <__fixunssfsi+0x38>
     654:	d1 f0       	breq	.+52     	; 0x68a <__fixunssfsi+0x46>
     656:	66 0f       	add	r22, r22
     658:	77 1f       	adc	r23, r23
     65a:	88 1f       	adc	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	1a f0       	brmi	.+6      	; 0x666 <__fixunssfsi+0x22>
     660:	ba 95       	dec	r27
     662:	c9 f7       	brne	.-14     	; 0x656 <__fixunssfsi+0x12>
     664:	12 c0       	rjmp	.+36     	; 0x68a <__fixunssfsi+0x46>
     666:	b1 30       	cpi	r27, 0x01	; 1
     668:	81 f0       	breq	.+32     	; 0x68a <__fixunssfsi+0x46>
     66a:	9f d0       	rcall	.+318    	; 0x7aa <__fp_zero>
     66c:	b1 e0       	ldi	r27, 0x01	; 1
     66e:	08 95       	ret
     670:	9c c0       	rjmp	.+312    	; 0x7aa <__fp_zero>
     672:	67 2f       	mov	r22, r23
     674:	78 2f       	mov	r23, r24
     676:	88 27       	eor	r24, r24
     678:	b8 5f       	subi	r27, 0xF8	; 248
     67a:	39 f0       	breq	.+14     	; 0x68a <__fixunssfsi+0x46>
     67c:	b9 3f       	cpi	r27, 0xF9	; 249
     67e:	cc f3       	brlt	.-14     	; 0x672 <__fixunssfsi+0x2e>
     680:	86 95       	lsr	r24
     682:	77 95       	ror	r23
     684:	67 95       	ror	r22
     686:	b3 95       	inc	r27
     688:	d9 f7       	brne	.-10     	; 0x680 <__fixunssfsi+0x3c>
     68a:	3e f4       	brtc	.+14     	; 0x69a <__fixunssfsi+0x56>
     68c:	90 95       	com	r25
     68e:	80 95       	com	r24
     690:	70 95       	com	r23
     692:	61 95       	neg	r22
     694:	7f 4f       	sbci	r23, 0xFF	; 255
     696:	8f 4f       	sbci	r24, 0xFF	; 255
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	08 95       	ret

0000069c <__floatunsisf>:
     69c:	e8 94       	clt
     69e:	09 c0       	rjmp	.+18     	; 0x6b2 <__floatsisf+0x12>

000006a0 <__floatsisf>:
     6a0:	97 fb       	bst	r25, 7
     6a2:	3e f4       	brtc	.+14     	; 0x6b2 <__floatsisf+0x12>
     6a4:	90 95       	com	r25
     6a6:	80 95       	com	r24
     6a8:	70 95       	com	r23
     6aa:	61 95       	neg	r22
     6ac:	7f 4f       	sbci	r23, 0xFF	; 255
     6ae:	8f 4f       	sbci	r24, 0xFF	; 255
     6b0:	9f 4f       	sbci	r25, 0xFF	; 255
     6b2:	99 23       	and	r25, r25
     6b4:	a9 f0       	breq	.+42     	; 0x6e0 <__floatsisf+0x40>
     6b6:	f9 2f       	mov	r31, r25
     6b8:	96 e9       	ldi	r25, 0x96	; 150
     6ba:	bb 27       	eor	r27, r27
     6bc:	93 95       	inc	r25
     6be:	f6 95       	lsr	r31
     6c0:	87 95       	ror	r24
     6c2:	77 95       	ror	r23
     6c4:	67 95       	ror	r22
     6c6:	b7 95       	ror	r27
     6c8:	f1 11       	cpse	r31, r1
     6ca:	f8 cf       	rjmp	.-16     	; 0x6bc <__floatsisf+0x1c>
     6cc:	fa f4       	brpl	.+62     	; 0x70c <__floatsisf+0x6c>
     6ce:	bb 0f       	add	r27, r27
     6d0:	11 f4       	brne	.+4      	; 0x6d6 <__floatsisf+0x36>
     6d2:	60 ff       	sbrs	r22, 0
     6d4:	1b c0       	rjmp	.+54     	; 0x70c <__floatsisf+0x6c>
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	8f 4f       	sbci	r24, 0xFF	; 255
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	16 c0       	rjmp	.+44     	; 0x70c <__floatsisf+0x6c>
     6e0:	88 23       	and	r24, r24
     6e2:	11 f0       	breq	.+4      	; 0x6e8 <__floatsisf+0x48>
     6e4:	96 e9       	ldi	r25, 0x96	; 150
     6e6:	11 c0       	rjmp	.+34     	; 0x70a <__floatsisf+0x6a>
     6e8:	77 23       	and	r23, r23
     6ea:	21 f0       	breq	.+8      	; 0x6f4 <__floatsisf+0x54>
     6ec:	9e e8       	ldi	r25, 0x8E	; 142
     6ee:	87 2f       	mov	r24, r23
     6f0:	76 2f       	mov	r23, r22
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <__floatsisf+0x5e>
     6f4:	66 23       	and	r22, r22
     6f6:	71 f0       	breq	.+28     	; 0x714 <__floatsisf+0x74>
     6f8:	96 e8       	ldi	r25, 0x86	; 134
     6fa:	86 2f       	mov	r24, r22
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	2a f0       	brmi	.+10     	; 0x70c <__floatsisf+0x6c>
     702:	9a 95       	dec	r25
     704:	66 0f       	add	r22, r22
     706:	77 1f       	adc	r23, r23
     708:	88 1f       	adc	r24, r24
     70a:	da f7       	brpl	.-10     	; 0x702 <__floatsisf+0x62>
     70c:	88 0f       	add	r24, r24
     70e:	96 95       	lsr	r25
     710:	87 95       	ror	r24
     712:	97 f9       	bld	r25, 7
     714:	08 95       	ret

00000716 <__fp_inf>:
     716:	97 f9       	bld	r25, 7
     718:	9f 67       	ori	r25, 0x7F	; 127
     71a:	80 e8       	ldi	r24, 0x80	; 128
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	08 95       	ret

00000722 <__fp_nan>:
     722:	9f ef       	ldi	r25, 0xFF	; 255
     724:	80 ec       	ldi	r24, 0xC0	; 192
     726:	08 95       	ret

00000728 <__fp_pscA>:
     728:	00 24       	eor	r0, r0
     72a:	0a 94       	dec	r0
     72c:	16 16       	cp	r1, r22
     72e:	17 06       	cpc	r1, r23
     730:	18 06       	cpc	r1, r24
     732:	09 06       	cpc	r0, r25
     734:	08 95       	ret

00000736 <__fp_pscB>:
     736:	00 24       	eor	r0, r0
     738:	0a 94       	dec	r0
     73a:	12 16       	cp	r1, r18
     73c:	13 06       	cpc	r1, r19
     73e:	14 06       	cpc	r1, r20
     740:	05 06       	cpc	r0, r21
     742:	08 95       	ret

00000744 <__fp_round>:
     744:	09 2e       	mov	r0, r25
     746:	03 94       	inc	r0
     748:	00 0c       	add	r0, r0
     74a:	11 f4       	brne	.+4      	; 0x750 <__fp_round+0xc>
     74c:	88 23       	and	r24, r24
     74e:	52 f0       	brmi	.+20     	; 0x764 <__fp_round+0x20>
     750:	bb 0f       	add	r27, r27
     752:	40 f4       	brcc	.+16     	; 0x764 <__fp_round+0x20>
     754:	bf 2b       	or	r27, r31
     756:	11 f4       	brne	.+4      	; 0x75c <__fp_round+0x18>
     758:	60 ff       	sbrs	r22, 0
     75a:	04 c0       	rjmp	.+8      	; 0x764 <__fp_round+0x20>
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	8f 4f       	sbci	r24, 0xFF	; 255
     762:	9f 4f       	sbci	r25, 0xFF	; 255
     764:	08 95       	ret

00000766 <__fp_split3>:
     766:	57 fd       	sbrc	r21, 7
     768:	90 58       	subi	r25, 0x80	; 128
     76a:	44 0f       	add	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	59 f0       	breq	.+22     	; 0x786 <__fp_splitA+0x10>
     770:	5f 3f       	cpi	r21, 0xFF	; 255
     772:	71 f0       	breq	.+28     	; 0x790 <__fp_splitA+0x1a>
     774:	47 95       	ror	r20

00000776 <__fp_splitA>:
     776:	88 0f       	add	r24, r24
     778:	97 fb       	bst	r25, 7
     77a:	99 1f       	adc	r25, r25
     77c:	61 f0       	breq	.+24     	; 0x796 <__fp_splitA+0x20>
     77e:	9f 3f       	cpi	r25, 0xFF	; 255
     780:	79 f0       	breq	.+30     	; 0x7a0 <__fp_splitA+0x2a>
     782:	87 95       	ror	r24
     784:	08 95       	ret
     786:	12 16       	cp	r1, r18
     788:	13 06       	cpc	r1, r19
     78a:	14 06       	cpc	r1, r20
     78c:	55 1f       	adc	r21, r21
     78e:	f2 cf       	rjmp	.-28     	; 0x774 <__fp_split3+0xe>
     790:	46 95       	lsr	r20
     792:	f1 df       	rcall	.-30     	; 0x776 <__fp_splitA>
     794:	08 c0       	rjmp	.+16     	; 0x7a6 <__fp_splitA+0x30>
     796:	16 16       	cp	r1, r22
     798:	17 06       	cpc	r1, r23
     79a:	18 06       	cpc	r1, r24
     79c:	99 1f       	adc	r25, r25
     79e:	f1 cf       	rjmp	.-30     	; 0x782 <__fp_splitA+0xc>
     7a0:	86 95       	lsr	r24
     7a2:	71 05       	cpc	r23, r1
     7a4:	61 05       	cpc	r22, r1
     7a6:	08 94       	sec
     7a8:	08 95       	ret

000007aa <__fp_zero>:
     7aa:	e8 94       	clt

000007ac <__fp_szero>:
     7ac:	bb 27       	eor	r27, r27
     7ae:	66 27       	eor	r22, r22
     7b0:	77 27       	eor	r23, r23
     7b2:	cb 01       	movw	r24, r22
     7b4:	97 f9       	bld	r25, 7
     7b6:	08 95       	ret

000007b8 <__divmodhi4>:
     7b8:	97 fb       	bst	r25, 7
     7ba:	07 2e       	mov	r0, r23
     7bc:	16 f4       	brtc	.+4      	; 0x7c2 <__divmodhi4+0xa>
     7be:	00 94       	com	r0
     7c0:	07 d0       	rcall	.+14     	; 0x7d0 <__divmodhi4_neg1>
     7c2:	77 fd       	sbrc	r23, 7
     7c4:	09 d0       	rcall	.+18     	; 0x7d8 <__divmodhi4_neg2>
     7c6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__udivmodhi4>
     7ca:	07 fc       	sbrc	r0, 7
     7cc:	05 d0       	rcall	.+10     	; 0x7d8 <__divmodhi4_neg2>
     7ce:	3e f4       	brtc	.+14     	; 0x7de <__divmodhi4_exit>

000007d0 <__divmodhi4_neg1>:
     7d0:	90 95       	com	r25
     7d2:	81 95       	neg	r24
     7d4:	9f 4f       	sbci	r25, 0xFF	; 255
     7d6:	08 95       	ret

000007d8 <__divmodhi4_neg2>:
     7d8:	70 95       	com	r23
     7da:	61 95       	neg	r22
     7dc:	7f 4f       	sbci	r23, 0xFF	; 255

000007de <__divmodhi4_exit>:
     7de:	08 95       	ret

000007e0 <__umulhisi3>:
     7e0:	a2 9f       	mul	r26, r18
     7e2:	b0 01       	movw	r22, r0
     7e4:	b3 9f       	mul	r27, r19
     7e6:	c0 01       	movw	r24, r0
     7e8:	a3 9f       	mul	r26, r19
     7ea:	70 0d       	add	r23, r0
     7ec:	81 1d       	adc	r24, r1
     7ee:	11 24       	eor	r1, r1
     7f0:	91 1d       	adc	r25, r1
     7f2:	b2 9f       	mul	r27, r18
     7f4:	70 0d       	add	r23, r0
     7f6:	81 1d       	adc	r24, r1
     7f8:	11 24       	eor	r1, r1
     7fa:	91 1d       	adc	r25, r1
     7fc:	08 95       	ret

000007fe <__udivmodhi4>:
     7fe:	aa 1b       	sub	r26, r26
     800:	bb 1b       	sub	r27, r27
     802:	51 e1       	ldi	r21, 0x11	; 17
     804:	07 c0       	rjmp	.+14     	; 0x814 <__udivmodhi4_ep>

00000806 <__udivmodhi4_loop>:
     806:	aa 1f       	adc	r26, r26
     808:	bb 1f       	adc	r27, r27
     80a:	a6 17       	cp	r26, r22
     80c:	b7 07       	cpc	r27, r23
     80e:	10 f0       	brcs	.+4      	; 0x814 <__udivmodhi4_ep>
     810:	a6 1b       	sub	r26, r22
     812:	b7 0b       	sbc	r27, r23

00000814 <__udivmodhi4_ep>:
     814:	88 1f       	adc	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	5a 95       	dec	r21
     81a:	a9 f7       	brne	.-22     	; 0x806 <__udivmodhi4_loop>
     81c:	80 95       	com	r24
     81e:	90 95       	com	r25
     820:	bc 01       	movw	r22, r24
     822:	cd 01       	movw	r24, r26
     824:	08 95       	ret

00000826 <do_rand>:
     826:	8f 92       	push	r8
     828:	9f 92       	push	r9
     82a:	af 92       	push	r10
     82c:	bf 92       	push	r11
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	68 81       	ld	r22, Y
     83e:	79 81       	ldd	r23, Y+1	; 0x01
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	9b 81       	ldd	r25, Y+3	; 0x03
     844:	61 15       	cp	r22, r1
     846:	71 05       	cpc	r23, r1
     848:	81 05       	cpc	r24, r1
     84a:	91 05       	cpc	r25, r1
     84c:	21 f4       	brne	.+8      	; 0x856 <do_rand+0x30>
     84e:	64 e2       	ldi	r22, 0x24	; 36
     850:	79 ed       	ldi	r23, 0xD9	; 217
     852:	8b e5       	ldi	r24, 0x5B	; 91
     854:	97 e0       	ldi	r25, 0x07	; 7
     856:	2d e1       	ldi	r18, 0x1D	; 29
     858:	33 ef       	ldi	r19, 0xF3	; 243
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	0e 94 bf 08 	call	0x117e	; 0x117e <__divmodsi4>
     862:	49 01       	movw	r8, r18
     864:	5a 01       	movw	r10, r20
     866:	9b 01       	movw	r18, r22
     868:	ac 01       	movw	r20, r24
     86a:	a7 ea       	ldi	r26, 0xA7	; 167
     86c:	b1 e4       	ldi	r27, 0x41	; 65
     86e:	0e 94 de 08 	call	0x11bc	; 0x11bc <__muluhisi3>
     872:	6b 01       	movw	r12, r22
     874:	7c 01       	movw	r14, r24
     876:	ac ee       	ldi	r26, 0xEC	; 236
     878:	b4 ef       	ldi	r27, 0xF4	; 244
     87a:	a5 01       	movw	r20, r10
     87c:	94 01       	movw	r18, r8
     87e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__mulohisi3>
     882:	c6 0e       	add	r12, r22
     884:	d7 1e       	adc	r13, r23
     886:	e8 1e       	adc	r14, r24
     888:	f9 1e       	adc	r15, r25
     88a:	f7 fe       	sbrs	r15, 7
     88c:	06 c0       	rjmp	.+12     	; 0x89a <do_rand+0x74>
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	c8 1a       	sub	r12, r24
     892:	d1 08       	sbc	r13, r1
     894:	e1 08       	sbc	r14, r1
     896:	80 e8       	ldi	r24, 0x80	; 128
     898:	f8 0a       	sbc	r15, r24
     89a:	c8 82       	st	Y, r12
     89c:	d9 82       	std	Y+1, r13	; 0x01
     89e:	ea 82       	std	Y+2, r14	; 0x02
     8a0:	fb 82       	std	Y+3, r15	; 0x03
     8a2:	c6 01       	movw	r24, r12
     8a4:	9f 77       	andi	r25, 0x7F	; 127
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	9f 90       	pop	r9
     8b8:	8f 90       	pop	r8
     8ba:	08 95       	ret

000008bc <rand_r>:
     8bc:	0e 94 13 04 	call	0x826	; 0x826 <do_rand>
     8c0:	08 95       	ret

000008c2 <rand>:
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 13 04 	call	0x826	; 0x826 <do_rand>
     8ca:	08 95       	ret

000008cc <srand>:
     8cc:	a0 e0       	ldi	r26, 0x00	; 0
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	80 93 00 01 	sts	0x0100, r24
     8d4:	90 93 01 01 	sts	0x0101, r25
     8d8:	a0 93 02 01 	sts	0x0102, r26
     8dc:	b0 93 03 01 	sts	0x0103, r27
     8e0:	08 95       	ret

000008e2 <fdevopen>:
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ec 01       	movw	r28, r24
     8ec:	8b 01       	movw	r16, r22
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	31 f4       	brne	.+12     	; 0x8fe <fdevopen+0x1c>
     8f2:	61 15       	cp	r22, r1
     8f4:	71 05       	cpc	r23, r1
     8f6:	19 f4       	brne	.+6      	; 0x8fe <fdevopen+0x1c>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	38 c0       	rjmp	.+112    	; 0x96e <fdevopen+0x8c>
     8fe:	6e e0       	ldi	r22, 0x0E	; 14
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 cf 06 	call	0xd9e	; 0xd9e <calloc>
     90a:	fc 01       	movw	r30, r24
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	a1 f3       	breq	.-24     	; 0x8f8 <fdevopen+0x16>
     910:	80 e8       	ldi	r24, 0x80	; 128
     912:	83 83       	std	Z+3, r24	; 0x03
     914:	01 15       	cp	r16, r1
     916:	11 05       	cpc	r17, r1
     918:	71 f0       	breq	.+28     	; 0x936 <fdevopen+0x54>
     91a:	13 87       	std	Z+11, r17	; 0x0b
     91c:	02 87       	std	Z+10, r16	; 0x0a
     91e:	81 e8       	ldi	r24, 0x81	; 129
     920:	83 83       	std	Z+3, r24	; 0x03
     922:	80 91 ea 01 	lds	r24, 0x01EA
     926:	90 91 eb 01 	lds	r25, 0x01EB
     92a:	89 2b       	or	r24, r25
     92c:	21 f4       	brne	.+8      	; 0x936 <fdevopen+0x54>
     92e:	f0 93 eb 01 	sts	0x01EB, r31
     932:	e0 93 ea 01 	sts	0x01EA, r30
     936:	20 97       	sbiw	r28, 0x00	; 0
     938:	c9 f0       	breq	.+50     	; 0x96c <fdevopen+0x8a>
     93a:	d1 87       	std	Z+9, r29	; 0x09
     93c:	c0 87       	std	Z+8, r28	; 0x08
     93e:	83 81       	ldd	r24, Z+3	; 0x03
     940:	82 60       	ori	r24, 0x02	; 2
     942:	83 83       	std	Z+3, r24	; 0x03
     944:	80 91 ec 01 	lds	r24, 0x01EC
     948:	90 91 ed 01 	lds	r25, 0x01ED
     94c:	89 2b       	or	r24, r25
     94e:	71 f4       	brne	.+28     	; 0x96c <fdevopen+0x8a>
     950:	f0 93 ed 01 	sts	0x01ED, r31
     954:	e0 93 ec 01 	sts	0x01EC, r30
     958:	80 91 ee 01 	lds	r24, 0x01EE
     95c:	90 91 ef 01 	lds	r25, 0x01EF
     960:	89 2b       	or	r24, r25
     962:	21 f4       	brne	.+8      	; 0x96c <fdevopen+0x8a>
     964:	f0 93 ef 01 	sts	0x01EF, r31
     968:	e0 93 ee 01 	sts	0x01EE, r30
     96c:	cf 01       	movw	r24, r30
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	08 95       	ret

00000978 <printf>:
     978:	a0 e0       	ldi	r26, 0x00	; 0
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	e2 ec       	ldi	r30, 0xC2	; 194
     97e:	f4 e0       	ldi	r31, 0x04	; 4
     980:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__prologue_saves__+0x20>
     984:	fe 01       	movw	r30, r28
     986:	35 96       	adiw	r30, 0x05	; 5
     988:	61 91       	ld	r22, Z+
     98a:	71 91       	ld	r23, Z+
     98c:	af 01       	movw	r20, r30
     98e:	80 91 ec 01 	lds	r24, 0x01EC
     992:	90 91 ed 01 	lds	r25, 0x01ED
     996:	0e 94 fd 04 	call	0x9fa	; 0x9fa <vfprintf>
     99a:	e2 e0       	ldi	r30, 0x02	; 2
     99c:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__epilogue_restores__+0x20>

000009a0 <puts>:
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	e0 91 ec 01 	lds	r30, 0x01EC
     9ac:	f0 91 ed 01 	lds	r31, 0x01ED
     9b0:	23 81       	ldd	r18, Z+3	; 0x03
     9b2:	21 ff       	sbrs	r18, 1
     9b4:	1b c0       	rjmp	.+54     	; 0x9ec <puts+0x4c>
     9b6:	ec 01       	movw	r28, r24
     9b8:	00 e0       	ldi	r16, 0x00	; 0
     9ba:	10 e0       	ldi	r17, 0x00	; 0
     9bc:	89 91       	ld	r24, Y+
     9be:	60 91 ec 01 	lds	r22, 0x01EC
     9c2:	70 91 ed 01 	lds	r23, 0x01ED
     9c6:	db 01       	movw	r26, r22
     9c8:	18 96       	adiw	r26, 0x08	; 8
     9ca:	ed 91       	ld	r30, X+
     9cc:	fc 91       	ld	r31, X
     9ce:	19 97       	sbiw	r26, 0x09	; 9
     9d0:	88 23       	and	r24, r24
     9d2:	31 f0       	breq	.+12     	; 0x9e0 <puts+0x40>
     9d4:	09 95       	icall
     9d6:	89 2b       	or	r24, r25
     9d8:	89 f3       	breq	.-30     	; 0x9bc <puts+0x1c>
     9da:	0f ef       	ldi	r16, 0xFF	; 255
     9dc:	1f ef       	ldi	r17, 0xFF	; 255
     9de:	ee cf       	rjmp	.-36     	; 0x9bc <puts+0x1c>
     9e0:	8a e0       	ldi	r24, 0x0A	; 10
     9e2:	09 95       	icall
     9e4:	89 2b       	or	r24, r25
     9e6:	11 f4       	brne	.+4      	; 0x9ec <puts+0x4c>
     9e8:	c8 01       	movw	r24, r16
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <puts+0x50>
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	9f ef       	ldi	r25, 0xFF	; 255
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <vfprintf>:
     9fa:	ac e0       	ldi	r26, 0x0C	; 12
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e3 e0       	ldi	r30, 0x03	; 3
     a00:	f5 e0       	ldi	r31, 0x05	; 5
     a02:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__prologue_saves__>
     a06:	7c 01       	movw	r14, r24
     a08:	6b 01       	movw	r12, r22
     a0a:	8a 01       	movw	r16, r20
     a0c:	fc 01       	movw	r30, r24
     a0e:	17 82       	std	Z+7, r1	; 0x07
     a10:	16 82       	std	Z+6, r1	; 0x06
     a12:	83 81       	ldd	r24, Z+3	; 0x03
     a14:	81 ff       	sbrs	r24, 1
     a16:	bd c1       	rjmp	.+890    	; 0xd92 <vfprintf+0x398>
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	4c 01       	movw	r8, r24
     a1e:	f7 01       	movw	r30, r14
     a20:	93 81       	ldd	r25, Z+3	; 0x03
     a22:	f6 01       	movw	r30, r12
     a24:	93 fd       	sbrc	r25, 3
     a26:	85 91       	lpm	r24, Z+
     a28:	93 ff       	sbrs	r25, 3
     a2a:	81 91       	ld	r24, Z+
     a2c:	6f 01       	movw	r12, r30
     a2e:	88 23       	and	r24, r24
     a30:	09 f4       	brne	.+2      	; 0xa34 <vfprintf+0x3a>
     a32:	ab c1       	rjmp	.+854    	; 0xd8a <vfprintf+0x390>
     a34:	85 32       	cpi	r24, 0x25	; 37
     a36:	39 f4       	brne	.+14     	; 0xa46 <vfprintf+0x4c>
     a38:	93 fd       	sbrc	r25, 3
     a3a:	85 91       	lpm	r24, Z+
     a3c:	93 ff       	sbrs	r25, 3
     a3e:	81 91       	ld	r24, Z+
     a40:	6f 01       	movw	r12, r30
     a42:	85 32       	cpi	r24, 0x25	; 37
     a44:	29 f4       	brne	.+10     	; 0xa50 <vfprintf+0x56>
     a46:	b7 01       	movw	r22, r14
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     a4e:	e7 cf       	rjmp	.-50     	; 0xa1e <vfprintf+0x24>
     a50:	51 2c       	mov	r5, r1
     a52:	31 2c       	mov	r3, r1
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	20 32       	cpi	r18, 0x20	; 32
     a58:	a0 f4       	brcc	.+40     	; 0xa82 <vfprintf+0x88>
     a5a:	8b 32       	cpi	r24, 0x2B	; 43
     a5c:	69 f0       	breq	.+26     	; 0xa78 <vfprintf+0x7e>
     a5e:	30 f4       	brcc	.+12     	; 0xa6c <vfprintf+0x72>
     a60:	80 32       	cpi	r24, 0x20	; 32
     a62:	59 f0       	breq	.+22     	; 0xa7a <vfprintf+0x80>
     a64:	83 32       	cpi	r24, 0x23	; 35
     a66:	69 f4       	brne	.+26     	; 0xa82 <vfprintf+0x88>
     a68:	20 61       	ori	r18, 0x10	; 16
     a6a:	2c c0       	rjmp	.+88     	; 0xac4 <vfprintf+0xca>
     a6c:	8d 32       	cpi	r24, 0x2D	; 45
     a6e:	39 f0       	breq	.+14     	; 0xa7e <vfprintf+0x84>
     a70:	80 33       	cpi	r24, 0x30	; 48
     a72:	39 f4       	brne	.+14     	; 0xa82 <vfprintf+0x88>
     a74:	21 60       	ori	r18, 0x01	; 1
     a76:	26 c0       	rjmp	.+76     	; 0xac4 <vfprintf+0xca>
     a78:	22 60       	ori	r18, 0x02	; 2
     a7a:	24 60       	ori	r18, 0x04	; 4
     a7c:	23 c0       	rjmp	.+70     	; 0xac4 <vfprintf+0xca>
     a7e:	28 60       	ori	r18, 0x08	; 8
     a80:	21 c0       	rjmp	.+66     	; 0xac4 <vfprintf+0xca>
     a82:	27 fd       	sbrc	r18, 7
     a84:	27 c0       	rjmp	.+78     	; 0xad4 <vfprintf+0xda>
     a86:	30 ed       	ldi	r19, 0xD0	; 208
     a88:	38 0f       	add	r19, r24
     a8a:	3a 30       	cpi	r19, 0x0A	; 10
     a8c:	78 f4       	brcc	.+30     	; 0xaac <vfprintf+0xb2>
     a8e:	26 ff       	sbrs	r18, 6
     a90:	06 c0       	rjmp	.+12     	; 0xa9e <vfprintf+0xa4>
     a92:	fa e0       	ldi	r31, 0x0A	; 10
     a94:	5f 9e       	mul	r5, r31
     a96:	30 0d       	add	r19, r0
     a98:	11 24       	eor	r1, r1
     a9a:	53 2e       	mov	r5, r19
     a9c:	13 c0       	rjmp	.+38     	; 0xac4 <vfprintf+0xca>
     a9e:	8a e0       	ldi	r24, 0x0A	; 10
     aa0:	38 9e       	mul	r3, r24
     aa2:	30 0d       	add	r19, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	33 2e       	mov	r3, r19
     aa8:	20 62       	ori	r18, 0x20	; 32
     aaa:	0c c0       	rjmp	.+24     	; 0xac4 <vfprintf+0xca>
     aac:	8e 32       	cpi	r24, 0x2E	; 46
     aae:	21 f4       	brne	.+8      	; 0xab8 <vfprintf+0xbe>
     ab0:	26 fd       	sbrc	r18, 6
     ab2:	6b c1       	rjmp	.+726    	; 0xd8a <vfprintf+0x390>
     ab4:	20 64       	ori	r18, 0x40	; 64
     ab6:	06 c0       	rjmp	.+12     	; 0xac4 <vfprintf+0xca>
     ab8:	8c 36       	cpi	r24, 0x6C	; 108
     aba:	11 f4       	brne	.+4      	; 0xac0 <vfprintf+0xc6>
     abc:	20 68       	ori	r18, 0x80	; 128
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <vfprintf+0xca>
     ac0:	88 36       	cpi	r24, 0x68	; 104
     ac2:	41 f4       	brne	.+16     	; 0xad4 <vfprintf+0xda>
     ac4:	f6 01       	movw	r30, r12
     ac6:	93 fd       	sbrc	r25, 3
     ac8:	85 91       	lpm	r24, Z+
     aca:	93 ff       	sbrs	r25, 3
     acc:	81 91       	ld	r24, Z+
     ace:	6f 01       	movw	r12, r30
     ad0:	81 11       	cpse	r24, r1
     ad2:	c1 cf       	rjmp	.-126    	; 0xa56 <vfprintf+0x5c>
     ad4:	98 2f       	mov	r25, r24
     ad6:	9f 7d       	andi	r25, 0xDF	; 223
     ad8:	95 54       	subi	r25, 0x45	; 69
     ada:	93 30       	cpi	r25, 0x03	; 3
     adc:	28 f4       	brcc	.+10     	; 0xae8 <vfprintf+0xee>
     ade:	0c 5f       	subi	r16, 0xFC	; 252
     ae0:	1f 4f       	sbci	r17, 0xFF	; 255
     ae2:	ff e3       	ldi	r31, 0x3F	; 63
     ae4:	f9 83       	std	Y+1, r31	; 0x01
     ae6:	0d c0       	rjmp	.+26     	; 0xb02 <vfprintf+0x108>
     ae8:	83 36       	cpi	r24, 0x63	; 99
     aea:	31 f0       	breq	.+12     	; 0xaf8 <vfprintf+0xfe>
     aec:	83 37       	cpi	r24, 0x73	; 115
     aee:	71 f0       	breq	.+28     	; 0xb0c <vfprintf+0x112>
     af0:	83 35       	cpi	r24, 0x53	; 83
     af2:	09 f0       	breq	.+2      	; 0xaf6 <vfprintf+0xfc>
     af4:	5b c0       	rjmp	.+182    	; 0xbac <vfprintf+0x1b2>
     af6:	22 c0       	rjmp	.+68     	; 0xb3c <vfprintf+0x142>
     af8:	f8 01       	movw	r30, r16
     afa:	80 81       	ld	r24, Z
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	0e 5f       	subi	r16, 0xFE	; 254
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
     b02:	44 24       	eor	r4, r4
     b04:	43 94       	inc	r4
     b06:	51 2c       	mov	r5, r1
     b08:	54 01       	movw	r10, r8
     b0a:	15 c0       	rjmp	.+42     	; 0xb36 <vfprintf+0x13c>
     b0c:	38 01       	movw	r6, r16
     b0e:	f2 e0       	ldi	r31, 0x02	; 2
     b10:	6f 0e       	add	r6, r31
     b12:	71 1c       	adc	r7, r1
     b14:	f8 01       	movw	r30, r16
     b16:	a0 80       	ld	r10, Z
     b18:	b1 80       	ldd	r11, Z+1	; 0x01
     b1a:	26 ff       	sbrs	r18, 6
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <vfprintf+0x12a>
     b1e:	65 2d       	mov	r22, r5
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <vfprintf+0x12e>
     b24:	6f ef       	ldi	r22, 0xFF	; 255
     b26:	7f ef       	ldi	r23, 0xFF	; 255
     b28:	c5 01       	movw	r24, r10
     b2a:	2c 87       	std	Y+12, r18	; 0x0c
     b2c:	0e 94 24 08 	call	0x1048	; 0x1048 <strnlen>
     b30:	2c 01       	movw	r4, r24
     b32:	83 01       	movw	r16, r6
     b34:	2c 85       	ldd	r18, Y+12	; 0x0c
     b36:	2f 77       	andi	r18, 0x7F	; 127
     b38:	22 2e       	mov	r2, r18
     b3a:	17 c0       	rjmp	.+46     	; 0xb6a <vfprintf+0x170>
     b3c:	38 01       	movw	r6, r16
     b3e:	f2 e0       	ldi	r31, 0x02	; 2
     b40:	6f 0e       	add	r6, r31
     b42:	71 1c       	adc	r7, r1
     b44:	f8 01       	movw	r30, r16
     b46:	a0 80       	ld	r10, Z
     b48:	b1 80       	ldd	r11, Z+1	; 0x01
     b4a:	26 ff       	sbrs	r18, 6
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x15a>
     b4e:	65 2d       	mov	r22, r5
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x15e>
     b54:	6f ef       	ldi	r22, 0xFF	; 255
     b56:	7f ef       	ldi	r23, 0xFF	; 255
     b58:	c5 01       	movw	r24, r10
     b5a:	2c 87       	std	Y+12, r18	; 0x0c
     b5c:	0e 94 12 08 	call	0x1024	; 0x1024 <strnlen_P>
     b60:	2c 01       	movw	r4, r24
     b62:	2c 85       	ldd	r18, Y+12	; 0x0c
     b64:	20 68       	ori	r18, 0x80	; 128
     b66:	22 2e       	mov	r2, r18
     b68:	83 01       	movw	r16, r6
     b6a:	23 fc       	sbrc	r2, 3
     b6c:	1b c0       	rjmp	.+54     	; 0xba4 <vfprintf+0x1aa>
     b6e:	83 2d       	mov	r24, r3
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	48 16       	cp	r4, r24
     b74:	59 06       	cpc	r5, r25
     b76:	b0 f4       	brcc	.+44     	; 0xba4 <vfprintf+0x1aa>
     b78:	b7 01       	movw	r22, r14
     b7a:	80 e2       	ldi	r24, 0x20	; 32
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     b82:	3a 94       	dec	r3
     b84:	f4 cf       	rjmp	.-24     	; 0xb6e <vfprintf+0x174>
     b86:	f5 01       	movw	r30, r10
     b88:	27 fc       	sbrc	r2, 7
     b8a:	85 91       	lpm	r24, Z+
     b8c:	27 fe       	sbrs	r2, 7
     b8e:	81 91       	ld	r24, Z+
     b90:	5f 01       	movw	r10, r30
     b92:	b7 01       	movw	r22, r14
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     b9a:	31 10       	cpse	r3, r1
     b9c:	3a 94       	dec	r3
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	4f 1a       	sub	r4, r31
     ba2:	51 08       	sbc	r5, r1
     ba4:	41 14       	cp	r4, r1
     ba6:	51 04       	cpc	r5, r1
     ba8:	71 f7       	brne	.-36     	; 0xb86 <vfprintf+0x18c>
     baa:	e5 c0       	rjmp	.+458    	; 0xd76 <vfprintf+0x37c>
     bac:	84 36       	cpi	r24, 0x64	; 100
     bae:	11 f0       	breq	.+4      	; 0xbb4 <vfprintf+0x1ba>
     bb0:	89 36       	cpi	r24, 0x69	; 105
     bb2:	39 f5       	brne	.+78     	; 0xc02 <vfprintf+0x208>
     bb4:	f8 01       	movw	r30, r16
     bb6:	27 ff       	sbrs	r18, 7
     bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <vfprintf+0x1ce>
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	0c 5f       	subi	r16, 0xFC	; 252
     bc4:	1f 4f       	sbci	r17, 0xFF	; 255
     bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <vfprintf+0x1de>
     bc8:	60 81       	ld	r22, Z
     bca:	71 81       	ldd	r23, Z+1	; 0x01
     bcc:	88 27       	eor	r24, r24
     bce:	77 fd       	sbrc	r23, 7
     bd0:	80 95       	com	r24
     bd2:	98 2f       	mov	r25, r24
     bd4:	0e 5f       	subi	r16, 0xFE	; 254
     bd6:	1f 4f       	sbci	r17, 0xFF	; 255
     bd8:	2f 76       	andi	r18, 0x6F	; 111
     bda:	b2 2e       	mov	r11, r18
     bdc:	97 ff       	sbrs	r25, 7
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <vfprintf+0x1f8>
     be0:	90 95       	com	r25
     be2:	80 95       	com	r24
     be4:	70 95       	com	r23
     be6:	61 95       	neg	r22
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	8f 4f       	sbci	r24, 0xFF	; 255
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	20 68       	ori	r18, 0x80	; 128
     bf0:	b2 2e       	mov	r11, r18
     bf2:	2a e0       	ldi	r18, 0x0A	; 10
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	a4 01       	movw	r20, r8
     bf8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__ultoa_invert>
     bfc:	a8 2e       	mov	r10, r24
     bfe:	a8 18       	sub	r10, r8
     c00:	44 c0       	rjmp	.+136    	; 0xc8a <vfprintf+0x290>
     c02:	85 37       	cpi	r24, 0x75	; 117
     c04:	29 f4       	brne	.+10     	; 0xc10 <vfprintf+0x216>
     c06:	2f 7e       	andi	r18, 0xEF	; 239
     c08:	b2 2e       	mov	r11, r18
     c0a:	2a e0       	ldi	r18, 0x0A	; 10
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	25 c0       	rjmp	.+74     	; 0xc5a <vfprintf+0x260>
     c10:	f2 2f       	mov	r31, r18
     c12:	f9 7f       	andi	r31, 0xF9	; 249
     c14:	bf 2e       	mov	r11, r31
     c16:	8f 36       	cpi	r24, 0x6F	; 111
     c18:	c1 f0       	breq	.+48     	; 0xc4a <vfprintf+0x250>
     c1a:	18 f4       	brcc	.+6      	; 0xc22 <vfprintf+0x228>
     c1c:	88 35       	cpi	r24, 0x58	; 88
     c1e:	79 f0       	breq	.+30     	; 0xc3e <vfprintf+0x244>
     c20:	b4 c0       	rjmp	.+360    	; 0xd8a <vfprintf+0x390>
     c22:	80 37       	cpi	r24, 0x70	; 112
     c24:	19 f0       	breq	.+6      	; 0xc2c <vfprintf+0x232>
     c26:	88 37       	cpi	r24, 0x78	; 120
     c28:	21 f0       	breq	.+8      	; 0xc32 <vfprintf+0x238>
     c2a:	af c0       	rjmp	.+350    	; 0xd8a <vfprintf+0x390>
     c2c:	2f 2f       	mov	r18, r31
     c2e:	20 61       	ori	r18, 0x10	; 16
     c30:	b2 2e       	mov	r11, r18
     c32:	b4 fe       	sbrs	r11, 4
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <vfprintf+0x256>
     c36:	8b 2d       	mov	r24, r11
     c38:	84 60       	ori	r24, 0x04	; 4
     c3a:	b8 2e       	mov	r11, r24
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <vfprintf+0x256>
     c3e:	24 ff       	sbrs	r18, 4
     c40:	0a c0       	rjmp	.+20     	; 0xc56 <vfprintf+0x25c>
     c42:	9f 2f       	mov	r25, r31
     c44:	96 60       	ori	r25, 0x06	; 6
     c46:	b9 2e       	mov	r11, r25
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0x25c>
     c4a:	28 e0       	ldi	r18, 0x08	; 8
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <vfprintf+0x260>
     c50:	20 e1       	ldi	r18, 0x10	; 16
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0x260>
     c56:	20 e1       	ldi	r18, 0x10	; 16
     c58:	32 e0       	ldi	r19, 0x02	; 2
     c5a:	f8 01       	movw	r30, r16
     c5c:	b7 fe       	sbrs	r11, 7
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <vfprintf+0x274>
     c60:	60 81       	ld	r22, Z
     c62:	71 81       	ldd	r23, Z+1	; 0x01
     c64:	82 81       	ldd	r24, Z+2	; 0x02
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	0c 5f       	subi	r16, 0xFC	; 252
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <vfprintf+0x280>
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 5f       	subi	r16, 0xFE	; 254
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	a4 01       	movw	r20, r8
     c7c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__ultoa_invert>
     c80:	a8 2e       	mov	r10, r24
     c82:	a8 18       	sub	r10, r8
     c84:	fb 2d       	mov	r31, r11
     c86:	ff 77       	andi	r31, 0x7F	; 127
     c88:	bf 2e       	mov	r11, r31
     c8a:	b6 fe       	sbrs	r11, 6
     c8c:	0b c0       	rjmp	.+22     	; 0xca4 <vfprintf+0x2aa>
     c8e:	2b 2d       	mov	r18, r11
     c90:	2e 7f       	andi	r18, 0xFE	; 254
     c92:	a5 14       	cp	r10, r5
     c94:	50 f4       	brcc	.+20     	; 0xcaa <vfprintf+0x2b0>
     c96:	b4 fe       	sbrs	r11, 4
     c98:	0a c0       	rjmp	.+20     	; 0xcae <vfprintf+0x2b4>
     c9a:	b2 fc       	sbrc	r11, 2
     c9c:	08 c0       	rjmp	.+16     	; 0xcae <vfprintf+0x2b4>
     c9e:	2b 2d       	mov	r18, r11
     ca0:	2e 7e       	andi	r18, 0xEE	; 238
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <vfprintf+0x2b4>
     ca4:	7a 2c       	mov	r7, r10
     ca6:	2b 2d       	mov	r18, r11
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <vfprintf+0x2b6>
     caa:	7a 2c       	mov	r7, r10
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <vfprintf+0x2b6>
     cae:	75 2c       	mov	r7, r5
     cb0:	24 ff       	sbrs	r18, 4
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <vfprintf+0x2d4>
     cb4:	fe 01       	movw	r30, r28
     cb6:	ea 0d       	add	r30, r10
     cb8:	f1 1d       	adc	r31, r1
     cba:	80 81       	ld	r24, Z
     cbc:	80 33       	cpi	r24, 0x30	; 48
     cbe:	11 f4       	brne	.+4      	; 0xcc4 <vfprintf+0x2ca>
     cc0:	29 7e       	andi	r18, 0xE9	; 233
     cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <vfprintf+0x2dc>
     cc4:	22 ff       	sbrs	r18, 2
     cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <vfprintf+0x2da>
     cc8:	73 94       	inc	r7
     cca:	73 94       	inc	r7
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <vfprintf+0x2dc>
     cce:	82 2f       	mov	r24, r18
     cd0:	86 78       	andi	r24, 0x86	; 134
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <vfprintf+0x2dc>
     cd4:	73 94       	inc	r7
     cd6:	23 fd       	sbrc	r18, 3
     cd8:	13 c0       	rjmp	.+38     	; 0xd00 <vfprintf+0x306>
     cda:	20 ff       	sbrs	r18, 0
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <vfprintf+0x2f0>
     cde:	5a 2c       	mov	r5, r10
     ce0:	73 14       	cp	r7, r3
     ce2:	18 f4       	brcc	.+6      	; 0xcea <vfprintf+0x2f0>
     ce4:	53 0c       	add	r5, r3
     ce6:	57 18       	sub	r5, r7
     ce8:	73 2c       	mov	r7, r3
     cea:	73 14       	cp	r7, r3
     cec:	68 f4       	brcc	.+26     	; 0xd08 <vfprintf+0x30e>
     cee:	b7 01       	movw	r22, r14
     cf0:	80 e2       	ldi	r24, 0x20	; 32
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	2c 87       	std	Y+12, r18	; 0x0c
     cf6:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     cfa:	73 94       	inc	r7
     cfc:	2c 85       	ldd	r18, Y+12	; 0x0c
     cfe:	f5 cf       	rjmp	.-22     	; 0xcea <vfprintf+0x2f0>
     d00:	73 14       	cp	r7, r3
     d02:	10 f4       	brcc	.+4      	; 0xd08 <vfprintf+0x30e>
     d04:	37 18       	sub	r3, r7
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <vfprintf+0x310>
     d08:	31 2c       	mov	r3, r1
     d0a:	24 ff       	sbrs	r18, 4
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <vfprintf+0x338>
     d0e:	b7 01       	movw	r22, r14
     d10:	80 e3       	ldi	r24, 0x30	; 48
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	2c 87       	std	Y+12, r18	; 0x0c
     d16:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     d1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d1c:	22 ff       	sbrs	r18, 2
     d1e:	17 c0       	rjmp	.+46     	; 0xd4e <vfprintf+0x354>
     d20:	21 ff       	sbrs	r18, 1
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <vfprintf+0x330>
     d24:	88 e5       	ldi	r24, 0x58	; 88
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <vfprintf+0x334>
     d2a:	88 e7       	ldi	r24, 0x78	; 120
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	b7 01       	movw	r22, r14
     d30:	0c c0       	rjmp	.+24     	; 0xd4a <vfprintf+0x350>
     d32:	82 2f       	mov	r24, r18
     d34:	86 78       	andi	r24, 0x86	; 134
     d36:	59 f0       	breq	.+22     	; 0xd4e <vfprintf+0x354>
     d38:	21 fd       	sbrc	r18, 1
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <vfprintf+0x346>
     d3c:	80 e2       	ldi	r24, 0x20	; 32
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <vfprintf+0x348>
     d40:	8b e2       	ldi	r24, 0x2B	; 43
     d42:	27 fd       	sbrc	r18, 7
     d44:	8d e2       	ldi	r24, 0x2D	; 45
     d46:	b7 01       	movw	r22, r14
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     d4e:	a5 14       	cp	r10, r5
     d50:	38 f4       	brcc	.+14     	; 0xd60 <vfprintf+0x366>
     d52:	b7 01       	movw	r22, r14
     d54:	80 e3       	ldi	r24, 0x30	; 48
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     d5c:	5a 94       	dec	r5
     d5e:	f7 cf       	rjmp	.-18     	; 0xd4e <vfprintf+0x354>
     d60:	aa 94       	dec	r10
     d62:	f4 01       	movw	r30, r8
     d64:	ea 0d       	add	r30, r10
     d66:	f1 1d       	adc	r31, r1
     d68:	80 81       	ld	r24, Z
     d6a:	b7 01       	movw	r22, r14
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     d72:	a1 10       	cpse	r10, r1
     d74:	f5 cf       	rjmp	.-22     	; 0xd60 <vfprintf+0x366>
     d76:	33 20       	and	r3, r3
     d78:	09 f4       	brne	.+2      	; 0xd7c <vfprintf+0x382>
     d7a:	51 ce       	rjmp	.-862    	; 0xa1e <vfprintf+0x24>
     d7c:	b7 01       	movw	r22, r14
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     d86:	3a 94       	dec	r3
     d88:	f6 cf       	rjmp	.-20     	; 0xd76 <vfprintf+0x37c>
     d8a:	f7 01       	movw	r30, r14
     d8c:	86 81       	ldd	r24, Z+6	; 0x06
     d8e:	97 81       	ldd	r25, Z+7	; 0x07
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x39c>
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	2c 96       	adiw	r28, 0x0c	; 12
     d98:	e2 e1       	ldi	r30, 0x12	; 18
     d9a:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__epilogue_restores__>

00000d9e <calloc>:
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	86 9f       	mul	r24, r22
     da8:	80 01       	movw	r16, r0
     daa:	87 9f       	mul	r24, r23
     dac:	10 0d       	add	r17, r0
     dae:	96 9f       	mul	r25, r22
     db0:	10 0d       	add	r17, r0
     db2:	11 24       	eor	r1, r1
     db4:	c8 01       	movw	r24, r16
     db6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <malloc>
     dba:	ec 01       	movw	r28, r24
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	29 f0       	breq	.+10     	; 0xdca <calloc+0x2c>
     dc0:	a8 01       	movw	r20, r16
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	0e 94 1d 08 	call	0x103a	; 0x103a <memset>
     dca:	ce 01       	movw	r24, r28
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	08 95       	ret

00000dd6 <malloc>:
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	91 05       	cpc	r25, r1
     dde:	10 f4       	brcc	.+4      	; 0xde4 <malloc+0xe>
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	e0 91 f2 01 	lds	r30, 0x01F2
     de8:	f0 91 f3 01 	lds	r31, 0x01F3
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	30 97       	sbiw	r30, 0x00	; 0
     df6:	39 f1       	breq	.+78     	; 0xe46 <malloc+0x70>
     df8:	40 81       	ld	r20, Z
     dfa:	51 81       	ldd	r21, Z+1	; 0x01
     dfc:	48 17       	cp	r20, r24
     dfe:	59 07       	cpc	r21, r25
     e00:	b8 f0       	brcs	.+46     	; 0xe30 <malloc+0x5a>
     e02:	48 17       	cp	r20, r24
     e04:	59 07       	cpc	r21, r25
     e06:	71 f4       	brne	.+28     	; 0xe24 <malloc+0x4e>
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	10 97       	sbiw	r26, 0x00	; 0
     e0e:	29 f0       	breq	.+10     	; 0xe1a <malloc+0x44>
     e10:	13 96       	adiw	r26, 0x03	; 3
     e12:	9c 93       	st	X, r25
     e14:	8e 93       	st	-X, r24
     e16:	12 97       	sbiw	r26, 0x02	; 2
     e18:	2c c0       	rjmp	.+88     	; 0xe72 <malloc+0x9c>
     e1a:	90 93 f3 01 	sts	0x01F3, r25
     e1e:	80 93 f2 01 	sts	0x01F2, r24
     e22:	27 c0       	rjmp	.+78     	; 0xe72 <malloc+0x9c>
     e24:	21 15       	cp	r18, r1
     e26:	31 05       	cpc	r19, r1
     e28:	31 f0       	breq	.+12     	; 0xe36 <malloc+0x60>
     e2a:	42 17       	cp	r20, r18
     e2c:	53 07       	cpc	r21, r19
     e2e:	18 f0       	brcs	.+6      	; 0xe36 <malloc+0x60>
     e30:	a9 01       	movw	r20, r18
     e32:	db 01       	movw	r26, r22
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <malloc+0x62>
     e36:	ef 01       	movw	r28, r30
     e38:	9a 01       	movw	r18, r20
     e3a:	bd 01       	movw	r22, r26
     e3c:	df 01       	movw	r26, r30
     e3e:	02 80       	ldd	r0, Z+2	; 0x02
     e40:	f3 81       	ldd	r31, Z+3	; 0x03
     e42:	e0 2d       	mov	r30, r0
     e44:	d7 cf       	rjmp	.-82     	; 0xdf4 <malloc+0x1e>
     e46:	21 15       	cp	r18, r1
     e48:	31 05       	cpc	r19, r1
     e4a:	f9 f0       	breq	.+62     	; 0xe8a <malloc+0xb4>
     e4c:	28 1b       	sub	r18, r24
     e4e:	39 0b       	sbc	r19, r25
     e50:	24 30       	cpi	r18, 0x04	; 4
     e52:	31 05       	cpc	r19, r1
     e54:	80 f4       	brcc	.+32     	; 0xe76 <malloc+0xa0>
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	61 15       	cp	r22, r1
     e5c:	71 05       	cpc	r23, r1
     e5e:	21 f0       	breq	.+8      	; 0xe68 <malloc+0x92>
     e60:	fb 01       	movw	r30, r22
     e62:	93 83       	std	Z+3, r25	; 0x03
     e64:	82 83       	std	Z+2, r24	; 0x02
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <malloc+0x9a>
     e68:	90 93 f3 01 	sts	0x01F3, r25
     e6c:	80 93 f2 01 	sts	0x01F2, r24
     e70:	fe 01       	movw	r30, r28
     e72:	32 96       	adiw	r30, 0x02	; 2
     e74:	44 c0       	rjmp	.+136    	; 0xefe <malloc+0x128>
     e76:	fe 01       	movw	r30, r28
     e78:	e2 0f       	add	r30, r18
     e7a:	f3 1f       	adc	r31, r19
     e7c:	81 93       	st	Z+, r24
     e7e:	91 93       	st	Z+, r25
     e80:	22 50       	subi	r18, 0x02	; 2
     e82:	31 09       	sbc	r19, r1
     e84:	39 83       	std	Y+1, r19	; 0x01
     e86:	28 83       	st	Y, r18
     e88:	3a c0       	rjmp	.+116    	; 0xefe <malloc+0x128>
     e8a:	20 91 f0 01 	lds	r18, 0x01F0
     e8e:	30 91 f1 01 	lds	r19, 0x01F1
     e92:	23 2b       	or	r18, r19
     e94:	41 f4       	brne	.+16     	; 0xea6 <malloc+0xd0>
     e96:	20 91 06 01 	lds	r18, 0x0106
     e9a:	30 91 07 01 	lds	r19, 0x0107
     e9e:	30 93 f1 01 	sts	0x01F1, r19
     ea2:	20 93 f0 01 	sts	0x01F0, r18
     ea6:	20 91 04 01 	lds	r18, 0x0104
     eaa:	30 91 05 01 	lds	r19, 0x0105
     eae:	21 15       	cp	r18, r1
     eb0:	31 05       	cpc	r19, r1
     eb2:	41 f4       	brne	.+16     	; 0xec4 <malloc+0xee>
     eb4:	2d b7       	in	r18, 0x3d	; 61
     eb6:	3e b7       	in	r19, 0x3e	; 62
     eb8:	40 91 08 01 	lds	r20, 0x0108
     ebc:	50 91 09 01 	lds	r21, 0x0109
     ec0:	24 1b       	sub	r18, r20
     ec2:	35 0b       	sbc	r19, r21
     ec4:	e0 91 f0 01 	lds	r30, 0x01F0
     ec8:	f0 91 f1 01 	lds	r31, 0x01F1
     ecc:	e2 17       	cp	r30, r18
     ece:	f3 07       	cpc	r31, r19
     ed0:	a0 f4       	brcc	.+40     	; 0xefa <malloc+0x124>
     ed2:	2e 1b       	sub	r18, r30
     ed4:	3f 0b       	sbc	r19, r31
     ed6:	28 17       	cp	r18, r24
     ed8:	39 07       	cpc	r19, r25
     eda:	78 f0       	brcs	.+30     	; 0xefa <malloc+0x124>
     edc:	ac 01       	movw	r20, r24
     ede:	4e 5f       	subi	r20, 0xFE	; 254
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	24 17       	cp	r18, r20
     ee4:	35 07       	cpc	r19, r21
     ee6:	48 f0       	brcs	.+18     	; 0xefa <malloc+0x124>
     ee8:	4e 0f       	add	r20, r30
     eea:	5f 1f       	adc	r21, r31
     eec:	50 93 f1 01 	sts	0x01F1, r21
     ef0:	40 93 f0 01 	sts	0x01F0, r20
     ef4:	81 93       	st	Z+, r24
     ef6:	91 93       	st	Z+, r25
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <malloc+0x128>
     efa:	e0 e0       	ldi	r30, 0x00	; 0
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	cf 01       	movw	r24, r30
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <free>:
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	09 f4       	brne	.+2      	; 0xf10 <free+0xa>
     f0e:	87 c0       	rjmp	.+270    	; 0x101e <free+0x118>
     f10:	fc 01       	movw	r30, r24
     f12:	32 97       	sbiw	r30, 0x02	; 2
     f14:	13 82       	std	Z+3, r1	; 0x03
     f16:	12 82       	std	Z+2, r1	; 0x02
     f18:	c0 91 f2 01 	lds	r28, 0x01F2
     f1c:	d0 91 f3 01 	lds	r29, 0x01F3
     f20:	20 97       	sbiw	r28, 0x00	; 0
     f22:	81 f4       	brne	.+32     	; 0xf44 <free+0x3e>
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	28 0f       	add	r18, r24
     f2a:	39 1f       	adc	r19, r25
     f2c:	80 91 f0 01 	lds	r24, 0x01F0
     f30:	90 91 f1 01 	lds	r25, 0x01F1
     f34:	82 17       	cp	r24, r18
     f36:	93 07       	cpc	r25, r19
     f38:	79 f5       	brne	.+94     	; 0xf98 <free+0x92>
     f3a:	f0 93 f1 01 	sts	0x01F1, r31
     f3e:	e0 93 f0 01 	sts	0x01F0, r30
     f42:	6d c0       	rjmp	.+218    	; 0x101e <free+0x118>
     f44:	de 01       	movw	r26, r28
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	ae 17       	cp	r26, r30
     f4c:	bf 07       	cpc	r27, r31
     f4e:	50 f4       	brcc	.+20     	; 0xf64 <free+0x5e>
     f50:	12 96       	adiw	r26, 0x02	; 2
     f52:	4d 91       	ld	r20, X+
     f54:	5c 91       	ld	r21, X
     f56:	13 97       	sbiw	r26, 0x03	; 3
     f58:	9d 01       	movw	r18, r26
     f5a:	41 15       	cp	r20, r1
     f5c:	51 05       	cpc	r21, r1
     f5e:	09 f1       	breq	.+66     	; 0xfa2 <free+0x9c>
     f60:	da 01       	movw	r26, r20
     f62:	f3 cf       	rjmp	.-26     	; 0xf4a <free+0x44>
     f64:	b3 83       	std	Z+3, r27	; 0x03
     f66:	a2 83       	std	Z+2, r26	; 0x02
     f68:	40 81       	ld	r20, Z
     f6a:	51 81       	ldd	r21, Z+1	; 0x01
     f6c:	84 0f       	add	r24, r20
     f6e:	95 1f       	adc	r25, r21
     f70:	8a 17       	cp	r24, r26
     f72:	9b 07       	cpc	r25, r27
     f74:	71 f4       	brne	.+28     	; 0xf92 <free+0x8c>
     f76:	8d 91       	ld	r24, X+
     f78:	9c 91       	ld	r25, X
     f7a:	11 97       	sbiw	r26, 0x01	; 1
     f7c:	84 0f       	add	r24, r20
     f7e:	95 1f       	adc	r25, r21
     f80:	02 96       	adiw	r24, 0x02	; 2
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
     f86:	12 96       	adiw	r26, 0x02	; 2
     f88:	8d 91       	ld	r24, X+
     f8a:	9c 91       	ld	r25, X
     f8c:	13 97       	sbiw	r26, 0x03	; 3
     f8e:	93 83       	std	Z+3, r25	; 0x03
     f90:	82 83       	std	Z+2, r24	; 0x02
     f92:	21 15       	cp	r18, r1
     f94:	31 05       	cpc	r19, r1
     f96:	29 f4       	brne	.+10     	; 0xfa2 <free+0x9c>
     f98:	f0 93 f3 01 	sts	0x01F3, r31
     f9c:	e0 93 f2 01 	sts	0x01F2, r30
     fa0:	3e c0       	rjmp	.+124    	; 0x101e <free+0x118>
     fa2:	d9 01       	movw	r26, r18
     fa4:	13 96       	adiw	r26, 0x03	; 3
     fa6:	fc 93       	st	X, r31
     fa8:	ee 93       	st	-X, r30
     faa:	12 97       	sbiw	r26, 0x02	; 2
     fac:	4d 91       	ld	r20, X+
     fae:	5d 91       	ld	r21, X+
     fb0:	a4 0f       	add	r26, r20
     fb2:	b5 1f       	adc	r27, r21
     fb4:	ea 17       	cp	r30, r26
     fb6:	fb 07       	cpc	r31, r27
     fb8:	79 f4       	brne	.+30     	; 0xfd8 <free+0xd2>
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	84 0f       	add	r24, r20
     fc0:	95 1f       	adc	r25, r21
     fc2:	02 96       	adiw	r24, 0x02	; 2
     fc4:	d9 01       	movw	r26, r18
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	9c 93       	st	X, r25
     fca:	8e 93       	st	-X, r24
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	13 96       	adiw	r26, 0x03	; 3
     fd2:	9c 93       	st	X, r25
     fd4:	8e 93       	st	-X, r24
     fd6:	12 97       	sbiw	r26, 0x02	; 2
     fd8:	e0 e0       	ldi	r30, 0x00	; 0
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	19 f0       	breq	.+6      	; 0xfea <free+0xe4>
     fe4:	fe 01       	movw	r30, r28
     fe6:	ec 01       	movw	r28, r24
     fe8:	f9 cf       	rjmp	.-14     	; 0xfdc <free+0xd6>
     fea:	ce 01       	movw	r24, r28
     fec:	02 96       	adiw	r24, 0x02	; 2
     fee:	28 81       	ld	r18, Y
     ff0:	39 81       	ldd	r19, Y+1	; 0x01
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	20 91 f0 01 	lds	r18, 0x01F0
     ffa:	30 91 f1 01 	lds	r19, 0x01F1
     ffe:	28 17       	cp	r18, r24
    1000:	39 07       	cpc	r19, r25
    1002:	69 f4       	brne	.+26     	; 0x101e <free+0x118>
    1004:	30 97       	sbiw	r30, 0x00	; 0
    1006:	29 f4       	brne	.+10     	; 0x1012 <free+0x10c>
    1008:	10 92 f3 01 	sts	0x01F3, r1
    100c:	10 92 f2 01 	sts	0x01F2, r1
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <free+0x110>
    1012:	13 82       	std	Z+3, r1	; 0x03
    1014:	12 82       	std	Z+2, r1	; 0x02
    1016:	d0 93 f1 01 	sts	0x01F1, r29
    101a:	c0 93 f0 01 	sts	0x01F0, r28
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <strnlen_P>:
    1024:	fc 01       	movw	r30, r24
    1026:	05 90       	lpm	r0, Z+
    1028:	61 50       	subi	r22, 0x01	; 1
    102a:	70 40       	sbci	r23, 0x00	; 0
    102c:	01 10       	cpse	r0, r1
    102e:	d8 f7       	brcc	.-10     	; 0x1026 <strnlen_P+0x2>
    1030:	80 95       	com	r24
    1032:	90 95       	com	r25
    1034:	8e 0f       	add	r24, r30
    1036:	9f 1f       	adc	r25, r31
    1038:	08 95       	ret

0000103a <memset>:
    103a:	dc 01       	movw	r26, r24
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <memset+0x6>
    103e:	6d 93       	st	X+, r22
    1040:	41 50       	subi	r20, 0x01	; 1
    1042:	50 40       	sbci	r21, 0x00	; 0
    1044:	e0 f7       	brcc	.-8      	; 0x103e <memset+0x4>
    1046:	08 95       	ret

00001048 <strnlen>:
    1048:	fc 01       	movw	r30, r24
    104a:	61 50       	subi	r22, 0x01	; 1
    104c:	70 40       	sbci	r23, 0x00	; 0
    104e:	01 90       	ld	r0, Z+
    1050:	01 10       	cpse	r0, r1
    1052:	d8 f7       	brcc	.-10     	; 0x104a <strnlen+0x2>
    1054:	80 95       	com	r24
    1056:	90 95       	com	r25
    1058:	8e 0f       	add	r24, r30
    105a:	9f 1f       	adc	r25, r31
    105c:	08 95       	ret

0000105e <fputc>:
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	18 2f       	mov	r17, r24
    1068:	09 2f       	mov	r16, r25
    106a:	eb 01       	movw	r28, r22
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 fd       	sbrc	r24, 1
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <fputc+0x1a>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	9f ef       	ldi	r25, 0xFF	; 255
    1076:	20 c0       	rjmp	.+64     	; 0x10b8 <fputc+0x5a>
    1078:	82 ff       	sbrs	r24, 2
    107a:	10 c0       	rjmp	.+32     	; 0x109c <fputc+0x3e>
    107c:	4e 81       	ldd	r20, Y+6	; 0x06
    107e:	5f 81       	ldd	r21, Y+7	; 0x07
    1080:	2c 81       	ldd	r18, Y+4	; 0x04
    1082:	3d 81       	ldd	r19, Y+5	; 0x05
    1084:	42 17       	cp	r20, r18
    1086:	53 07       	cpc	r21, r19
    1088:	7c f4       	brge	.+30     	; 0x10a8 <fputc+0x4a>
    108a:	e8 81       	ld	r30, Y
    108c:	f9 81       	ldd	r31, Y+1	; 0x01
    108e:	9f 01       	movw	r18, r30
    1090:	2f 5f       	subi	r18, 0xFF	; 255
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	39 83       	std	Y+1, r19	; 0x01
    1096:	28 83       	st	Y, r18
    1098:	10 83       	st	Z, r17
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <fputc+0x4a>
    109c:	e8 85       	ldd	r30, Y+8	; 0x08
    109e:	f9 85       	ldd	r31, Y+9	; 0x09
    10a0:	81 2f       	mov	r24, r17
    10a2:	09 95       	icall
    10a4:	89 2b       	or	r24, r25
    10a6:	29 f7       	brne	.-54     	; 0x1072 <fputc+0x14>
    10a8:	2e 81       	ldd	r18, Y+6	; 0x06
    10aa:	3f 81       	ldd	r19, Y+7	; 0x07
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	3f 83       	std	Y+7, r19	; 0x07
    10b2:	2e 83       	std	Y+6, r18	; 0x06
    10b4:	81 2f       	mov	r24, r17
    10b6:	90 2f       	mov	r25, r16
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	08 95       	ret

000010c2 <__ultoa_invert>:
    10c2:	fa 01       	movw	r30, r20
    10c4:	aa 27       	eor	r26, r26
    10c6:	28 30       	cpi	r18, 0x08	; 8
    10c8:	51 f1       	breq	.+84     	; 0x111e <__ultoa_invert+0x5c>
    10ca:	20 31       	cpi	r18, 0x10	; 16
    10cc:	81 f1       	breq	.+96     	; 0x112e <__ultoa_invert+0x6c>
    10ce:	e8 94       	clt
    10d0:	6f 93       	push	r22
    10d2:	6e 7f       	andi	r22, 0xFE	; 254
    10d4:	6e 5f       	subi	r22, 0xFE	; 254
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	8f 4f       	sbci	r24, 0xFF	; 255
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	af 4f       	sbci	r26, 0xFF	; 255
    10de:	b1 e0       	ldi	r27, 0x01	; 1
    10e0:	3e d0       	rcall	.+124    	; 0x115e <__ultoa_invert+0x9c>
    10e2:	b4 e0       	ldi	r27, 0x04	; 4
    10e4:	3c d0       	rcall	.+120    	; 0x115e <__ultoa_invert+0x9c>
    10e6:	67 0f       	add	r22, r23
    10e8:	78 1f       	adc	r23, r24
    10ea:	89 1f       	adc	r24, r25
    10ec:	9a 1f       	adc	r25, r26
    10ee:	a1 1d       	adc	r26, r1
    10f0:	68 0f       	add	r22, r24
    10f2:	79 1f       	adc	r23, r25
    10f4:	8a 1f       	adc	r24, r26
    10f6:	91 1d       	adc	r25, r1
    10f8:	a1 1d       	adc	r26, r1
    10fa:	6a 0f       	add	r22, r26
    10fc:	71 1d       	adc	r23, r1
    10fe:	81 1d       	adc	r24, r1
    1100:	91 1d       	adc	r25, r1
    1102:	a1 1d       	adc	r26, r1
    1104:	20 d0       	rcall	.+64     	; 0x1146 <__ultoa_invert+0x84>
    1106:	09 f4       	brne	.+2      	; 0x110a <__ultoa_invert+0x48>
    1108:	68 94       	set
    110a:	3f 91       	pop	r19
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	26 9f       	mul	r18, r22
    1110:	11 24       	eor	r1, r1
    1112:	30 19       	sub	r19, r0
    1114:	30 5d       	subi	r19, 0xD0	; 208
    1116:	31 93       	st	Z+, r19
    1118:	de f6       	brtc	.-74     	; 0x10d0 <__ultoa_invert+0xe>
    111a:	cf 01       	movw	r24, r30
    111c:	08 95       	ret
    111e:	46 2f       	mov	r20, r22
    1120:	47 70       	andi	r20, 0x07	; 7
    1122:	40 5d       	subi	r20, 0xD0	; 208
    1124:	41 93       	st	Z+, r20
    1126:	b3 e0       	ldi	r27, 0x03	; 3
    1128:	0f d0       	rcall	.+30     	; 0x1148 <__ultoa_invert+0x86>
    112a:	c9 f7       	brne	.-14     	; 0x111e <__ultoa_invert+0x5c>
    112c:	f6 cf       	rjmp	.-20     	; 0x111a <__ultoa_invert+0x58>
    112e:	46 2f       	mov	r20, r22
    1130:	4f 70       	andi	r20, 0x0F	; 15
    1132:	40 5d       	subi	r20, 0xD0	; 208
    1134:	4a 33       	cpi	r20, 0x3A	; 58
    1136:	18 f0       	brcs	.+6      	; 0x113e <__ultoa_invert+0x7c>
    1138:	49 5d       	subi	r20, 0xD9	; 217
    113a:	31 fd       	sbrc	r19, 1
    113c:	40 52       	subi	r20, 0x20	; 32
    113e:	41 93       	st	Z+, r20
    1140:	02 d0       	rcall	.+4      	; 0x1146 <__ultoa_invert+0x84>
    1142:	a9 f7       	brne	.-22     	; 0x112e <__ultoa_invert+0x6c>
    1144:	ea cf       	rjmp	.-44     	; 0x111a <__ultoa_invert+0x58>
    1146:	b4 e0       	ldi	r27, 0x04	; 4
    1148:	a6 95       	lsr	r26
    114a:	97 95       	ror	r25
    114c:	87 95       	ror	r24
    114e:	77 95       	ror	r23
    1150:	67 95       	ror	r22
    1152:	ba 95       	dec	r27
    1154:	c9 f7       	brne	.-14     	; 0x1148 <__ultoa_invert+0x86>
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	61 05       	cpc	r22, r1
    115a:	71 05       	cpc	r23, r1
    115c:	08 95       	ret
    115e:	9b 01       	movw	r18, r22
    1160:	ac 01       	movw	r20, r24
    1162:	0a 2e       	mov	r0, r26
    1164:	06 94       	lsr	r0
    1166:	57 95       	ror	r21
    1168:	47 95       	ror	r20
    116a:	37 95       	ror	r19
    116c:	27 95       	ror	r18
    116e:	ba 95       	dec	r27
    1170:	c9 f7       	brne	.-14     	; 0x1164 <__ultoa_invert+0xa2>
    1172:	62 0f       	add	r22, r18
    1174:	73 1f       	adc	r23, r19
    1176:	84 1f       	adc	r24, r20
    1178:	95 1f       	adc	r25, r21
    117a:	a0 1d       	adc	r26, r0
    117c:	08 95       	ret

0000117e <__divmodsi4>:
    117e:	05 2e       	mov	r0, r21
    1180:	97 fb       	bst	r25, 7
    1182:	1e f4       	brtc	.+6      	; 0x118a <__divmodsi4+0xc>
    1184:	00 94       	com	r0
    1186:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__negsi2>
    118a:	57 fd       	sbrc	r21, 7
    118c:	07 d0       	rcall	.+14     	; 0x119c <__divmodsi4_neg2>
    118e:	0e 94 28 09 	call	0x1250	; 0x1250 <__udivmodsi4>
    1192:	07 fc       	sbrc	r0, 7
    1194:	03 d0       	rcall	.+6      	; 0x119c <__divmodsi4_neg2>
    1196:	4e f4       	brtc	.+18     	; 0x11aa <__divmodsi4_exit>
    1198:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__negsi2>

0000119c <__divmodsi4_neg2>:
    119c:	50 95       	com	r21
    119e:	40 95       	com	r20
    11a0:	30 95       	com	r19
    11a2:	21 95       	neg	r18
    11a4:	3f 4f       	sbci	r19, 0xFF	; 255
    11a6:	4f 4f       	sbci	r20, 0xFF	; 255
    11a8:	5f 4f       	sbci	r21, 0xFF	; 255

000011aa <__divmodsi4_exit>:
    11aa:	08 95       	ret

000011ac <__negsi2>:
    11ac:	90 95       	com	r25
    11ae:	80 95       	com	r24
    11b0:	70 95       	com	r23
    11b2:	61 95       	neg	r22
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	8f 4f       	sbci	r24, 0xFF	; 255
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	08 95       	ret

000011bc <__muluhisi3>:
    11bc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__umulhisi3>
    11c0:	a5 9f       	mul	r26, r21
    11c2:	90 0d       	add	r25, r0
    11c4:	b4 9f       	mul	r27, r20
    11c6:	90 0d       	add	r25, r0
    11c8:	a4 9f       	mul	r26, r20
    11ca:	80 0d       	add	r24, r0
    11cc:	91 1d       	adc	r25, r1
    11ce:	11 24       	eor	r1, r1
    11d0:	08 95       	ret

000011d2 <__mulshisi3>:
    11d2:	b7 ff       	sbrs	r27, 7
    11d4:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__muluhisi3>

000011d8 <__mulohisi3>:
    11d8:	0e 94 de 08 	call	0x11bc	; 0x11bc <__muluhisi3>
    11dc:	82 1b       	sub	r24, r18
    11de:	93 0b       	sbc	r25, r19
    11e0:	08 95       	ret

000011e2 <__prologue_saves__>:
    11e2:	2f 92       	push	r2
    11e4:	3f 92       	push	r3
    11e6:	4f 92       	push	r4
    11e8:	5f 92       	push	r5
    11ea:	6f 92       	push	r6
    11ec:	7f 92       	push	r7
    11ee:	8f 92       	push	r8
    11f0:	9f 92       	push	r9
    11f2:	af 92       	push	r10
    11f4:	bf 92       	push	r11
    11f6:	cf 92       	push	r12
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	ca 1b       	sub	r28, r26
    120c:	db 0b       	sbc	r29, r27
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	09 94       	ijmp

0000121a <__epilogue_restores__>:
    121a:	2a 88       	ldd	r2, Y+18	; 0x12
    121c:	39 88       	ldd	r3, Y+17	; 0x11
    121e:	48 88       	ldd	r4, Y+16	; 0x10
    1220:	5f 84       	ldd	r5, Y+15	; 0x0f
    1222:	6e 84       	ldd	r6, Y+14	; 0x0e
    1224:	7d 84       	ldd	r7, Y+13	; 0x0d
    1226:	8c 84       	ldd	r8, Y+12	; 0x0c
    1228:	9b 84       	ldd	r9, Y+11	; 0x0b
    122a:	aa 84       	ldd	r10, Y+10	; 0x0a
    122c:	b9 84       	ldd	r11, Y+9	; 0x09
    122e:	c8 84       	ldd	r12, Y+8	; 0x08
    1230:	df 80       	ldd	r13, Y+7	; 0x07
    1232:	ee 80       	ldd	r14, Y+6	; 0x06
    1234:	fd 80       	ldd	r15, Y+5	; 0x05
    1236:	0c 81       	ldd	r16, Y+4	; 0x04
    1238:	1b 81       	ldd	r17, Y+3	; 0x03
    123a:	aa 81       	ldd	r26, Y+2	; 0x02
    123c:	b9 81       	ldd	r27, Y+1	; 0x01
    123e:	ce 0f       	add	r28, r30
    1240:	d1 1d       	adc	r29, r1
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	ed 01       	movw	r28, r26
    124e:	08 95       	ret

00001250 <__udivmodsi4>:
    1250:	a1 e2       	ldi	r26, 0x21	; 33
    1252:	1a 2e       	mov	r1, r26
    1254:	aa 1b       	sub	r26, r26
    1256:	bb 1b       	sub	r27, r27
    1258:	fd 01       	movw	r30, r26
    125a:	0d c0       	rjmp	.+26     	; 0x1276 <__udivmodsi4_ep>

0000125c <__udivmodsi4_loop>:
    125c:	aa 1f       	adc	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	ee 1f       	adc	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	a2 17       	cp	r26, r18
    1266:	b3 07       	cpc	r27, r19
    1268:	e4 07       	cpc	r30, r20
    126a:	f5 07       	cpc	r31, r21
    126c:	20 f0       	brcs	.+8      	; 0x1276 <__udivmodsi4_ep>
    126e:	a2 1b       	sub	r26, r18
    1270:	b3 0b       	sbc	r27, r19
    1272:	e4 0b       	sbc	r30, r20
    1274:	f5 0b       	sbc	r31, r21

00001276 <__udivmodsi4_ep>:
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	1a 94       	dec	r1
    1280:	69 f7       	brne	.-38     	; 0x125c <__udivmodsi4_loop>
    1282:	60 95       	com	r22
    1284:	70 95       	com	r23
    1286:	80 95       	com	r24
    1288:	90 95       	com	r25
    128a:	9b 01       	movw	r18, r22
    128c:	ac 01       	movw	r20, r24
    128e:	bd 01       	movw	r22, r26
    1290:	cf 01       	movw	r24, r30
    1292:	08 95       	ret

00001294 <_exit>:
    1294:	f8 94       	cli

00001296 <__stop_program>:
    1296:	ff cf       	rjmp	.-2      	; 0x1296 <__stop_program>
