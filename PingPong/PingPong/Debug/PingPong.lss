
PingPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ea  00800100  00002374  00002408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  008002ea  008002ea  000025f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025f2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  0000264e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003532  00000000  00000000  00002916  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011a2  00000000  00000000  00005e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000138c  00000000  00000000  00006fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a4  00000000  00000000  00008378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008f2  00000000  00000000  0000891c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001117  00000000  00000000  0000920e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0000a325  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__ctors_end>
       4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
       8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
       c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      10:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      14:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      18:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      1c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      20:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      24:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      28:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      2c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      30:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      34:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      38:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      3c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      40:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      44:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      48:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      4c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      50:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      54:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      58:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      5c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      60:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      64:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      68:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      6c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__bad_interrupt>
      70:	c2 08       	sbc	r12, r2
      72:	d0 08       	sbc	r13, r0
      74:	f4 08       	sbc	r15, r4
      76:	00 09       	sbc	r16, r0
      78:	09 09       	sbc	r16, r9
      7a:	0d 09       	sbc	r16, r13
      7c:	11 09       	sbc	r17, r1

0000007e <__trampolines_end>:
	...
      86:	00 06       	cpc	r0, r16
      88:	5f 5f       	subi	r21, 0xFF	; 255
      8a:	06 00       	.word	0x0006	; ????
      8c:	00 00       	nop
      8e:	00 07       	cpc	r16, r16
      90:	07 00       	.word	0x0007	; ????
      92:	07 07       	cpc	r16, r23
      94:	00 00       	nop
      96:	14 7f       	andi	r17, 0xF4	; 244
      98:	7f 14       	cp	r7, r15
      9a:	7f 7f       	andi	r23, 0xFF	; 255
      9c:	14 00       	.word	0x0014	; ????
      9e:	24 2e       	mov	r2, r20
      a0:	6b 6b       	ori	r22, 0xBB	; 187
      a2:	3a 12       	cpse	r3, r26
      a4:	00 00       	nop
      a6:	46 66       	ori	r20, 0x66	; 102
      a8:	30 18       	sub	r3, r0
      aa:	0c 66       	ori	r16, 0x6C	; 108
      ac:	62 00       	.word	0x0062	; ????
      ae:	30 7a       	andi	r19, 0xA0	; 160
      b0:	4f 5d       	subi	r20, 0xDF	; 223
      b2:	37 7a       	andi	r19, 0xA7	; 167
      b4:	48 00       	.word	0x0048	; ????
      b6:	04 07       	cpc	r16, r20
      b8:	03 00       	.word	0x0003	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	00 1c       	adc	r0, r0
      c0:	3e 63       	ori	r19, 0x3E	; 62
      c2:	41 00       	.word	0x0041	; ????
      c4:	00 00       	nop
      c6:	00 41       	sbci	r16, 0x10	; 16
      c8:	63 3e       	cpi	r22, 0xE3	; 227
      ca:	1c 00       	.word	0x001c	; ????
      cc:	00 00       	nop
      ce:	08 2a       	or	r0, r24
      d0:	3e 1c       	adc	r3, r14
      d2:	1c 3e       	cpi	r17, 0xEC	; 236
      d4:	2a 08       	sbc	r2, r10
      d6:	08 08       	sbc	r0, r8
      d8:	3e 3e       	cpi	r19, 0xEE	; 238
      da:	08 08       	sbc	r0, r8
      dc:	00 00       	nop
      de:	00 a0       	ldd	r0, Z+32	; 0x20
      e0:	e0 60       	ori	r30, 0x00	; 0
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	08 08       	sbc	r0, r8
      e8:	08 08       	sbc	r0, r8
      ea:	08 08       	sbc	r0, r8
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	60 60       	ori	r22, 0x00	; 0
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	60 30       	cpi	r22, 0x00	; 0
      f8:	18 0c       	add	r1, r8
      fa:	06 03       	mulsu	r16, r22
      fc:	01 00       	.word	0x0001	; ????
      fe:	3e 7f       	andi	r19, 0xFE	; 254
     100:	59 4d       	sbci	r21, 0xD9	; 217
     102:	7f 3e       	cpi	r23, 0xEF	; 239
     104:	00 00       	nop
     106:	42 42       	sbci	r20, 0x22	; 34
     108:	7f 7f       	andi	r23, 0xFF	; 255
     10a:	40 40       	sbci	r20, 0x00	; 0
     10c:	00 00       	nop
     10e:	62 73       	andi	r22, 0x32	; 50
     110:	59 49       	sbci	r21, 0x99	; 153
     112:	6f 66       	ori	r22, 0x6F	; 111
     114:	00 00       	nop
     116:	22 63       	ori	r18, 0x32	; 50
     118:	49 49       	sbci	r20, 0x99	; 153
     11a:	7f 36       	cpi	r23, 0x6F	; 111
     11c:	00 00       	nop
     11e:	18 1c       	adc	r1, r8
     120:	16 13       	cpse	r17, r22
     122:	7f 7f       	andi	r23, 0xFF	; 255
     124:	10 00       	.word	0x0010	; ????
     126:	27 67       	ori	r18, 0x77	; 119
     128:	45 45       	sbci	r20, 0x55	; 85
     12a:	7d 39       	cpi	r23, 0x9D	; 157
     12c:	00 00       	nop
     12e:	3c 7e       	andi	r19, 0xEC	; 236
     130:	4b 49       	sbci	r20, 0x9B	; 155
     132:	79 30       	cpi	r23, 0x09	; 9
     134:	00 00       	nop
     136:	03 63       	ori	r16, 0x33	; 51
     138:	71 19       	sub	r23, r1
     13a:	0f 07       	cpc	r16, r31
     13c:	00 00       	nop
     13e:	36 7f       	andi	r19, 0xF6	; 246
     140:	49 49       	sbci	r20, 0x99	; 153
     142:	7f 36       	cpi	r23, 0x6F	; 111
     144:	00 00       	nop
     146:	06 4f       	sbci	r16, 0xF6	; 246
     148:	49 69       	ori	r20, 0x99	; 153
     14a:	3f 1e       	adc	r3, r31
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	6c 6c       	ori	r22, 0xCC	; 204
     152:	00 00       	nop
     154:	00 00       	nop
     156:	00 a0       	ldd	r0, Z+32	; 0x20
     158:	ec 6c       	ori	r30, 0xCC	; 204
     15a:	00 00       	nop
     15c:	00 00       	nop
     15e:	08 1c       	adc	r0, r8
     160:	36 63       	ori	r19, 0x36	; 54
     162:	41 00       	.word	0x0041	; ????
     164:	00 00       	nop
     166:	14 14       	cp	r1, r4
     168:	14 14       	cp	r1, r4
     16a:	14 14       	cp	r1, r4
     16c:	00 00       	nop
     16e:	00 41       	sbci	r16, 0x10	; 16
     170:	63 36       	cpi	r22, 0x63	; 99
     172:	1c 08       	sbc	r1, r12
     174:	00 00       	nop
     176:	02 03       	mulsu	r16, r18
     178:	51 59       	subi	r21, 0x91	; 145
     17a:	0f 06       	cpc	r0, r31
     17c:	00 00       	nop
     17e:	3e 7f       	andi	r19, 0xFE	; 254
     180:	41 5d       	subi	r20, 0xD1	; 209
     182:	5d 1f       	adc	r21, r29
     184:	1e 00       	.word	0x001e	; ????
     186:	7c 7e       	andi	r23, 0xEC	; 236
     188:	13 13       	cpse	r17, r19
     18a:	7e 7c       	andi	r23, 0xCE	; 206
     18c:	00 00       	nop
     18e:	41 7f       	andi	r20, 0xF1	; 241
     190:	7f 49       	sbci	r23, 0x9F	; 159
     192:	49 7f       	andi	r20, 0xF9	; 249
     194:	36 00       	.word	0x0036	; ????
     196:	1c 3e       	cpi	r17, 0xEC	; 236
     198:	63 41       	sbci	r22, 0x13	; 19
     19a:	41 63       	ori	r20, 0x31	; 49
     19c:	22 00       	.word	0x0022	; ????
     19e:	41 7f       	andi	r20, 0xF1	; 241
     1a0:	7f 41       	sbci	r23, 0x1F	; 31
     1a2:	63 7f       	andi	r22, 0xF3	; 243
     1a4:	1c 00       	.word	0x001c	; ????
     1a6:	41 7f       	andi	r20, 0xF1	; 241
     1a8:	7f 49       	sbci	r23, 0x9F	; 159
     1aa:	5d 41       	sbci	r21, 0x1D	; 29
     1ac:	63 00       	.word	0x0063	; ????
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	1d 01       	movw	r2, r26
     1b4:	03 00       	.word	0x0003	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	51 73       	andi	r21, 0x31	; 49
     1bc:	72 00       	.word	0x0072	; ????
     1be:	7f 7f       	andi	r23, 0xFF	; 255
     1c0:	08 08       	sbc	r0, r8
     1c2:	7f 7f       	andi	r23, 0xFF	; 255
     1c4:	00 00       	nop
     1c6:	00 41       	sbci	r16, 0x10	; 16
     1c8:	7f 7f       	andi	r23, 0xFF	; 255
     1ca:	41 00       	.word	0x0041	; ????
     1cc:	00 00       	nop
     1ce:	30 70       	andi	r19, 0x00	; 0
     1d0:	40 41       	sbci	r20, 0x10	; 16
     1d2:	7f 3f       	cpi	r23, 0xFF	; 255
     1d4:	01 00       	.word	0x0001	; ????
     1d6:	41 7f       	andi	r20, 0xF1	; 241
     1d8:	7f 08       	sbc	r7, r15
     1da:	1c 77       	andi	r17, 0x7C	; 124
     1dc:	63 00       	.word	0x0063	; ????
     1de:	41 7f       	andi	r20, 0xF1	; 241
     1e0:	7f 41       	sbci	r23, 0x1F	; 31
     1e2:	40 60       	ori	r20, 0x00	; 0
     1e4:	70 00       	.word	0x0070	; ????
     1e6:	7f 7f       	andi	r23, 0xFF	; 255
     1e8:	06 0c       	add	r0, r6
     1ea:	06 7f       	andi	r16, 0xF6	; 246
     1ec:	7f 00       	.word	0x007f	; ????
     1ee:	7f 7f       	andi	r23, 0xFF	; 255
     1f0:	06 0c       	add	r0, r6
     1f2:	18 7f       	andi	r17, 0xF8	; 248
     1f4:	7f 00       	.word	0x007f	; ????
     1f6:	1c 3e       	cpi	r17, 0xEC	; 236
     1f8:	63 41       	sbci	r22, 0x13	; 19
     1fa:	63 3e       	cpi	r22, 0xE3	; 227
     1fc:	1c 00       	.word	0x001c	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 49       	sbci	r23, 0x9F	; 159
     202:	09 0f       	add	r16, r25
     204:	06 00       	.word	0x0006	; ????
     206:	1e 3f       	cpi	r17, 0xFE	; 254
     208:	21 71       	andi	r18, 0x11	; 17
     20a:	7f 5e       	subi	r23, 0xEF	; 239
     20c:	00 00       	nop
     20e:	41 7f       	andi	r20, 0xF1	; 241
     210:	7f 19       	sub	r23, r15
     212:	39 6f       	ori	r19, 0xF9	; 249
     214:	46 00       	.word	0x0046	; ????
     216:	26 67       	ori	r18, 0x76	; 118
     218:	4d 59       	subi	r20, 0x9D	; 157
     21a:	7b 32       	cpi	r23, 0x2B	; 43
     21c:	00 00       	nop
     21e:	03 41       	sbci	r16, 0x13	; 19
     220:	7f 7f       	andi	r23, 0xFF	; 255
     222:	41 03       	mulsu	r20, r17
     224:	00 00       	nop
     226:	7f 7f       	andi	r23, 0xFF	; 255
     228:	40 40       	sbci	r20, 0x00	; 0
     22a:	7f 7f       	andi	r23, 0xFF	; 255
     22c:	00 00       	nop
     22e:	1f 3f       	cpi	r17, 0xFF	; 255
     230:	60 60       	ori	r22, 0x00	; 0
     232:	3f 1f       	adc	r19, r31
     234:	00 00       	nop
     236:	7f 7f       	andi	r23, 0xFF	; 255
     238:	30 18       	sub	r3, r0
     23a:	30 7f       	andi	r19, 0xF0	; 240
     23c:	7f 00       	.word	0x007f	; ????
     23e:	63 77       	andi	r22, 0x73	; 115
     240:	1c 08       	sbc	r1, r12
     242:	1c 77       	andi	r17, 0x7C	; 124
     244:	63 00       	.word	0x0063	; ????
     246:	07 4f       	sbci	r16, 0xF7	; 247
     248:	78 78       	andi	r23, 0x88	; 136
     24a:	4f 07       	cpc	r20, r31
     24c:	00 00       	nop
     24e:	67 73       	andi	r22, 0x37	; 55
     250:	59 4d       	sbci	r21, 0xD9	; 217
     252:	47 63       	ori	r20, 0x37	; 55
     254:	71 00       	.word	0x0071	; ????
     256:	00 7f       	andi	r16, 0xF0	; 240
     258:	7f 41       	sbci	r23, 0x1F	; 31
     25a:	41 00       	.word	0x0041	; ????
     25c:	00 00       	nop
     25e:	01 03       	mulsu	r16, r17
     260:	06 0c       	add	r0, r6
     262:	18 30       	cpi	r17, 0x08	; 8
     264:	60 00       	.word	0x0060	; ????
     266:	00 41       	sbci	r16, 0x10	; 16
     268:	41 7f       	andi	r20, 0xF1	; 241
     26a:	7f 00       	.word	0x007f	; ????
     26c:	00 00       	nop
     26e:	08 0c       	add	r0, r8
     270:	06 03       	mulsu	r16, r22
     272:	06 0c       	add	r0, r6
     274:	08 00       	.word	0x0008	; ????
     276:	80 80       	ld	r8, Z
     278:	80 80       	ld	r8, Z
     27a:	80 80       	ld	r8, Z
     27c:	80 80       	ld	r8, Z
     27e:	00 00       	nop
     280:	03 07       	cpc	r16, r19
     282:	04 00       	.word	0x0004	; ????
     284:	00 00       	nop
     286:	20 74       	andi	r18, 0x40	; 64
     288:	54 54       	subi	r21, 0x44	; 68
     28a:	3c 78       	andi	r19, 0x8C	; 140
     28c:	40 00       	.word	0x0040	; ????
     28e:	41 3f       	cpi	r20, 0xF1	; 241
     290:	7f 44       	sbci	r23, 0x4F	; 79
     292:	44 7c       	andi	r20, 0xC4	; 196
     294:	38 00       	.word	0x0038	; ????
     296:	38 7c       	andi	r19, 0xC8	; 200
     298:	44 44       	sbci	r20, 0x44	; 68
     29a:	6c 28       	or	r6, r12
     29c:	00 00       	nop
     29e:	30 78       	andi	r19, 0x80	; 128
     2a0:	48 49       	sbci	r20, 0x98	; 152
     2a2:	3f 7f       	andi	r19, 0xFF	; 255
     2a4:	40 00       	.word	0x0040	; ????
     2a6:	38 7c       	andi	r19, 0xC8	; 200
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	5c 18       	sub	r5, r12
     2ac:	00 00       	nop
     2ae:	48 7e       	andi	r20, 0xE8	; 232
     2b0:	7f 49       	sbci	r23, 0x9F	; 159
     2b2:	03 02       	muls	r16, r19
     2b4:	00 00       	nop
     2b6:	98 bc       	out	0x28, r9	; 40
     2b8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ba:	f8 7c       	andi	r31, 0xC8	; 200
     2bc:	04 00       	.word	0x0004	; ????
     2be:	41 7f       	andi	r20, 0xF1	; 241
     2c0:	7f 08       	sbc	r7, r15
     2c2:	04 7c       	andi	r16, 0xC4	; 196
     2c4:	78 00       	.word	0x0078	; ????
     2c6:	00 44       	sbci	r16, 0x40	; 64
     2c8:	7d 7d       	andi	r23, 0xDD	; 221
     2ca:	40 00       	.word	0x0040	; ????
     2cc:	00 00       	nop
     2ce:	40 c4       	rjmp	.+2176   	; 0xb50 <OLED_print_char+0x24>
     2d0:	84 fd       	sbrc	r24, 4
     2d2:	7d 00       	.word	0x007d	; ????
     2d4:	00 00       	nop
     2d6:	41 7f       	andi	r20, 0xF1	; 241
     2d8:	7f 10       	cpse	r7, r15
     2da:	38 6c       	ori	r19, 0xC8	; 200
     2dc:	44 00       	.word	0x0044	; ????
     2de:	00 41       	sbci	r16, 0x10	; 16
     2e0:	7f 7f       	andi	r23, 0xFF	; 255
     2e2:	40 00       	.word	0x0040	; ????
     2e4:	00 00       	nop
     2e6:	7c 7c       	andi	r23, 0xCC	; 204
     2e8:	0c 18       	sub	r0, r12
     2ea:	0c 7c       	andi	r16, 0xCC	; 204
     2ec:	78 00       	.word	0x0078	; ????
     2ee:	7c 7c       	andi	r23, 0xCC	; 204
     2f0:	04 04       	cpc	r0, r4
     2f2:	7c 78       	andi	r23, 0x8C	; 140
     2f4:	00 00       	nop
     2f6:	38 7c       	andi	r19, 0xC8	; 200
     2f8:	44 44       	sbci	r20, 0x44	; 68
     2fa:	7c 38       	cpi	r23, 0x8C	; 140
     2fc:	00 00       	nop
     2fe:	84 fc       	sbrc	r8, 4
     300:	f8 a4       	ldd	r15, Y+40	; 0x28
     302:	24 3c       	cpi	r18, 0xC4	; 196
     304:	18 00       	.word	0x0018	; ????
     306:	18 3c       	cpi	r17, 0xC8	; 200
     308:	24 a4       	ldd	r2, Z+44	; 0x2c
     30a:	f8 fc       	.word	0xfcf8	; ????
     30c:	84 00       	.word	0x0084	; ????
     30e:	44 7c       	andi	r20, 0xC4	; 196
     310:	78 44       	sbci	r23, 0x48	; 72
     312:	1c 18       	sub	r1, r12
     314:	00 00       	nop
     316:	48 5c       	subi	r20, 0xC8	; 200
     318:	54 54       	subi	r21, 0x44	; 68
     31a:	74 24       	eor	r7, r4
     31c:	00 00       	nop
     31e:	00 04       	cpc	r0, r0
     320:	3e 7f       	andi	r19, 0xFE	; 254
     322:	44 24       	eor	r4, r4
     324:	00 00       	nop
     326:	3c 7c       	andi	r19, 0xCC	; 204
     328:	40 40       	sbci	r20, 0x00	; 0
     32a:	3c 7c       	andi	r19, 0xCC	; 204
     32c:	40 00       	.word	0x0040	; ????
     32e:	1c 3c       	cpi	r17, 0xCC	; 204
     330:	60 60       	ori	r22, 0x00	; 0
     332:	3c 1c       	adc	r3, r12
     334:	00 00       	nop
     336:	3c 7c       	andi	r19, 0xCC	; 204
     338:	60 30       	cpi	r22, 0x00	; 0
     33a:	60 7c       	andi	r22, 0xC0	; 192
     33c:	3c 00       	.word	0x003c	; ????
     33e:	44 6c       	ori	r20, 0xC4	; 196
     340:	38 10       	cpse	r3, r8
     342:	38 6c       	ori	r19, 0xC8	; 200
     344:	44 00       	.word	0x0044	; ????
     346:	9c bc       	out	0x2c, r9	; 44
     348:	a0 a0       	ldd	r10, Z+32	; 0x20
     34a:	fc 7c       	andi	r31, 0xCC	; 204
     34c:	00 00       	nop
     34e:	4c 64       	ori	r20, 0x4C	; 76
     350:	74 5c       	subi	r23, 0xC4	; 196
     352:	4c 64       	ori	r20, 0x4C	; 76
     354:	00 00       	nop
     356:	08 08       	sbc	r0, r8
     358:	3e 77       	andi	r19, 0x7E	; 126
     35a:	41 41       	sbci	r20, 0x11	; 17
     35c:	00 00       	nop
     35e:	00 00       	nop
     360:	00 77       	andi	r16, 0x70	; 112
     362:	77 00       	.word	0x0077	; ????
     364:	00 00       	nop
     366:	41 41       	sbci	r20, 0x11	; 17
     368:	77 3e       	cpi	r23, 0xE7	; 231
     36a:	08 08       	sbc	r0, r8
     36c:	00 00       	nop
     36e:	02 03       	mulsu	r16, r18
     370:	01 03       	mulsu	r16, r17
     372:	02 03       	mulsu	r16, r18
     374:	01 00       	.word	0x0001	; ????
     376:	08 0c       	add	r0, r8
     378:	7e 7f       	andi	r23, 0xFE	; 254
     37a:	7e 0c       	add	r7, r14
     37c:	08 00       	.word	0x0008	; ????
     37e:	08 18       	sub	r0, r8
     380:	3f 7f       	andi	r19, 0xFF	; 255
     382:	3f 18       	sub	r3, r15
     384:	08 00       	.word	0x0008	; ????
     386:	08 1c       	adc	r0, r8
     388:	3e 7f       	andi	r19, 0xFE	; 254
     38a:	1c 1c       	adc	r1, r12
     38c:	1c 00       	.word	0x001c	; ????
     38e:	00 1c       	adc	r0, r0
     390:	1c 7f       	andi	r17, 0xFC	; 252
     392:	3e 1c       	adc	r3, r14
     394:	08 00       	.word	0x0008	; ????
     396:	00 00       	nop
     398:	70 18       	sub	r7, r0
     39a:	7d b6       	in	r7, 0x3d	; 61
     39c:	bc 3c       	cpi	r27, 0xCC	; 204
     39e:	bc b6       	in	r11, 0x3c	; 60
     3a0:	7d 18       	sub	r7, r13
     3a2:	70 00       	.word	0x0070	; ????
	...

000003a6 <__ctors_end>:
     3a6:	11 24       	eor	r1, r1
     3a8:	1f be       	out	0x3f, r1	; 63
     3aa:	cf ef       	ldi	r28, 0xFF	; 255
     3ac:	d4 e0       	ldi	r29, 0x04	; 4
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	cd bf       	out	0x3d, r28	; 61

000003b2 <__do_copy_data>:
     3b2:	12 e0       	ldi	r17, 0x02	; 2
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b1 e0       	ldi	r27, 0x01	; 1
     3b8:	e4 e7       	ldi	r30, 0x74	; 116
     3ba:	f3 e2       	ldi	r31, 0x23	; 35
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <__do_copy_data+0x10>
     3be:	05 90       	lpm	r0, Z+
     3c0:	0d 92       	st	X+, r0
     3c2:	aa 3e       	cpi	r26, 0xEA	; 234
     3c4:	b1 07       	cpc	r27, r17
     3c6:	d9 f7       	brne	.-10     	; 0x3be <__do_copy_data+0xc>

000003c8 <__do_clear_bss>:
     3c8:	24 e0       	ldi	r18, 0x04	; 4
     3ca:	aa ee       	ldi	r26, 0xEA	; 234
     3cc:	b2 e0       	ldi	r27, 0x02	; 2
     3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <.do_clear_bss_start>

000003d0 <.do_clear_bss_loop>:
     3d0:	1d 92       	st	X+, r1

000003d2 <.do_clear_bss_start>:
     3d2:	af 32       	cpi	r26, 0x2F	; 47
     3d4:	b2 07       	cpc	r27, r18
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <.do_clear_bss_loop>
     3d8:	0e 94 2a 08 	call	0x1054	; 0x1054 <main>
     3dc:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <_exit>

000003e0 <__bad_interrupt>:
     3e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e4 <CAN_message_send_to_reg>:
		return 0;
	}
	return 1;
}

void CAN_message_send_to_reg(CAN_message const * const msg, uint8_t reg){
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ec 01       	movw	r28, r24
     3f0:	f6 2e       	mov	r15, r22
	//mcp2515_bit_modify(reg, TXP_MASK, msg->priority); 	//Set priority
	mcp2515_write(reg + 1, msg->id>>3); 			//Set 8 MSB of ID
     3f2:	88 81       	ld	r24, Y
     3f4:	99 81       	ldd	r25, Y+1	; 0x01
     3f6:	bc 01       	movw	r22, r24
     3f8:	76 95       	lsr	r23
     3fa:	67 95       	ror	r22
     3fc:	76 95       	lsr	r23
     3fe:	67 95       	ror	r22
     400:	76 95       	lsr	r23
     402:	67 95       	ror	r22
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	8f 0d       	add	r24, r15
     408:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_write(reg + 2, msg->id<<5);			//Set 3 LSB of ID
     40c:	68 81       	ld	r22, Y
     40e:	62 95       	swap	r22
     410:	66 0f       	add	r22, r22
     412:	60 7e       	andi	r22, 0xE0	; 224
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	8f 0d       	add	r24, r15
     418:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_write(reg + 5, msg->length);			//Data length. Can set RTR by | with 0b01000000
     41c:	6a 81       	ldd	r22, Y+2	; 0x02
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	8f 0d       	add	r24, r15
     422:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	
	for(uint8_t i = 0; i<msg->length; ++i){
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	88 23       	and	r24, r24
     42a:	79 f0       	breq	.+30     	; 0x44a <CAN_message_send_to_reg+0x66>
     42c:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(reg + i+6, msg->data[i]);
     42e:	06 e0       	ldi	r16, 0x06	; 6
     430:	0f 0d       	add	r16, r15
     432:	fe 01       	movw	r30, r28
     434:	e1 0f       	add	r30, r17
     436:	f1 1d       	adc	r31, r1
     438:	63 81       	ldd	r22, Z+3	; 0x03
     43a:	80 2f       	mov	r24, r16
     43c:	81 0f       	add	r24, r17
     43e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	//mcp2515_bit_modify(reg, TXP_MASK, msg->priority); 	//Set priority
	mcp2515_write(reg + 1, msg->id>>3); 			//Set 8 MSB of ID
	mcp2515_write(reg + 2, msg->id<<5);			//Set 3 LSB of ID
	mcp2515_write(reg + 5, msg->length);			//Data length. Can set RTR by | with 0b01000000
	
	for(uint8_t i = 0; i<msg->length; ++i){
     442:	1f 5f       	subi	r17, 0xFF	; 255
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	18 17       	cp	r17, r24
     448:	a0 f3       	brcs	.-24     	; 0x432 <CAN_message_send_to_reg+0x4e>
		mcp2515_write(reg + i+6, msg->data[i]);
	}
	if(reg == MCP_TXB0CTRL){
     44a:	80 e3       	ldi	r24, 0x30	; 48
     44c:	f8 12       	cpse	r15, r24
     44e:	04 c0       	rjmp	.+8      	; 0x458 <CAN_message_send_to_reg+0x74>
		mcp2515_request_to_send(MCP_RTS_TX0);
     450:	81 e8       	ldi	r24, 0x81	; 129
     452:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <mcp2515_request_to_send>
     456:	0d c0       	rjmp	.+26     	; 0x472 <CAN_message_send_to_reg+0x8e>
	}
	else if(reg == MCP_TXB1CTRL){
     458:	80 e4       	ldi	r24, 0x40	; 64
     45a:	f8 12       	cpse	r15, r24
     45c:	04 c0       	rjmp	.+8      	; 0x466 <CAN_message_send_to_reg+0x82>
		mcp2515_request_to_send(MCP_RTS_TX1);
     45e:	82 e8       	ldi	r24, 0x82	; 130
     460:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <mcp2515_request_to_send>
     464:	06 c0       	rjmp	.+12     	; 0x472 <CAN_message_send_to_reg+0x8e>
	}
	else if(reg == MCP_TXB2CTRL){
     466:	80 e5       	ldi	r24, 0x50	; 80
     468:	f8 12       	cpse	r15, r24
     46a:	03 c0       	rjmp	.+6      	; 0x472 <CAN_message_send_to_reg+0x8e>
		mcp2515_request_to_send(MCP_RTS_TX2);
     46c:	84 e8       	ldi	r24, 0x84	; 132
     46e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <mcp2515_request_to_send>
	}
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	08 95       	ret

0000047e <CAN_message_send>:
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
}


//Returns 1 if message was sedt, otherwise 0
uint8_t CAN_message_send(CAN_message const * const msg){
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
	
	//reg0, 0x30: status bit nr 2 
	//reg1, 0x40: status bit nr 4 
	//reg2, 0x50: status bit nr 6
	
	uint8_t status = mcp2515_read_status();
     484:	0e 94 63 03 	call	0x6c6	; 0x6c6 <mcp2515_read_status>
	if(status | (1 << 2)){
		CAN_message_send_to_reg(msg, MCP_TXB0CTRL);
     488:	60 e3       	ldi	r22, 0x30	; 48
     48a:	ce 01       	movw	r24, r28
     48c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <CAN_message_send_to_reg>
	}
	else{
		return 0;
	}
	return 1;
}
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <CAN_data_receive>:
	else if(reg == MCP_TXB2CTRL){
		mcp2515_request_to_send(MCP_RTS_TX2);
	}
}

bool CAN_data_receive(CAN_message* msg, uint8_t reg){
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	8c 01       	movw	r16, r24
     4a6:	e6 2e       	mov	r14, r22
	//memset(msg, 0, sizeof(CAN_message));
	
	uint8_t retVal = false;
	//reg0, 0x60: bit nr 0
	//reg1, 0x70: bit nr 1
	uint8_t status = mcp2515_read_status();
     4a8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <mcp2515_read_status>
	if(status | (1 << ((reg>>4)-6))){
     4ac:	2e 2d       	mov	r18, r14
     4ae:	22 95       	swap	r18
     4b0:	2f 70       	andi	r18, 0x0F	; 15
     4b2:	26 50       	subi	r18, 0x06	; 6
     4b4:	41 e0       	ldi	r20, 0x01	; 1
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	ba 01       	movw	r22, r20
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <CAN_data_receive+0x28>
     4bc:	66 0f       	add	r22, r22
     4be:	77 1f       	adc	r23, r23
     4c0:	2a 95       	dec	r18
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <CAN_data_receive+0x24>
     4c4:	9b 01       	movw	r18, r22
     4c6:	28 2b       	or	r18, r24
     4c8:	23 2b       	or	r18, r19
     4ca:	91 f1       	breq	.+100    	; 0x530 <__stack+0x31>
		msg->id = (mcp2515_read(reg+1) << 3); //8 msb
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	8e 0d       	add	r24, r14
     4d0:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_read>
     4d4:	78 e0       	ldi	r23, 0x08	; 8
     4d6:	87 9f       	mul	r24, r23
     4d8:	e0 01       	movw	r28, r0
     4da:	11 24       	eor	r1, r1
     4dc:	f8 01       	movw	r30, r16
     4de:	d1 83       	std	Z+1, r29	; 0x01
     4e0:	c0 83       	st	Z, r28
		msg->id |= (mcp2515_read(reg+2) >> 5); //3 lsb
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	8e 0d       	add	r24, r14
     4e6:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_read>
     4ea:	82 95       	swap	r24
     4ec:	86 95       	lsr	r24
     4ee:	87 70       	andi	r24, 0x07	; 7
     4f0:	c8 2b       	or	r28, r24
     4f2:	f8 01       	movw	r30, r16
     4f4:	d1 83       	std	Z+1, r29	; 0x01
     4f6:	c0 83       	st	Z, r28
		msg->length = mcp2515_read(reg+5) & 0x0f;
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	8e 0d       	add	r24, r14
     4fc:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_read>
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	f8 01       	movw	r30, r16
     504:	82 83       	std	Z+2, r24	; 0x02
		
		for(uint8_t i=0; i<msg->length && i<8; ++i){
     506:	88 23       	and	r24, r24
     508:	a9 f0       	breq	.+42     	; 0x534 <__stack+0x35>
     50a:	e8 01       	movw	r28, r16
     50c:	23 96       	adiw	r28, 0x03	; 3
     50e:	f1 2c       	mov	r15, r1
			msg->data[i] = mcp2515_read(reg+6+i);
     510:	f6 e0       	ldi	r31, 0x06	; 6
     512:	ef 0e       	add	r14, r31
     514:	8e 2d       	mov	r24, r14
     516:	8f 0d       	add	r24, r15
     518:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_read>
     51c:	89 93       	st	Y+, r24
	if(status | (1 << ((reg>>4)-6))){
		msg->id = (mcp2515_read(reg+1) << 3); //8 msb
		msg->id |= (mcp2515_read(reg+2) >> 5); //3 lsb
		msg->length = mcp2515_read(reg+5) & 0x0f;
		
		for(uint8_t i=0; i<msg->length && i<8; ++i){
     51e:	f3 94       	inc	r15
     520:	f8 01       	movw	r30, r16
     522:	82 81       	ldd	r24, Z+2	; 0x02
     524:	f8 16       	cp	r15, r24
     526:	40 f4       	brcc	.+16     	; 0x538 <__stack+0x39>
     528:	f8 e0       	ldi	r31, 0x08	; 8
     52a:	ff 12       	cpse	r15, r31
     52c:	f3 cf       	rjmp	.-26     	; 0x514 <__stack+0x15>
     52e:	06 c0       	rjmp	.+12     	; 0x53c <__stack+0x3d>
}

bool CAN_data_receive(CAN_message* msg, uint8_t reg){
	//memset(msg, 0, sizeof(CAN_message));
	
	uint8_t retVal = false;
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	05 c0       	rjmp	.+10     	; 0x53e <__stack+0x3f>
		msg->length = mcp2515_read(reg+5) & 0x0f;
		
		for(uint8_t i=0; i<msg->length && i<8; ++i){
			msg->data[i] = mcp2515_read(reg+6+i);
		}
		retVal = true;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	03 c0       	rjmp	.+6      	; 0x53e <__stack+0x3f>
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	01 c0       	rjmp	.+2      	; 0x53e <__stack+0x3f>
     53c:	81 e0       	ldi	r24, 0x01	; 1
	}	
	return retVal;
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <CAN_int>:

interrupt CAN_int(){
	if(!read_bit(INTERRUPT_PIN, INTERRUPT_BIT)){
     54c:	83 99       	sbic	0x10, 3	; 16
     54e:	06 c0       	rjmp	.+12     	; 0x55c <CAN_int+0x10>
		interrupt retval = (interrupt)((mcp2515_read(MCP_CANSTAT)&MCP_CANSTAT_ICOD_MASK) >> 1);
     550:	8e e0       	ldi	r24, 0x0E	; 14
     552:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_read>
     556:	8e 70       	andi	r24, 0x0E	; 14
		return retval;
     558:	86 95       	lsr	r24
     55a:	08 95       	ret
	}
	return noInt;
     55c:	80 e0       	ldi	r24, 0x00	; 0
}
     55e:	08 95       	ret

00000560 <CAN_all_int_clear>:
		mcp2515_bit_modify(MCP_CANINTF, interrupt_to_mask(CAN_interrupt), 0x00);	
	}
}

void CAN_all_int_clear(){
	mcp2515_write(MCP_CANINTF, 0x00);
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	8c e2       	ldi	r24, 0x2C	; 44
     564:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
     568:	08 95       	ret

0000056a <CAN_init>:

#include <stdio.h>
#include <string.h>

void CAN_init(){
	clear_bit(INTERRUPT_DDR, INTERRUPT_BIT); //Input on the interrupt pin
     56a:	8b 98       	cbi	0x11, 3	; 17
	
	uint8_t value;
	SPI_init(); // Initialize SPI
     56c:	0e 94 8f 03 	call	0x71e	; 0x71e <SPI_init>
	mcp2515_reset(); // Send reset-command
     570:	0e 94 89 03 	call	0x712	; 0x712 <mcp2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     574:	81 e2       	ldi	r24, 0x21	; 33
     576:	8a 95       	dec	r24
     578:	f1 f7       	brne	.-4      	; 0x576 <CAN_init+0xc>
	_delay_us(20);
	// Self-test
	value = mcp2515_read(MCP_CANSTAT);
     57a:	8e e0       	ldi	r24, 0x0E	; 14
     57c:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
     580:	80 7e       	andi	r24, 0xE0	; 224
     582:	80 38       	cpi	r24, 0x80	; 128
     584:	21 f0       	breq	.+8      	; 0x58e <CAN_init+0x24>
		puts("MCP2515 is NOT in configuration mode after reset!\n");
     586:	86 e0       	ldi	r24, 0x06	; 6
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <puts>
	}
		
	//Sets up RXBOCTRL
		//RXM = 01, activate filter, only short ID
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_RXB0RXM_MASK, 1 << 5);
     58e:	40 e2       	ldi	r20, 0x20	; 32
     590:	60 e6       	ldi	r22, 0x60	; 96
     592:	80 e6       	ldi	r24, 0x60	; 96
     594:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
		//BUKT: 1 -> transfers to RXB1 when RXB0 is full
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_RXB0BUKT_MASK, 1 << 2);
     598:	44 e0       	ldi	r20, 0x04	; 4
     59a:	64 e0       	ldi	r22, 0x04	; 4
     59c:	80 e6       	ldi	r24, 0x60	; 96
     59e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	//RXB1CTRL
		//RXM = 01, activate filter, only short ID
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_RXB1RXM_MASK, 1 << 5);
     5a2:	40 e2       	ldi	r20, 0x20	; 32
     5a4:	60 e6       	ldi	r22, 0x60	; 96
     5a6:	80 e7       	ldi	r24, 0x70	; 112
     5a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	//TX2IE = 0 Transmit 2 empty interrupt
	//TX1IE = 0 Transmit 1 empty interrupt
	//TX0IE = 0 Transmit 0 empty interrupt
	//RX1IE = 1 Interrupt when there is data RX1
	//RX0IE = 1 Interrupt when there is data RX2
	mcp2515_write(MCP_CANINTE, 0b00100011);
     5ac:	63 e2       	ldi	r22, 0x23	; 35
     5ae:	8b e2       	ldi	r24, 0x2B	; 43
     5b0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	
	//Filters:
	//Mask for RX0
	mcp2515_write(MCP_RXM0SIDH, NODE1_CANID_H_MASK >> 3);
     5b4:	60 ec       	ldi	r22, 0xC0	; 192
     5b6:	80 e2       	ldi	r24, 0x20	; 32
     5b8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_bit_modify(MCP_RXM0SIDL, 0b11100000U, NODE1_CANID_H_MASK << 5);
     5bc:	40 e2       	ldi	r20, 0x20	; 32
     5be:	60 ee       	ldi	r22, 0xE0	; 224
     5c0:	81 e2       	ldi	r24, 0x21	; 33
     5c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	
	//Mask for RX1
	mcp2515_write(MCP_RXM1SIDH, NODE1_CANID_L_MASK >> 3);
     5c6:	60 ec       	ldi	r22, 0xC0	; 192
     5c8:	84 e2       	ldi	r24, 0x24	; 36
     5ca:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_bit_modify(MCP_RXM1SIDL, 0b11100000U, NODE1_CANID_L_MASK << 5);
     5ce:	40 e6       	ldi	r20, 0x60	; 96
     5d0:	60 ee       	ldi	r22, 0xE0	; 224
     5d2:	85 e2       	ldi	r24, 0x25	; 37
     5d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	
	//Filter 0 (RX0, goes to RX1 if RX0 is full)
	mcp2515_write(MCP_RXF0SIDH, NODE1_CANID_HIGHPRIO_0 >> 3);
     5d8:	60 e4       	ldi	r22, 0x40	; 64
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0b11100000U, NODE1_CANID_HIGHPRIO_0 << 5);
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	60 ee       	ldi	r22, 0xE0	; 224
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	
	//Filter 1 (RX0, goes to RX1 if RX0 is full)
	mcp2515_write(MCP_RXF1SIDH, NODE1_CANID_HIGHPRIO_1 >> 3);
     5ea:	60 e4       	ldi	r22, 0x40	; 64
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_bit_modify(MCP_RXF1SIDL, 0b11100000U, NODE1_CANID_HIGHPRIO_1 << 5);
     5f2:	40 e2       	ldi	r20, 0x20	; 32
     5f4:	60 ee       	ldi	r22, 0xE0	; 224
     5f6:	85 e0       	ldi	r24, 0x05	; 5
     5f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	
	//Filter 2 (RX1)
	mcp2515_write(MCP_RXF2SIDH, NODE1_CANID_0 >> 3);
     5fc:	60 ec       	ldi	r22, 0xC0	; 192
     5fe:	88 e0       	ldi	r24, 0x08	; 8
     600:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_bit_modify(MCP_RXF2SIDL, 0b11100000U, NODE1_CANID_0 << 5);
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	60 ee       	ldi	r22, 0xE0	; 224
     608:	89 e0       	ldi	r24, 0x09	; 9
     60a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	
	//Filter 3 (RX1)
	mcp2515_write(MCP_RXF3SIDH, NODE1_CANID_1 >> 3);
     60e:	60 ec       	ldi	r22, 0xC0	; 192
     610:	80 e1       	ldi	r24, 0x10	; 16
     612:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_bit_modify(MCP_RXF3SIDL, 0b11100000U, NODE1_CANID_1 << 5);
     616:	40 e2       	ldi	r20, 0x20	; 32
     618:	60 ee       	ldi	r22, 0xE0	; 224
     61a:	81 e1       	ldi	r24, 0x11	; 17
     61c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	
	//Filter 4 (RX1)
	mcp2515_write(MCP_RXF4SIDH, NODE1_CANID_2 >> 3);
     620:	60 ec       	ldi	r22, 0xC0	; 192
     622:	84 e1       	ldi	r24, 0x14	; 20
     624:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_bit_modify(MCP_RXF4SIDL, 0b11100000U, NODE1_CANID_2 << 5);
     628:	40 e4       	ldi	r20, 0x40	; 64
     62a:	60 ee       	ldi	r22, 0xE0	; 224
     62c:	85 e1       	ldi	r24, 0x15	; 21
     62e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	
	//Filter 5 (RX1)
	mcp2515_write(MCP_RXF5SIDH, NODE1_CANID_3 >> 3);
     632:	60 ec       	ldi	r22, 0xC0	; 192
     634:	88 e1       	ldi	r24, 0x18	; 24
     636:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp2515_write>
	mcp2515_bit_modify(MCP_RXF5SIDL, 0b11100000U, NODE1_CANID_3 << 5);
     63a:	40 e6       	ldi	r20, 0x60	; 96
     63c:	60 ee       	ldi	r22, 0xE0	; 224
     63e:	89 e1       	ldi	r24, 0x19	; 25
     640:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
	
	CAN_all_int_clear();
     644:	0e 94 b0 02 	call	0x560	; 0x560 <CAN_all_int_clear>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	60 ee       	ldi	r22, 0xE0	; 224
     64c:	8f e0       	ldi	r24, 0x0F	; 15
     64e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
     652:	08 95       	ret

00000654 <interrupt_to_mask>:
void CAN_all_int_clear(){
	mcp2515_write(MCP_CANINTF, 0x00);
}

uint8_t interrupt_to_mask(interrupt CAN_interrupt){
	switch(CAN_interrupt){
     654:	86 30       	cpi	r24, 0x06	; 6
     656:	31 f0       	breq	.+12     	; 0x664 <interrupt_to_mask+0x10>
     658:	87 30       	cpi	r24, 0x07	; 7
     65a:	31 f0       	breq	.+12     	; 0x668 <interrupt_to_mask+0x14>
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	31 f0       	breq	.+12     	; 0x66c <interrupt_to_mask+0x18>
		case noInt:
			return 0x00;
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	08 95       	ret
		case err:
			return 0b00100000;
		case rx0:
			return 0b00000001;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	08 95       	ret
		case rx1:
			return 0b00000010;
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	08 95       	ret
uint8_t interrupt_to_mask(interrupt CAN_interrupt){
	switch(CAN_interrupt){
		case noInt:
			return 0x00;
		case err:
			return 0b00100000;
     66c:	80 e2       	ldi	r24, 0x20	; 32
		case rx1:
			return 0b00000010;
		default:
			return 0x00;
	}
}
     66e:	08 95       	ret

00000670 <CAN_int_clear>:
	}
	return noInt;
}

void CAN_int_clear(interrupt CAN_interrupt){
	if(CAN_interrupt != noInt){
     670:	88 23       	and	r24, r24
     672:	39 f0       	breq	.+14     	; 0x682 <CAN_int_clear+0x12>
		mcp2515_bit_modify(MCP_CANINTF, interrupt_to_mask(CAN_interrupt), 0x00);	
     674:	0e 94 2a 03 	call	0x654	; 0x654 <interrupt_to_mask>
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	68 2f       	mov	r22, r24
     67c:	8c e2       	ldi	r24, 0x2C	; 44
     67e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <mcp2515_bit_modify>
     682:	08 95       	ret

00000684 <mcp2515_read>:
#include "mcp2515.h"
#include "spi.h"
#include "MCP2515_register.h"


uint8_t mcp2515_read(uint8_t addr){
     684:	cf 93       	push	r28
     686:	c8 2f       	mov	r28, r24
	clear_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Activates CAN controller
     688:	c4 98       	cbi	0x18, 4	; 24
	SPI_communicate(MCP_READ);		//Sends instruction
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	SPI_communicate(addr);			//Sends the address
     690:	8c 2f       	mov	r24, r28
     692:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	uint8_t val = SPI_communicate(0x00);	//Receives data
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	set_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Deactivates.
     69c:	c4 9a       	sbi	0x18, 4	; 24
	return val;
}
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <mcp2515_write>:

void mcp2515_write(uint8_t addr, uint8_t data){
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	d8 2f       	mov	r29, r24
     6a8:	c6 2f       	mov	r28, r22
	clear_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Activates CAN controller
     6aa:	c4 98       	cbi	0x18, 4	; 24
	SPI_communicate(MCP_WRITE);		//Sends instruction
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	SPI_communicate(addr);			//Sends the address
     6b2:	8d 2f       	mov	r24, r29
     6b4:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	SPI_communicate(data);			//Sends data
     6b8:	8c 2f       	mov	r24, r28
     6ba:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	set_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Deactivates.
     6be:	c4 9a       	sbi	0x18, 4	; 24
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <mcp2515_read_status>:

uint8_t mcp2515_read_status(){
	clear_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Activates CAN controller
     6c6:	c4 98       	cbi	0x18, 4	; 24
	SPI_communicate(MCP_READ_STATUS);	//Sends instruction
     6c8:	80 ea       	ldi	r24, 0xA0	; 160
     6ca:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	uint8_t val = SPI_communicate(0x00);
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	set_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Deactivates
     6d4:	c4 9a       	sbi	0x18, 4	; 24
	return val;
}
     6d6:	08 95       	ret

000006d8 <mcp2515_request_to_send>:


void mcp2515_request_to_send(uint8_t reg){
	clear_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Activates CAN controller
     6d8:	c4 98       	cbi	0x18, 4	; 24
	SPI_communicate(reg);			//Sends instruction
     6da:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	set_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Deactivates
     6de:	c4 9a       	sbi	0x18, 4	; 24
     6e0:	08 95       	ret

000006e2 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(uint8_t addr, uint8_t mask, uint8_t data){
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	18 2f       	mov	r17, r24
     6ea:	d6 2f       	mov	r29, r22
     6ec:	c4 2f       	mov	r28, r20
	clear_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Activates CAN controller
     6ee:	c4 98       	cbi	0x18, 4	; 24
	SPI_communicate(MCP_BITMOD);		//Sends instruction
     6f0:	85 e0       	ldi	r24, 0x05	; 5
     6f2:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	SPI_communicate(addr);
     6f6:	81 2f       	mov	r24, r17
     6f8:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	SPI_communicate(mask);
     6fc:	8d 2f       	mov	r24, r29
     6fe:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	SPI_communicate(data);
     702:	8c 2f       	mov	r24, r28
     704:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	set_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Deactivates
     708:	c4 9a       	sbi	0x18, 4	; 24
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	08 95       	ret

00000712 <mcp2515_reset>:

void mcp2515_reset(){
	clear_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Activates CAN controller
     712:	c4 98       	cbi	0x18, 4	; 24
	SPI_communicate(MCP_RESET);		//Sends instruction
     714:	80 ec       	ldi	r24, 0xC0	; 192
     716:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_communicate>
	set_bit(SLAVE_CS_REG, SLAVE_CS_BIT);	//Deactivates
     71a:	c4 9a       	sbi	0x18, 4	; 24
     71c:	08 95       	ret

0000071e <SPI_init>:

#include "spi.h"

void SPI_init(void){
	/* Set MOSI and SCK output, all others input */
	set_bit(MASTER_OUT_DDR, MASTER_OUT_BIT);
     71e:	bd 9a       	sbi	0x17, 5	; 23
	clear_bit(MASTER_INN_DDR, MASTER_INN_BIT);
     720:	be 98       	cbi	0x17, 6	; 23
	set_bit(SLAVE_CLK_DDR, SLAVE_CLK_BIT);
     722:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(SLAVE_CS_DDR, SLAVE_CS_BIT);
     724:	bc 9a       	sbi	0x17, 4	; 23
	
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     726:	8d b1       	in	r24, 0x0d	; 13
     728:	81 65       	ori	r24, 0x51	; 81
     72a:	8d b9       	out	0x0d, r24	; 13
     72c:	08 95       	ret

0000072e <SPI_communicate>:
	//SPIE, interrupt enable
}

char SPI_communicate(char cData){
	/* Start transmission */
	SPDR = cData;
     72e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while( !(SPSR&(1<<SPIF)) );
     730:	77 9b       	sbis	0x0e, 7	; 14
     732:	fe cf       	rjmp	.-4      	; 0x730 <SPI_communicate+0x2>
	return SPDR;
     734:	8f b1       	in	r24, 0x0f	; 15
}
     736:	08 95       	ret

00000738 <USART_transmit>:
	fdevopen(&USART_transmit, &USART_receive);
}

void USART_transmit(unsigned char data){
	//Wait for empty transmit buffer
	while( !(UCSR0A&(1<<UDRE0)) );
     738:	5d 9b       	sbis	0x0b, 5	; 11
     73a:	fe cf       	rjmp	.-4      	; 0x738 <USART_transmit>

	//Put data into buffer, sends the data
	UDR0 = data;
     73c:	8c b9       	out	0x0c, r24	; 12
     73e:	08 95       	ret

00000740 <USART_receive>:
}

unsigned char USART_receive(void){
	//Wait for data to be received
	while( !(UCSR0A&(1<<RXC0)) );
     740:	5f 9b       	sbis	0x0b, 7	; 11
     742:	fe cf       	rjmp	.-4      	; 0x740 <USART_receive>
	//Get and return received data from buffer
	return UDR0;
     744:	8c b1       	in	r24, 0x0c	; 12
}
     746:	08 95       	ret

00000748 <USART_init>:
#include "UsartDriver.h"

void USART_init(){

 	//Set baud rate
	UBRR0H = (unsigned char)(UBRR>>8);
     748:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     74a:	8f e0       	ldi	r24, 0x0F	; 15
     74c:	89 b9       	out	0x09, r24	; 9
	 	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     74e:	88 e1       	ldi	r24, 0x18	; 24
     750:	8a b9       	out	0x0a, r24	; 10
		//RXEN: Activates USART receiver
		//TXEN: Activates USART transmitter
		
	
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     752:	8e e8       	ldi	r24, 0x8E	; 142
     754:	80 bd       	out	0x20, r24	; 32
		//URSEL: Writes to UCSRC instead of UBRRH, when 1.
		//USBS0: Number of stop bits, 0->1bit, 1->2bit
		//UCZ0/1/2: Character size 011->8bit. 
	//Enable printf;
	fdevopen(&USART_transmit, &USART_receive);
     756:	60 ea       	ldi	r22, 0xA0	; 160
     758:	73 e0       	ldi	r23, 0x03	; 3
     75a:	8c e9       	ldi	r24, 0x9C	; 156
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <fdevopen>
     762:	08 95       	ret

00000764 <ADC_init>:
 */ 

#include "ADC_Driver.h"

void ADC_init(){
	clear_bit(INTR_DDR, INTR_BIT);
     764:	b9 98       	cbi	0x17, 1	; 23
     766:	08 95       	ret

00000768 <ADC_convert>:
}

//Channel 0-3. (tilsvarer 1-4 i datablad, 0indekserte dem)
uint8_t ADC_convert(char channel){
     768:	84 30       	cpi	r24, 0x04	; 4
     76a:	08 f0       	brcs	.+2      	; 0x76e <ADC_convert+0x6>
     76c:	83 e0       	ldi	r24, 0x03	; 3
	//ch1 = 0100, ch2 = 0101, ch3 = 0110, ch4 = 0111, dette er lsb
	if(channel > 3) channel = 3;
	else if(channel< 0) channel = 0;
	
	*ADC_MEMORY = ADC_SINGLE_ENDED | channel;
     76e:	84 60       	ori	r24, 0x04	; 4
     770:	80 93 00 14 	sts	0x1400, r24
	
	//Venter på svar
	while(read_bit(INTR_PIN, INTR_BIT));
     774:	b1 99       	sbic	0x16, 1	; 22
     776:	fe cf       	rjmp	.-4      	; 0x774 <ADC_convert+0xc>
	
	return *ADC_MEMORY;
     778:	80 91 00 14 	lds	r24, 0x1400
	
}
     77c:	08 95       	ret

0000077e <controllers_init>:
 */ 

#include "Controllers.h"

void controllers_init(){
	clear_bit(BTN_R_DDR, BTN_R_BIT);
     77e:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(BTN_L_DDR, BTN_L_BIT);
     780:	bb 98       	cbi	0x17, 3	; 23
     782:	08 95       	ret

00000784 <joystick_calibrate>:
}


void joystick_calibrate(JoyStick* jsX, JoyStick* jsY){
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	8c 01       	movw	r16, r24
     78e:	eb 01       	movw	r28, r22
	jsX->rest = ADC_convert(CHANNEL_X);
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	0e 94 b4 03 	call	0x768	; 0x768 <ADC_convert>
     796:	f8 01       	movw	r30, r16
     798:	84 83       	std	Z+4, r24	; 0x04
	jsY->rest = ADC_convert(CHANNEL_Y);
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 b4 03 	call	0x768	; 0x768 <ADC_convert>
     7a0:	8c 83       	std	Y+4, r24	; 0x04
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	08 95       	ret

000007ac <joystick_user_calibrate>:

uint8_t joystick_user_calibrate(Controls* control){
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	ec 01       	movw	r28, r24
	OLED_clear();
     7b2:	0e 94 2c 06 	call	0xc58	; 0xc58 <OLED_clear>
	OLED_print("Calibrating JS: ",0,0);
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	89 e3       	ldi	r24, 0x39	; 57
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	OLED_print("Press R to      ",2,0);
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	62 e0       	ldi	r22, 0x02	; 2
     7c6:	8a e4       	ldi	r24, 0x4A	; 74
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	OLED_print("calibrate       ",3,0);
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	63 e0       	ldi	r22, 0x03	; 3
     7d2:	8b e5       	ldi	r24, 0x5B	; 91
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	
	if(control->btnR.edge){
     7da:	8c 81       	ldd	r24, Y+4	; 0x04
     7dc:	88 23       	and	r24, r24
     7de:	49 f0       	breq	.+18     	; 0x7f2 <joystick_user_calibrate+0x46>
		joystick_calibrate(&control->jsX,&control->jsY);		
     7e0:	be 01       	movw	r22, r28
     7e2:	6f 5e       	subi	r22, 0xEF	; 239
     7e4:	7f 4f       	sbci	r23, 0xFF	; 255
     7e6:	ce 01       	movw	r24, r28
     7e8:	0c 96       	adiw	r24, 0x0c	; 12
     7ea:	0e 94 c2 03 	call	0x784	; 0x784 <joystick_calibrate>
		return 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <joystick_user_calibrate+0x48>
	}
	return 0;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
	
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <joystick_descreet>:
	jsY->descreet = yDescTemp;
	
}

int8_t joystick_descreet(int8_t val){
	if(val > SLACK_JS){
     7fa:	83 33       	cpi	r24, 0x33	; 51
     7fc:	3c f4       	brge	.+14     	; 0x80c <joystick_descreet+0x12>
		return 1;
	}
	else if(val < -SLACK_JS){
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	8e 3c       	cpi	r24, 0xCE	; 206
     802:	0c f0       	brlt	.+2      	; 0x806 <joystick_descreet+0xc>
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	89 2f       	mov	r24, r25
     808:	81 95       	neg	r24
     80a:	08 95       	ret
	
}

int8_t joystick_descreet(int8_t val){
	if(val > SLACK_JS){
		return 1;
     80c:	81 e0       	ldi	r24, 0x01	; 1
		return -1;
	}
	else{
		return 0;
	}
}
     80e:	08 95       	ret

00000810 <joystick_update>:
	}
	return 0;
	
}

void joystick_update(JoyStick* jsX, JoyStick* jsY){
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ec 01       	movw	r28, r24
     81c:	8b 01       	movw	r16, r22
	jsX->voltage = ADC_convert(CHANNEL_X);
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 b4 03 	call	0x768	; 0x768 <ADC_convert>
     824:	88 83       	st	Y, r24
	jsY->voltage = ADC_convert(CHANNEL_Y);
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0e 94 b4 03 	call	0x768	; 0x768 <ADC_convert>
     82c:	f8 01       	movw	r30, r16
     82e:	80 83       	st	Z, r24
	
	if(jsX->voltage <= jsX->rest){
     830:	48 81       	ld	r20, Y
     832:	2c 81       	ldd	r18, Y+4	; 0x04
     834:	24 17       	cp	r18, r20
     836:	88 f0       	brcs	.+34     	; 0x85a <joystick_update+0x4a>
		jsX->percent = (jsX->voltage - jsX->rest)*100/(jsX->rest-1);
     838:	62 2f       	mov	r22, r18
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	46 1b       	sub	r20, r22
     840:	57 0b       	sbc	r21, r23
     842:	24 e6       	ldi	r18, 0x64	; 100
     844:	24 9f       	mul	r18, r20
     846:	c0 01       	movw	r24, r0
     848:	25 9f       	mul	r18, r21
     84a:	90 0d       	add	r25, r0
     84c:	11 24       	eor	r1, r1
     84e:	61 50       	subi	r22, 0x01	; 1
     850:	71 09       	sbc	r23, r1
     852:	0e 94 ce 0c 	call	0x199c	; 0x199c <__divmodhi4>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	11 c0       	rjmp	.+34     	; 0x87c <joystick_update+0x6c>
	}
	else{
		jsX->percent = (jsX->voltage - jsX->rest)*100/(255-jsX->rest);
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	42 1b       	sub	r20, r18
     860:	53 0b       	sbc	r21, r19
     862:	64 e6       	ldi	r22, 0x64	; 100
     864:	64 9f       	mul	r22, r20
     866:	c0 01       	movw	r24, r0
     868:	65 9f       	mul	r22, r21
     86a:	90 0d       	add	r25, r0
     86c:	11 24       	eor	r1, r1
     86e:	6f ef       	ldi	r22, 0xFF	; 255
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	62 1b       	sub	r22, r18
     874:	73 0b       	sbc	r23, r19
     876:	0e 94 ce 0c 	call	0x199c	; 0x199c <__divmodhi4>
     87a:	69 83       	std	Y+1, r22	; 0x01
	}
	if(jsY->voltage <= jsY->rest){
     87c:	f8 01       	movw	r30, r16
     87e:	40 81       	ld	r20, Z
     880:	24 81       	ldd	r18, Z+4	; 0x04
     882:	24 17       	cp	r18, r20
     884:	88 f0       	brcs	.+34     	; 0x8a8 <joystick_update+0x98>
		jsY->percent = (jsY->voltage - jsY->rest)*100/(jsY->rest-1);
     886:	62 2f       	mov	r22, r18
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	46 1b       	sub	r20, r22
     88e:	57 0b       	sbc	r21, r23
     890:	24 e6       	ldi	r18, 0x64	; 100
     892:	24 9f       	mul	r18, r20
     894:	c0 01       	movw	r24, r0
     896:	25 9f       	mul	r18, r21
     898:	90 0d       	add	r25, r0
     89a:	11 24       	eor	r1, r1
     89c:	61 50       	subi	r22, 0x01	; 1
     89e:	71 09       	sbc	r23, r1
     8a0:	0e 94 ce 0c 	call	0x199c	; 0x199c <__divmodhi4>
     8a4:	61 83       	std	Z+1, r22	; 0x01
     8a6:	12 c0       	rjmp	.+36     	; 0x8cc <joystick_update+0xbc>
	}
	else{
		jsY->percent = (jsY->voltage - jsY->rest)*100/(255-jsY->rest);
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	42 1b       	sub	r20, r18
     8ae:	53 0b       	sbc	r21, r19
     8b0:	64 e6       	ldi	r22, 0x64	; 100
     8b2:	64 9f       	mul	r22, r20
     8b4:	c0 01       	movw	r24, r0
     8b6:	65 9f       	mul	r22, r21
     8b8:	90 0d       	add	r25, r0
     8ba:	11 24       	eor	r1, r1
     8bc:	6f ef       	ldi	r22, 0xFF	; 255
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	62 1b       	sub	r22, r18
     8c2:	73 0b       	sbc	r23, r19
     8c4:	0e 94 ce 0c 	call	0x199c	; 0x199c <__divmodhi4>
     8c8:	f8 01       	movw	r30, r16
     8ca:	61 83       	std	Z+1, r22	; 0x01
	}
	
	int8_t xDescTemp = joystick_descreet(jsX->percent);
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <joystick_descreet>
     8d2:	f8 2e       	mov	r15, r24
	int8_t yDescTemp = joystick_descreet(jsY->percent);
     8d4:	f8 01       	movw	r30, r16
     8d6:	81 81       	ldd	r24, Z+1	; 0x01
     8d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <joystick_descreet>
	
	if(xDescTemp != jsX->descreet){
     8dc:	9a 81       	ldd	r25, Y+2	; 0x02
     8de:	9f 15       	cp	r25, r15
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <joystick_update+0xd6>
		jsX->descreet_edge = xDescTemp;
     8e2:	fb 82       	std	Y+3, r15	; 0x03
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <joystick_update+0xd8>
	}
	else{
		jsX->descreet_edge = 0;
     8e6:	1b 82       	std	Y+3, r1	; 0x03
	}
	
	if(yDescTemp != jsY->descreet){
     8e8:	f8 01       	movw	r30, r16
     8ea:	92 81       	ldd	r25, Z+2	; 0x02
     8ec:	98 17       	cp	r25, r24
     8ee:	11 f0       	breq	.+4      	; 0x8f4 <joystick_update+0xe4>
		jsY->descreet_edge = yDescTemp;
     8f0:	83 83       	std	Z+3, r24	; 0x03
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <joystick_update+0xe8>
	}
	else{
		jsY->descreet_edge = 0;
     8f4:	f8 01       	movw	r30, r16
     8f6:	13 82       	std	Z+3, r1	; 0x03
	}
	
	jsX->descreet = xDescTemp;
     8f8:	fa 82       	std	Y+2, r15	; 0x02
	jsY->descreet = yDescTemp;
     8fa:	f8 01       	movw	r30, r16
     8fc:	82 83       	std	Z+2, r24	; 0x02
	
}
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	08 95       	ret

0000090a <slider_update>:
		return 0;
	}
}


void slider_update(Slider* slL, Slider* slR){
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	8c 01       	movw	r16, r24
     916:	eb 01       	movw	r28, r22
	uint8_t r_voltage = ADC_convert(CHANNEL_R_SLIDER);
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	0e 94 b4 03 	call	0x768	; 0x768 <ADC_convert>
     91e:	f8 2e       	mov	r15, r24
	uint8_t l_voltage = ADC_convert(CHANNEL_L_SLIDER);
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	0e 94 b4 03 	call	0x768	; 0x768 <ADC_convert>
	
	if(l_voltage < slL->voltage - SLACK_UPDATE_SLIDER  || l_voltage > slL->voltage + SLACK_UPDATE_SLIDER){
     926:	68 2f       	mov	r22, r24
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	f8 01       	movw	r30, r16
     92c:	20 81       	ld	r18, Z
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	a9 01       	movw	r20, r18
     932:	4b 50       	subi	r20, 0x0B	; 11
     934:	51 09       	sbc	r21, r1
     936:	64 17       	cp	r22, r20
     938:	75 07       	cpc	r23, r21
     93a:	2c f0       	brlt	.+10     	; 0x946 <slider_update+0x3c>
     93c:	25 5f       	subi	r18, 0xF5	; 245
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	26 17       	cp	r18, r22
     942:	37 07       	cpc	r19, r23
     944:	3c f5       	brge	.+78     	; 0x994 <slider_update+0x8a>
		slL->voltage = l_voltage;
     946:	f8 01       	movw	r30, r16
     948:	80 83       	st	Z, r24
		slL->percent = (2*slL->voltage/2.55) - 100;
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	88 27       	eor	r24, r24
     950:	77 fd       	sbrc	r23, 7
     952:	80 95       	com	r24
     954:	98 2f       	mov	r25, r24
     956:	0e 94 42 0c 	call	0x1884	; 0x1884 <__floatsisf>
     95a:	23 e3       	ldi	r18, 0x33	; 51
     95c:	33 e3       	ldi	r19, 0x33	; 51
     95e:	43 e2       	ldi	r20, 0x23	; 35
     960:	50 e4       	ldi	r21, 0x40	; 64
     962:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divsf3>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	48 ec       	ldi	r20, 0xC8	; 200
     96c:	52 e4       	ldi	r21, 0x42	; 66
     96e:	0e 94 42 0b 	call	0x1684	; 0x1684 <__subsf3>
     972:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fixsfsi>
     976:	f8 01       	movw	r30, r16
     978:	61 83       	std	Z+1, r22	; 0x01
		if(slL->percent < 50-SLACK_SLIDER){
     97a:	63 32       	cpi	r22, 0x23	; 35
     97c:	1c f4       	brge	.+6      	; 0x984 <slider_update+0x7a>
			slL->descreet = -1;
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	82 83       	std	Z+2, r24	; 0x02
     982:	08 c0       	rjmp	.+16     	; 0x994 <slider_update+0x8a>
		}
		else if(slL->percent > 50 + SLACK_SLIDER){
     984:	62 34       	cpi	r22, 0x42	; 66
     986:	24 f0       	brlt	.+8      	; 0x990 <slider_update+0x86>
			slL->descreet = + 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	f8 01       	movw	r30, r16
     98c:	82 83       	std	Z+2, r24	; 0x02
     98e:	02 c0       	rjmp	.+4      	; 0x994 <slider_update+0x8a>
		}
		else{
			slL->descreet = 0;
     990:	f8 01       	movw	r30, r16
     992:	12 82       	std	Z+2, r1	; 0x02
		};
	}
	if(r_voltage < slR->voltage - SLACK_UPDATE_SLIDER  || r_voltage > slR->voltage + SLACK_UPDATE_SLIDER){
     994:	6f 2d       	mov	r22, r15
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	88 81       	ld	r24, Y
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	9c 01       	movw	r18, r24
     99e:	2b 50       	subi	r18, 0x0B	; 11
     9a0:	31 09       	sbc	r19, r1
     9a2:	62 17       	cp	r22, r18
     9a4:	73 07       	cpc	r23, r19
     9a6:	24 f0       	brlt	.+8      	; 0x9b0 <slider_update+0xa6>
     9a8:	0b 96       	adiw	r24, 0x0b	; 11
     9aa:	86 17       	cp	r24, r22
     9ac:	97 07       	cpc	r25, r23
     9ae:	1c f5       	brge	.+70     	; 0x9f6 <slider_update+0xec>
		slR->voltage = r_voltage;
     9b0:	f8 82       	st	Y, r15
		slR->percent = (2*slR->voltage/2.55) - 100;
     9b2:	66 0f       	add	r22, r22
     9b4:	77 1f       	adc	r23, r23
     9b6:	88 27       	eor	r24, r24
     9b8:	77 fd       	sbrc	r23, 7
     9ba:	80 95       	com	r24
     9bc:	98 2f       	mov	r25, r24
     9be:	0e 94 42 0c 	call	0x1884	; 0x1884 <__floatsisf>
     9c2:	23 e3       	ldi	r18, 0x33	; 51
     9c4:	33 e3       	ldi	r19, 0x33	; 51
     9c6:	43 e2       	ldi	r20, 0x23	; 35
     9c8:	50 e4       	ldi	r21, 0x40	; 64
     9ca:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divsf3>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	48 ec       	ldi	r20, 0xC8	; 200
     9d4:	52 e4       	ldi	r21, 0x42	; 66
     9d6:	0e 94 42 0b 	call	0x1684	; 0x1684 <__subsf3>
     9da:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fixsfsi>
     9de:	69 83       	std	Y+1, r22	; 0x01
		if(slR->percent < 50 - SLACK_SLIDER){
     9e0:	63 32       	cpi	r22, 0x23	; 35
     9e2:	1c f4       	brge	.+6      	; 0x9ea <slider_update+0xe0>
			slR->descreet =	-1;
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	8a 83       	std	Y+2, r24	; 0x02
     9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <slider_update+0xec>
		}
		else if(slR->percent > 50 + SLACK_SLIDER){
     9ea:	62 34       	cpi	r22, 0x42	; 66
     9ec:	1c f0       	brlt	.+6      	; 0x9f4 <slider_update+0xea>
			slR->descreet = + 1;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	8a 83       	std	Y+2, r24	; 0x02
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <slider_update+0xec>
		}
		else{
			slR->descreet = 0;
     9f4:	1a 82       	std	Y+2, r1	; 0x02
		};
	}
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	08 95       	ret

00000a02 <read_button>:

void read_button(Button* btnL, Button* btnR){	
     a02:	dc 01       	movw	r26, r24
     a04:	fb 01       	movw	r30, r22
	btnL->edge = 0;
     a06:	11 96       	adiw	r26, 0x01	; 1
     a08:	1c 92       	st	X, r1
     a0a:	11 97       	sbiw	r26, 0x01	; 1
	btnR->edge = 0;
     a0c:	11 82       	std	Z+1, r1	; 0x01
	
	if (BTN_R != btnL->state && btnL->state == 0){
     a0e:	96 b3       	in	r25, 0x16	; 22
     a10:	8c 91       	ld	r24, X
     a12:	94 70       	andi	r25, 0x04	; 4
     a14:	89 17       	cp	r24, r25
     a16:	69 f0       	breq	.+26     	; 0xa32 <read_button+0x30>
     a18:	81 11       	cpse	r24, r1
     a1a:	0b c0       	rjmp	.+22     	; 0xa32 <read_button+0x30>
		btnL->edge = 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	11 96       	adiw	r26, 0x01	; 1
     a20:	8c 93       	st	X, r24
     a22:	11 97       	sbiw	r26, 0x01	; 1
		btnL->pressCount++;
     a24:	12 96       	adiw	r26, 0x02	; 2
     a26:	8c 91       	ld	r24, X
     a28:	12 97       	sbiw	r26, 0x02	; 2
     a2a:	8f 5f       	subi	r24, 0xFF	; 255
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	8c 93       	st	X, r24
     a30:	12 97       	sbiw	r26, 0x02	; 2
	}
	if (BTN_L != btnR->state && btnR->state == 0){
     a32:	96 b3       	in	r25, 0x16	; 22
     a34:	80 81       	ld	r24, Z
     a36:	98 70       	andi	r25, 0x08	; 8
     a38:	98 17       	cp	r25, r24
     a3a:	39 f0       	breq	.+14     	; 0xa4a <read_button+0x48>
     a3c:	81 11       	cpse	r24, r1
     a3e:	05 c0       	rjmp	.+10     	; 0xa4a <read_button+0x48>
		btnR->edge = 1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	81 83       	std	Z+1, r24	; 0x01
		btnR->pressCount++;
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	8f 5f       	subi	r24, 0xFF	; 255
     a48:	82 83       	std	Z+2, r24	; 0x02
	}
	
	btnL->state = BTN_R;
     a4a:	86 b3       	in	r24, 0x16	; 22
     a4c:	84 70       	andi	r24, 0x04	; 4
     a4e:	8c 93       	st	X, r24
	btnR->state = BTN_L;
     a50:	86 b3       	in	r24, 0x16	; 22
     a52:	88 70       	andi	r24, 0x08	; 8
     a54:	80 83       	st	Z, r24
     a56:	08 95       	ret

00000a58 <controllers_update>:
}

void controllers_update(Controls* controls){
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
		joystick_update(&controls->jsX, &controls->jsY);
     a5e:	bc 01       	movw	r22, r24
     a60:	6f 5e       	subi	r22, 0xEF	; 239
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	0c 96       	adiw	r24, 0x0c	; 12
     a66:	0e 94 08 04 	call	0x810	; 0x810 <joystick_update>
		slider_update(&controls->sliderL, &controls->sliderR);
     a6a:	be 01       	movw	r22, r28
     a6c:	67 5f       	subi	r22, 0xF7	; 247
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	ce 01       	movw	r24, r28
     a72:	06 96       	adiw	r24, 0x06	; 6
     a74:	0e 94 85 04 	call	0x90a	; 0x90a <slider_update>
		read_button(&controls->btnL, &controls->btnR);
     a78:	be 01       	movw	r22, r28
     a7a:	6d 5f       	subi	r22, 0xFD	; 253
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	ce 01       	movw	r24, r28
     a80:	0e 94 01 05 	call	0xa02	; 0xa02 <read_button>
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <SRAM_init>:
 */ 

#include "external_SRAM.h"

void SRAM_init(void){
	set_bit(MCUCR, SRE);	//External ram enable
     a8a:	85 b7       	in	r24, 0x35	; 53
     a8c:	80 68       	ori	r24, 0x80	; 128
     a8e:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);	//100 -> release pc7-pc4 from memory operations, for use in jtag.
     a90:	80 b7       	in	r24, 0x30	; 48
     a92:	80 62       	ori	r24, 0x20	; 32
     a94:	80 bf       	out	0x30, r24	; 48
     a96:	08 95       	ret

00000a98 <OLED_init>:

//Fra minnet 1C00 til 1FFF

void OLED_init(){
	/*Seting up the OLED*/
	OLED_CONTROL = 0xae;	 //Display off (0xaf == on)
     a98:	e0 e0       	ldi	r30, 0x00	; 0
     a9a:	f0 e1       	ldi	r31, 0x10	; 16
     a9c:	8e ea       	ldi	r24, 0xAE	; 174
     a9e:	80 83       	st	Z, r24
	
	OLED_CONTROL = 0xa1;    //segment remap (Writes left->right)
     aa0:	81 ea       	ldi	r24, 0xA1	; 161
     aa2:	80 83       	st	Z, r24
	
	OLED_CONTROL = 0xda;	//common pads hardware: alternative
     aa4:	8a ed       	ldi	r24, 0xDA	; 218
     aa6:	80 83       	st	Z, r24
	OLED_CONTROL = 0x12;	//0x32 = 0b11, 0x12 = 0b01, 0x02 = 0b00, 0x22 = 0b10
     aa8:	82 e1       	ldi	r24, 0x12	; 18
     aaa:	80 83       	st	Z, r24
	
	OLED_CONTROL = 0xc8;    //common output scan direction:com63~com0 (0xc0: writes upwards, 0xc8 writes down)
     aac:	88 ec       	ldi	r24, 0xC8	; 200
     aae:	80 83       	st	Z, r24
	
	OLED_CONTROL = 0xa8;    //multiplex ration mode:
     ab0:	88 ea       	ldi	r24, 0xA8	; 168
     ab2:	80 83       	st	Z, r24
	OLED_CONTROL = 0x3f;	//63
     ab4:	8f e3       	ldi	r24, 0x3F	; 63
     ab6:	80 83       	st	Z, r24
	
	OLED_CONTROL = 0xd5;    //display divide ratio/osc. freq. mode
     ab8:	85 ed       	ldi	r24, 0xD5	; 213
     aba:	80 83       	st	Z, r24
	OLED_CONTROL = 0x80;
     abc:	80 e8       	ldi	r24, 0x80	; 128
     abe:	80 83       	st	Z, r24
	
	OLED_CONTROL = 0x81;	//Change contrast to:
     ac0:	81 e8       	ldi	r24, 0x81	; 129
     ac2:	80 83       	st	Z, r24
	OLED_CONTROL = 0x50;	//This
     ac4:	80 e5       	ldi	r24, 0x50	; 80
     ac6:	80 83       	st	Z, r24
		
	OLED_CONTROL = 0xd9;    //Set pre-charge period
     ac8:	89 ed       	ldi	r24, 0xD9	; 217
     aca:	80 83       	st	Z, r24
	OLED_CONTROL = 0x21;
     acc:	91 e2       	ldi	r25, 0x21	; 33
     ace:	90 83       	st	Z, r25
	
	OLED_CONTROL = 0x20;	//Set Memory Addressing Mode
     ad0:	80 e2       	ldi	r24, 0x20	; 32
     ad2:	80 83       	st	Z, r24
	OLED_CONTROL = 0x00;	//0x00: Horizontal adressing mode, 0x01 Vertical, 0x02 Page, 0x03 Invalid
     ad4:	10 82       	st	Z, r1
	
	OLED_CONTROL = 0xdb;    //VCOM deselect level mode
     ad6:	2b ed       	ldi	r18, 0xDB	; 219
     ad8:	20 83       	st	Z, r18
	OLED_CONTROL = 0x30;
     ada:	20 e3       	ldi	r18, 0x30	; 48
     adc:	20 83       	st	Z, r18
	
	OLED_CONTROL = 0xad;    //Master configuration
     ade:	2d ea       	ldi	r18, 0xAD	; 173
     ae0:	20 83       	st	Z, r18
	OLED_CONTROL = 0x00;
     ae2:	10 82       	st	Z, r1
	
	OLED_CONTROL = 0xa4;    //Out follows RAM content (a5 = all leds are emitting)
     ae4:	24 ea       	ldi	r18, 0xA4	; 164
     ae6:	20 83       	st	Z, r18
	
	OLED_CONTROL = 0xa6;    //set normal display (a7 = invert)
     ae8:	26 ea       	ldi	r18, 0xA6	; 166
     aea:	20 83       	st	Z, r18
	
	
	OLED_CONTROL = 0x21;	//Start and stop location on line
     aec:	90 83       	st	Z, r25
	OLED_CONTROL = 0x00;	//From start
     aee:	10 82       	st	Z, r1
	OLED_CONTROL = 0xFF;	//Till end
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	90 83       	st	Z, r25
	
	OLED_CONTROL = 0x22;	//Start and stop line
     af4:	22 e2       	ldi	r18, 0x22	; 34
     af6:	20 83       	st	Z, r18
	OLED_CONTROL = 0x00;	//From start
     af8:	10 82       	st	Z, r1
	OLED_CONTROL = 0xFF;	//TO stop
     afa:	90 83       	st	Z, r25
	
	
	OLED_CONTROL = 0x40;	//Last hexsign decides how much the tekst is moved up or down. One value per bit up.
     afc:	90 e4       	ldi	r25, 0x40	; 64
     afe:	90 83       	st	Z, r25
		
	OLED_CONTROL = 0x20;	//Set Memory Addressing Mode
     b00:	80 83       	st	Z, r24
	OLED_CONTROL = 0x00;	//0x00: Horizontal adressing mode, 0x01 Vertical, 0x02 Page, 0x03 Invalid
     b02:	10 82       	st	Z, r1
	
	OLED_CONTROL = 0xB0;	//Starts at first line
     b04:	80 eb       	ldi	r24, 0xB0	; 176
     b06:	80 83       	st	Z, r24
	OLED_CONTROL = 0x00;	//LSB of startpoint
     b08:	10 82       	st	Z, r1
	OLED_CONTROL = 0x10;	//MSB of startpoint (Can change last hex sign from 0 to F)
     b0a:	80 e1       	ldi	r24, 0x10	; 16
     b0c:	80 83       	st	Z, r24
	
//  	OLED_clear();
// 	OLED_update_screen();
 	
	OLED_CONTROL = 0xaf;    // display on
     b0e:	8f ea       	ldi	r24, 0xAF	; 175
     b10:	80 83       	st	Z, r24
     b12:	08 95       	ret

00000b14 <OLED_goto_line>:
	OLED_CONTROL = 0xB0;	//Starts at first line
	OLED_CONTROL = 0x00;	//LSB of startpoint
	OLED_CONTROL = 0x10;	//MSB of startpoint (Can change last hex sign from 0 to F)
}

void OLED_goto_line(uint8_t line){
     b14:	80 31       	cpi	r24, 0x10	; 16
     b16:	08 f0       	brcs	.+2      	; 0xb1a <OLED_goto_line+0x6>
     b18:	8f e0       	ldi	r24, 0x0F	; 15
	if(line > 0xF) line = 0xF;
	OLED_CONTROL = 0xB0 | (line%8);	//Starts at specified line
     b1a:	87 70       	andi	r24, 0x07	; 7
     b1c:	80 6b       	ori	r24, 0xB0	; 176
     b1e:	e0 e0       	ldi	r30, 0x00	; 0
     b20:	f0 e1       	ldi	r31, 0x10	; 16
     b22:	80 83       	st	Z, r24
	OLED_CONTROL = 0x00;			//LSB of startpoint
     b24:	10 82       	st	Z, r1
	OLED_CONTROL = 0x10;			//MSB of startpoint (Can change last hex sign from 0 to F)
     b26:	80 e1       	ldi	r24, 0x10	; 16
     b28:	80 83       	st	Z, r24
     b2a:	08 95       	ret

00000b2c <OLED_print_char>:
}


void OLED_print_char(char ch, uint8_t line, uint8_t loc){
	for(uint8_t j = 0; j<8; ++j){
		OLED_MEM_LINE_LOC(line, loc, j) = pgm_read_byte(&font[ch-asciiOffset][j]);
     b2c:	a6 2f       	mov	r26, r22
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	d8 96       	adiw	r26, 0x38	; 56
     b32:	a2 95       	swap	r26
     b34:	b2 95       	swap	r27
     b36:	b0 7f       	andi	r27, 0xF0	; 240
     b38:	ba 27       	eor	r27, r26
     b3a:	a0 7f       	andi	r26, 0xF0	; 240
     b3c:	ba 27       	eor	r27, r26
     b3e:	a4 0f       	add	r26, r20
     b40:	b1 1d       	adc	r27, r1
     b42:	aa 0f       	add	r26, r26
     b44:	bb 1f       	adc	r27, r27
     b46:	aa 0f       	add	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	aa 0f       	add	r26, r26
     b4c:	bb 1f       	adc	r27, r27
     b4e:	28 e0       	ldi	r18, 0x08	; 8
     b50:	82 9f       	mul	r24, r18
     b52:	c0 01       	movw	r24, r0
     b54:	11 24       	eor	r1, r1
     b56:	8a 1b       	sub	r24, r26
     b58:	9b 0b       	sbc	r25, r27
	}
}


void OLED_print_char(char ch, uint8_t line, uint8_t loc){
	for(uint8_t j = 0; j<8; ++j){
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	82 58       	subi	r24, 0x82	; 130
     b5e:	90 40       	sbci	r25, 0x00	; 0
     b60:	fc 01       	movw	r30, r24
     b62:	ea 0f       	add	r30, r26
     b64:	fb 1f       	adc	r31, r27
		OLED_MEM_LINE_LOC(line, loc, j) = pgm_read_byte(&font[ch-asciiOffset][j]);
     b66:	e4 91       	lpm	r30, Z
     b68:	ed 93       	st	X+, r30
	}
}


void OLED_print_char(char ch, uint8_t line, uint8_t loc){
	for(uint8_t j = 0; j<8; ++j){
     b6a:	2f 5f       	subi	r18, 0xFF	; 255
     b6c:	28 30       	cpi	r18, 0x08	; 8
     b6e:	c1 f7       	brne	.-16     	; 0xb60 <OLED_print_char+0x34>
		OLED_MEM_LINE_LOC(line, loc, j) = pgm_read_byte(&font[ch-asciiOffset][j]);
	}
}
     b70:	08 95       	ret

00000b72 <OLED_print>:

/*Print a text string at specified line and byte starting point
Line can be from 0 to 8, starting point from 0 to 16
The character '-', followed by '<','V','^', '>' creates arrows
The character '-' followed by 's' creates a 2byte long space invader.*/
void OLED_print(char tekst[], uint8_t lineNr, uint8_t charStartPoint){
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	14 2f       	mov	r17, r20
     b80:	f6 2e       	mov	r15, r22
     b82:	87 e0       	ldi	r24, 0x07	; 7
     b84:	86 17       	cp	r24, r22
     b86:	20 f4       	brcc	.+8      	; 0xb90 <OLED_print+0x1e>
     b88:	0f 2e       	mov	r0, r31
     b8a:	f7 e0       	ldi	r31, 0x07	; 7
     b8c:	ff 2e       	mov	r15, r31
     b8e:	f0 2d       	mov	r31, r0
	if(lineNr > 7){
		lineNr = 7;
	}
	for(uint8_t textLoc = 0, printLoc = charStartPoint; tekst[textLoc] != '\0' && printLoc < 16; ++textLoc, ++printLoc){
     b90:	88 81       	ld	r24, Y
     b92:	88 23       	and	r24, r24
     b94:	09 f4       	brne	.+2      	; 0xb98 <OLED_print+0x26>
     b96:	5a c0       	rjmp	.+180    	; 0xc4c <OLED_print+0xda>
     b98:	10 31       	cpi	r17, 0x10	; 16
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <OLED_print+0x2c>
     b9c:	57 c0       	rjmp	.+174    	; 0xc4c <OLED_print+0xda>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	00 e0       	ldi	r16, 0x00	; 0
		if(tekst[textLoc] == '-'){
     ba4:	8d 32       	cpi	r24, 0x2D	; 45
     ba6:	09 f0       	breq	.+2      	; 0xbaa <OLED_print+0x38>
     ba8:	40 c0       	rjmp	.+128    	; 0xc2a <OLED_print+0xb8>
			switch(tekst[textLoc+1]){
     baa:	fe 01       	movw	r30, r28
     bac:	e2 0f       	add	r30, r18
     bae:	f3 1f       	adc	r31, r19
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	8e 35       	cpi	r24, 0x5E	; 94
     bb4:	59 f0       	breq	.+22     	; 0xbcc <OLED_print+0x5a>
     bb6:	28 f4       	brcc	.+10     	; 0xbc2 <OLED_print+0x50>
     bb8:	8c 33       	cpi	r24, 0x3C	; 60
     bba:	b1 f0       	breq	.+44     	; 0xbe8 <OLED_print+0x76>
     bbc:	8e 33       	cpi	r24, 0x3E	; 62
     bbe:	d9 f0       	breq	.+54     	; 0xbf6 <OLED_print+0x84>
     bc0:	2e c0       	rjmp	.+92     	; 0xc1e <OLED_print+0xac>
     bc2:	83 37       	cpi	r24, 0x73	; 115
     bc4:	f9 f0       	breq	.+62     	; 0xc04 <OLED_print+0x92>
     bc6:	86 37       	cpi	r24, 0x76	; 118
     bc8:	41 f0       	breq	.+16     	; 0xbda <OLED_print+0x68>
     bca:	29 c0       	rjmp	.+82     	; 0xc1e <OLED_print+0xac>
				case '^':
				OLED_print_char(127, lineNr, printLoc);
     bcc:	41 2f       	mov	r20, r17
     bce:	6f 2d       	mov	r22, r15
     bd0:	8f e7       	ldi	r24, 0x7F	; 127
     bd2:	0e 94 96 05 	call	0xb2c	; 0xb2c <OLED_print_char>
				textLoc++;
     bd6:	0f 5f       	subi	r16, 0xFF	; 255
				break;
     bd8:	2c c0       	rjmp	.+88     	; 0xc32 <OLED_print+0xc0>
				case 'v':
				OLED_print_char(128, lineNr, printLoc);
     bda:	41 2f       	mov	r20, r17
     bdc:	6f 2d       	mov	r22, r15
     bde:	80 e8       	ldi	r24, 0x80	; 128
     be0:	0e 94 96 05 	call	0xb2c	; 0xb2c <OLED_print_char>
				textLoc++;
     be4:	0f 5f       	subi	r16, 0xFF	; 255
				break;
     be6:	25 c0       	rjmp	.+74     	; 0xc32 <OLED_print+0xc0>
				case '<':
				OLED_print_char(129, lineNr, printLoc);
     be8:	41 2f       	mov	r20, r17
     bea:	6f 2d       	mov	r22, r15
     bec:	81 e8       	ldi	r24, 0x81	; 129
     bee:	0e 94 96 05 	call	0xb2c	; 0xb2c <OLED_print_char>
				textLoc++;
     bf2:	0f 5f       	subi	r16, 0xFF	; 255
				break;
     bf4:	1e c0       	rjmp	.+60     	; 0xc32 <OLED_print+0xc0>
				case '>':
				OLED_print_char(130, lineNr, printLoc);
     bf6:	41 2f       	mov	r20, r17
     bf8:	6f 2d       	mov	r22, r15
     bfa:	82 e8       	ldi	r24, 0x82	; 130
     bfc:	0e 94 96 05 	call	0xb2c	; 0xb2c <OLED_print_char>
				textLoc++;
     c00:	0f 5f       	subi	r16, 0xFF	; 255
				break;
     c02:	17 c0       	rjmp	.+46     	; 0xc32 <OLED_print+0xc0>
				case 's':
				OLED_print_char(131, lineNr, printLoc);
     c04:	41 2f       	mov	r20, r17
     c06:	6f 2d       	mov	r22, r15
     c08:	83 e8       	ldi	r24, 0x83	; 131
     c0a:	0e 94 96 05 	call	0xb2c	; 0xb2c <OLED_print_char>
				printLoc++;
     c0e:	1f 5f       	subi	r17, 0xFF	; 255
				textLoc++;
     c10:	0f 5f       	subi	r16, 0xFF	; 255
				OLED_print_char(132, lineNr, printLoc);
     c12:	41 2f       	mov	r20, r17
     c14:	6f 2d       	mov	r22, r15
     c16:	84 e8       	ldi	r24, 0x84	; 132
     c18:	0e 94 96 05 	call	0xb2c	; 0xb2c <OLED_print_char>
				break;
     c1c:	0a c0       	rjmp	.+20     	; 0xc32 <OLED_print+0xc0>
				default:
				OLED_print_char('-', lineNr, printLoc);
     c1e:	41 2f       	mov	r20, r17
     c20:	6f 2d       	mov	r22, r15
     c22:	8d e2       	ldi	r24, 0x2D	; 45
     c24:	0e 94 96 05 	call	0xb2c	; 0xb2c <OLED_print_char>
				break;
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <OLED_print+0xc0>
				
			}
		}
		else{
			OLED_print_char(tekst[textLoc], lineNr, printLoc);
     c2a:	41 2f       	mov	r20, r17
     c2c:	6f 2d       	mov	r22, r15
     c2e:	0e 94 96 05 	call	0xb2c	; 0xb2c <OLED_print_char>
The character '-' followed by 's' creates a 2byte long space invader.*/
void OLED_print(char tekst[], uint8_t lineNr, uint8_t charStartPoint){
	if(lineNr > 7){
		lineNr = 7;
	}
	for(uint8_t textLoc = 0, printLoc = charStartPoint; tekst[textLoc] != '\0' && printLoc < 16; ++textLoc, ++printLoc){
     c32:	0f 5f       	subi	r16, 0xFF	; 255
     c34:	1f 5f       	subi	r17, 0xFF	; 255
     c36:	20 2f       	mov	r18, r16
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	fe 01       	movw	r30, r28
     c3c:	e2 0f       	add	r30, r18
     c3e:	f3 1f       	adc	r31, r19
     c40:	80 81       	ld	r24, Z
     c42:	88 23       	and	r24, r24
     c44:	19 f0       	breq	.+6      	; 0xc4c <OLED_print+0xda>
     c46:	10 31       	cpi	r17, 0x10	; 16
     c48:	08 f4       	brcc	.+2      	; 0xc4c <OLED_print+0xda>
     c4a:	ac cf       	rjmp	.-168    	; 0xba4 <OLED_print+0x32>
		}
		else{
			OLED_print_char(tekst[textLoc], lineNr, printLoc);
		}
	}
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	08 95       	ret

00000c58 <OLED_clear>:
		OLED_MEM_LINE_LOC(line, loc, j) = pgm_read_byte(&font[ch-asciiOffset][j]);
	}
}

/*Sets the value 0 at all memory locations used by the OLED*/
void OLED_clear(){
     c58:	e0 e0       	ldi	r30, 0x00	; 0
     c5a:	fc e1       	ldi	r31, 0x1C	; 28
	volatile char* memBegin = OLED_MEM_BEGIN;
	for(uint16_t i = 0; i < 1024; ++i){
		*(memBegin+i) = 0x00;
     c5c:	11 92       	st	Z+, r1
}

/*Sets the value 0 at all memory locations used by the OLED*/
void OLED_clear(){
	volatile char* memBegin = OLED_MEM_BEGIN;
	for(uint16_t i = 0; i < 1024; ++i){
     c5e:	e1 15       	cp	r30, r1
     c60:	80 e2       	ldi	r24, 0x20	; 32
     c62:	f8 07       	cpc	r31, r24
     c64:	d9 f7       	brne	.-10     	; 0xc5c <OLED_clear+0x4>
		*(memBegin+i) = 0x00;
	}
}
     c66:	08 95       	ret

00000c68 <OLED_update_screen>:


void OLED_update_screen(){
	OLED_goto_line(0);
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_goto_line>
     c6e:	e0 e0       	ldi	r30, 0x00	; 0
     c70:	fc e1       	ldi	r31, 0x1C	; 28
	volatile char* memBegin = OLED_MEM_BEGIN;
	for(uint16_t i = 0; i < 1024; ++i){
		OLED_DATA = *(memBegin+i);
     c72:	a0 e0       	ldi	r26, 0x00	; 0
     c74:	b2 e1       	ldi	r27, 0x12	; 18
     c76:	81 91       	ld	r24, Z+
     c78:	8c 93       	st	X, r24


void OLED_update_screen(){
	OLED_goto_line(0);
	volatile char* memBegin = OLED_MEM_BEGIN;
	for(uint16_t i = 0; i < 1024; ++i){
     c7a:	e1 15       	cp	r30, r1
     c7c:	80 e2       	ldi	r24, 0x20	; 32
     c7e:	f8 07       	cpc	r31, r24
     c80:	d1 f7       	brne	.-12     	; 0xc76 <OLED_update_screen+0xe>
		OLED_DATA = *(memBegin+i);
	}
     c82:	08 95       	ret

00000c84 <EEPROM_read_gamestate>:
 * Created: 19.11.2015 14.43.32
 *  Author: sverre
 */ 

#include "EEPROM.h"
void EEPROM_read_gamestate(GameState* gameState){
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	ec 01       	movw	r28, r24
	gameState->record = eeprom_read_byte(EEPROM_HIGHSCOREBYTE);
     c8a:	80 e2       	ldi	r24, 0x20	; 32
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__eerd_byte_m162>
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9c 83       	std	Y+4, r25	; 0x04
     c96:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8_t i=0; i<NAME_LEN; ++i){
		gameState->name[i] = eeprom_read_byte(EEPROM_HIGHSCORENAME+i);
     c98:	81 e2       	ldi	r24, 0x21	; 33
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__eerd_byte_m162>
     ca0:	8d 83       	std	Y+5, r24	; 0x05
     ca2:	82 e2       	ldi	r24, 0x22	; 34
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__eerd_byte_m162>
     caa:	8e 83       	std	Y+6, r24	; 0x06
     cac:	83 e2       	ldi	r24, 0x23	; 35
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__eerd_byte_m162>
     cb4:	8f 83       	std	Y+7, r24	; 0x07
	}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <update_name>:
	}

	return 0;
}

void update_name(GameState* gameState, Controls* controls){
     cbc:	fc 01       	movw	r30, r24
	//Move cursor left/right
	if(controls->jsX.descreet_edge > 0){
     cbe:	db 01       	movw	r26, r22
     cc0:	1f 96       	adiw	r26, 0x0f	; 15
     cc2:	8c 91       	ld	r24, X
     cc4:	18 16       	cp	r1, r24
     cc6:	24 f4       	brge	.+8      	; 0xcd0 <update_name+0x14>
		gameState->namePointer++;
     cc8:	81 85       	ldd	r24, Z+9	; 0x09
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	81 87       	std	Z+9, r24	; 0x09
     cce:	05 c0       	rjmp	.+10     	; 0xcda <update_name+0x1e>
	}
	else if(controls->jsX.descreet_edge < 0){
     cd0:	88 23       	and	r24, r24
     cd2:	1c f4       	brge	.+6      	; 0xcda <update_name+0x1e>
		gameState->namePointer--;
     cd4:	81 85       	ldd	r24, Z+9	; 0x09
     cd6:	81 50       	subi	r24, 0x01	; 1
     cd8:	81 87       	std	Z+9, r24	; 0x09
	}
	
	//IF we moved past the last character
	if(gameState->namePointer == NAME_LEN){
     cda:	81 85       	ldd	r24, Z+9	; 0x09
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	19 f4       	brne	.+6      	; 0xce6 <update_name+0x2a>
		gameState->namePointer = asciiOffset;
     ce0:	80 e2       	ldi	r24, 0x20	; 32
     ce2:	81 87       	std	Z+9, r24	; 0x09
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <update_name+0x32>
	}
	//If we moved previous to the first, so that an overflow occurred
	else if(gameState->namePointer > NAME_LEN){
     ce6:	84 30       	cpi	r24, 0x04	; 4
     ce8:	10 f0       	brcs	.+4      	; 0xcee <update_name+0x32>
		gameState->namePointer = NAME_LEN-1;
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	81 87       	std	Z+9, r24	; 0x09
	}
	
	//Change to next/previous char
	if(controls->jsY.descreet_edge > 0){
     cee:	db 01       	movw	r26, r22
     cf0:	54 96       	adiw	r26, 0x14	; 20
     cf2:	8c 91       	ld	r24, X
     cf4:	18 16       	cp	r1, r24
     cf6:	5c f4       	brge	.+22     	; 0xd0e <update_name+0x52>
		gameState->name[gameState->namePointer]++;
     cf8:	81 85       	ldd	r24, Z+9	; 0x09
     cfa:	df 01       	movw	r26, r30
     cfc:	a8 0f       	add	r26, r24
     cfe:	b1 1d       	adc	r27, r1
     d00:	15 96       	adiw	r26, 0x05	; 5
     d02:	8c 91       	ld	r24, X
     d04:	15 97       	sbiw	r26, 0x05	; 5
     d06:	8f 5f       	subi	r24, 0xFF	; 255
     d08:	15 96       	adiw	r26, 0x05	; 5
     d0a:	8c 93       	st	X, r24
     d0c:	0c c0       	rjmp	.+24     	; 0xd26 <update_name+0x6a>
	}
	else if(controls->jsY.descreet_edge < 0){
     d0e:	88 23       	and	r24, r24
     d10:	54 f4       	brge	.+20     	; 0xd26 <update_name+0x6a>
		gameState->name[gameState->namePointer]--;
     d12:	81 85       	ldd	r24, Z+9	; 0x09
     d14:	df 01       	movw	r26, r30
     d16:	a8 0f       	add	r26, r24
     d18:	b1 1d       	adc	r27, r1
     d1a:	15 96       	adiw	r26, 0x05	; 5
     d1c:	8c 91       	ld	r24, X
     d1e:	15 97       	sbiw	r26, 0x05	; 5
     d20:	81 50       	subi	r24, 0x01	; 1
     d22:	15 96       	adiw	r26, 0x05	; 5
     d24:	8c 93       	st	X, r24
	}
	//If we moved past font length
	if(gameState->name[gameState->namePointer] >= FONT_SIZE+asciiOffset){
     d26:	81 85       	ldd	r24, Z+9	; 0x09
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	df 01       	movw	r26, r30
     d2c:	a8 0f       	add	r26, r24
     d2e:	b9 1f       	adc	r27, r25
     d30:	15 96       	adiw	r26, 0x05	; 5
     d32:	2c 91       	ld	r18, X
     d34:	15 97       	sbiw	r26, 0x05	; 5
     d36:	25 38       	cpi	r18, 0x85	; 133
     d38:	20 f0       	brcs	.+8      	; 0xd42 <update_name+0x86>
		gameState->name[gameState->namePointer] = asciiOffset+1;
     d3a:	fd 01       	movw	r30, r26
     d3c:	81 e2       	ldi	r24, 0x21	; 33
     d3e:	85 83       	std	Z+5, r24	; 0x05
     d40:	08 95       	ret
	}
	//If we moved previous to the first font sign
	else if(gameState->name[gameState->namePointer] <= asciiOffset){
     d42:	21 32       	cpi	r18, 0x21	; 33
     d44:	20 f4       	brcc	.+8      	; 0xd4e <update_name+0x92>
		gameState->name[gameState->namePointer] = FONT_SIZE+asciiOffset-1;
     d46:	e8 0f       	add	r30, r24
     d48:	f9 1f       	adc	r31, r25
     d4a:	84 e8       	ldi	r24, 0x84	; 132
     d4c:	85 83       	std	Z+5, r24	; 0x05
     d4e:	08 95       	ret

00000d50 <run_game>:
 * Created: 25.09.2015 16:51:47
 *  Author: sverrevr
 */

#include "Game.h"
uint8_t run_game(GameState* gameState, Controls* controls, CAN_message* msgMtor, CAN_message* msgGame){
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	2a 97       	sbiw	r28, 0x0a	; 10
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	7c 01       	movw	r14, r24
     d76:	6b 01       	movw	r12, r22
     d78:	8a 01       	movw	r16, r20
     d7a:	59 01       	movw	r10, r18
	//printf("WTF MOTHERFUCKER?");
	//TRANSMITTING
	//Clear the solenoid push bit if message has been sent.
	if (msgMtor->length == 0){
     d7c:	fa 01       	movw	r30, r20
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	81 11       	cpse	r24, r1
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <run_game+0x3a>
		msgMtor->data[CANMSG_BTNR_BYTE] &= ~(1 << CANMSG_BTNR_BIT);
     d84:	84 81       	ldd	r24, Z+4	; 0x04
     d86:	8e 7f       	andi	r24, 0xFE	; 254
     d88:	84 83       	std	Z+4, r24	; 0x04
	}
	//Set the solenoid push bit if edge detected.
	if (controls->btnR.edge){
     d8a:	f6 01       	movw	r30, r12
     d8c:	84 81       	ldd	r24, Z+4	; 0x04
     d8e:	88 23       	and	r24, r24
     d90:	21 f0       	breq	.+8      	; 0xd9a <run_game+0x4a>
		msgMtor->data[CANMSG_BTNR_BYTE] |= 1 << CANMSG_BTNR_BIT;
     d92:	f8 01       	movw	r30, r16
     d94:	84 81       	ldd	r24, Z+4	; 0x04
     d96:	81 60       	ori	r24, 0x01	; 1
     d98:	84 83       	std	Z+4, r24	; 0x04
	}
	//Send controller signals
	msgMtor->data[CANMSG_SLIDERR_BYTE] = controls->sliderR.percent;
     d9a:	f6 01       	movw	r30, r12
     d9c:	82 85       	ldd	r24, Z+10	; 0x0a
     d9e:	f8 01       	movw	r30, r16
     da0:	85 83       	std	Z+5, r24	; 0x05
	msgMtor->data[CANMSG_JSX_BYTE] = controls->jsX.percent;
     da2:	f6 01       	movw	r30, r12
     da4:	85 85       	ldd	r24, Z+13	; 0x0d
     da6:	f8 01       	movw	r30, r16
     da8:	86 83       	std	Z+6, r24	; 0x06
	msgMtor->length = CANMSG_MOTORSIGNAL_LEN;
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	82 83       	std	Z+2, r24	; 0x02

	//RECIEVEING
	
	if (msgGame->length && msgGame->data[CANMSG_PACKAGESPECIFIER] == PACKAGESPECIFIER_GAMESIGNAL){
     dae:	f5 01       	movw	r30, r10
     db0:	82 81       	ldd	r24, Z+2	; 0x02
     db2:	88 23       	and	r24, r24
     db4:	a1 f0       	breq	.+40     	; 0xdde <run_game+0x8e>
     db6:	83 81       	ldd	r24, Z+3	; 0x03
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	89 f4       	brne	.+34     	; 0xdde <run_game+0x8e>
		if (msgGame->data[GAMESIGNAL_SIGNAL_BYTE] == GAMESIGNAL_STOP){
     dbc:	84 81       	ldd	r24, Z+4	; 0x04
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <run_game+0x78>
			gameState->currentStatus = gameOver;
     dc2:	f7 01       	movw	r30, r14
     dc4:	82 87       	std	Z+10, r24	; 0x0a
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <run_game+0x8a>
		}
		else if (msgGame->data[GAMESIGNAL_SIGNAL_BYTE] == GAMESIGNAL_START && gameState->currentStatus == pause){
     dc8:	81 11       	cpse	r24, r1
     dca:	07 c0       	rjmp	.+14     	; 0xdda <run_game+0x8a>
     dcc:	f7 01       	movw	r30, r14
     dce:	82 85       	ldd	r24, Z+10	; 0x0a
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	19 f4       	brne	.+6      	; 0xdda <run_game+0x8a>
			gameState->currentStatus = play;
     dd4:	12 86       	std	Z+10, r1	; 0x0a
			gameState->points = 0;
     dd6:	12 82       	std	Z+2, r1	; 0x02
     dd8:	11 82       	std	Z+1, r1	; 0x01
		}
		msgGame->length = 0;
     dda:	f5 01       	movw	r30, r10
     ddc:	12 82       	std	Z+2, r1	; 0x02
	}

 	OLED_clear();
     dde:	0e 94 2c 06 	call	0xc58	; 0xc58 <OLED_clear>
	switch (gameState->currentStatus){
     de2:	f7 01       	movw	r30, r14
     de4:	82 85       	ldd	r24, Z+10	; 0x0a
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	09 f4       	brne	.+2      	; 0xdec <run_game+0x9c>
     dea:	83 c0       	rjmp	.+262    	; 0xef2 <run_game+0x1a2>
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <run_game+0xa0>
     dee:	40 c0       	rjmp	.+128    	; 0xe70 <run_game+0x120>
     df0:	82 30       	cpi	r24, 0x02	; 2
     df2:	a1 f0       	breq	.+40     	; 0xe1c <run_game+0xcc>
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	09 f0       	breq	.+2      	; 0xdfa <run_game+0xaa>
     df8:	1b c1       	rjmp	.+566    	; 0x1030 <run_game+0x2e0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dfa:	ff ef       	ldi	r31, 0xFF	; 255
     dfc:	2f e7       	ldi	r18, 0x7F	; 127
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	f1 50       	subi	r31, 0x01	; 1
     e02:	20 40       	sbci	r18, 0x00	; 0
     e04:	80 40       	sbci	r24, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <run_game+0xb0>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <run_game+0xba>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <run_game+0xbc>
		//Waiting to start game
		case prePause:
			_delay_ms(100);
			msgGame->length=0;
     e0c:	f5 01       	movw	r30, r10
     e0e:	12 82       	std	Z+2, r1	; 0x02
			msgMtor->length=0;
     e10:	f8 01       	movw	r30, r16
     e12:	12 82       	std	Z+2, r1	; 0x02
			gameState->currentStatus = pause;
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	f7 01       	movw	r30, r14
     e18:	82 87       	std	Z+10, r24	; 0x0a
			break;
     e1a:	0a c1       	rjmp	.+532    	; 0x1030 <run_game+0x2e0>
		case pause:
			OLED_print("NYTT SPILL", 1, 0);
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	8c e6       	ldi	r24, 0x6C	; 108
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			OLED_print("DIN KONTROLLER:", 3, 0);
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	63 e0       	ldi	r22, 0x03	; 3
     e2c:	87 e7       	ldi	r24, 0x77	; 119
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			if (gameState->useJSnotSENS){
     e34:	f7 01       	movw	r30, r14
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	39 f0       	breq	.+14     	; 0xe4a <run_game+0xfa>
				OLED_print("JOYSTICK", 4, 0);
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	64 e0       	ldi	r22, 0x04	; 4
     e40:	87 e8       	ldi	r24, 0x87	; 135
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <run_game+0x106>
			}
			else{
				OLED_print("SENSOR", 4, 0);
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	64 e0       	ldi	r22, 0x04	; 4
     e4e:	80 e9       	ldi	r24, 0x90	; 144
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			}
			OLED_print("START SPILL VED", 6, 0);
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	66 e0       	ldi	r22, 0x06	; 6
     e5a:	87 e9       	ldi	r24, 0x97	; 151
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			OLED_print("   AA SKYTE", 7, 0);
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	67 e0       	ldi	r22, 0x07	; 7
     e66:	87 ea       	ldi	r24, 0xA7	; 167
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			break;
     e6e:	e0 c0       	rjmp	.+448    	; 0x1030 <run_game+0x2e0>
	
		//Running game
		case play:
			OLED_print("SPILLET KJORER", 1, 0);
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	83 eb       	ldi	r24, 0xB3	; 179
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>

			OLED_print("POENG:", 3, 0);
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	63 e0       	ldi	r22, 0x03	; 3
     e80:	82 ec       	ldi	r24, 0xC2	; 194
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			char currentPoints[5];
			sprintf(currentPoints, "%u", gameState->points);
     e88:	f7 01       	movw	r30, r14
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	8f 93       	push	r24
     e8e:	81 81       	ldd	r24, Z+1	; 0x01
     e90:	8f 93       	push	r24
     e92:	09 ec       	ldi	r16, 0xC9	; 201
     e94:	11 e0       	ldi	r17, 0x01	; 1
     e96:	1f 93       	push	r17
     e98:	0f 93       	push	r16
     e9a:	6e 01       	movw	r12, r28
     e9c:	f6 e0       	ldi	r31, 0x06	; 6
     e9e:	cf 0e       	add	r12, r31
     ea0:	d1 1c       	adc	r13, r1
     ea2:	df 92       	push	r13
     ea4:	cf 92       	push	r12
     ea6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <sprintf>
			OLED_print(currentPoints, 3, 9);
     eaa:	49 e0       	ldi	r20, 0x09	; 9
     eac:	63 e0       	ldi	r22, 0x03	; 3
     eae:	c6 01       	movw	r24, r12
     eb0:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>

			OLED_print("REKORD:", 5, 0);
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	65 e0       	ldi	r22, 0x05	; 5
     eb8:	8c ec       	ldi	r24, 0xCC	; 204
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			char recordPoints[5];
			sprintf(recordPoints, "%u", gameState->record);
     ec0:	f7 01       	movw	r30, r14
     ec2:	84 81       	ldd	r24, Z+4	; 0x04
     ec4:	8f 93       	push	r24
     ec6:	83 81       	ldd	r24, Z+3	; 0x03
     ec8:	8f 93       	push	r24
     eca:	1f 93       	push	r17
     ecc:	0f 93       	push	r16
     ece:	8e 01       	movw	r16, r28
     ed0:	0f 5f       	subi	r16, 0xFF	; 255
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	1f 93       	push	r17
     ed6:	0f 93       	push	r16
     ed8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <sprintf>
			OLED_print(recordPoints, 5, 9);
     edc:	49 e0       	ldi	r20, 0x09	; 9
     ede:	65 e0       	ldi	r22, 0x05	; 5
     ee0:	c8 01       	movw	r24, r16
     ee2:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			break;
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	9f c0       	rjmp	.+318    	; 0x1030 <run_game+0x2e0>

		//Game over
		case gameOver:
			if (gameState->points > gameState->record){
     ef2:	f7 01       	movw	r30, r14
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	92 81       	ldd	r25, Z+2	; 0x02
     ef8:	23 81       	ldd	r18, Z+3	; 0x03
     efa:	34 81       	ldd	r19, Z+4	; 0x04
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	68 f4       	brcc	.+26     	; 0xf1c <run_game+0x1cc>
				gameState->record = gameState->points;
     f02:	94 83       	std	Z+4, r25	; 0x04
     f04:	83 83       	std	Z+3, r24	; 0x03
				OLED_print("GRARER!", 4, 0);
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	64 e0       	ldi	r22, 0x04	; 4
     f0a:	84 ed       	ldi	r24, 0xD4	; 212
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
				gameState->name[0] = 'a';
     f12:	81 e6       	ldi	r24, 0x61	; 97
     f14:	f7 01       	movw	r30, r14
     f16:	85 83       	std	Z+5, r24	; 0x05
				gameState->name[1] = 'a';
     f18:	86 83       	std	Z+6, r24	; 0x06
				gameState->name[2] = 'a';
     f1a:	87 83       	std	Z+7, r24	; 0x07
			}
			if (gameState->points >= gameState->record){
     f1c:	f7 01       	movw	r30, r14
     f1e:	21 81       	ldd	r18, Z+1	; 0x01
     f20:	32 81       	ldd	r19, Z+2	; 0x02
     f22:	83 81       	ldd	r24, Z+3	; 0x03
     f24:	94 81       	ldd	r25, Z+4	; 0x04
     f26:	28 17       	cp	r18, r24
     f28:	39 07       	cpc	r19, r25
     f2a:	b8 f0       	brcs	.+46     	; 0xf5a <run_game+0x20a>
 				OLED_print("NY REKORD!", 0, 0);
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	8c ed       	ldi	r24, 0xDC	; 220
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
 				OLED_print("GRATULERER!", 1, 0);
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	87 ee       	ldi	r24, 0xE7	; 231
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
				 
				//Updates and writes name.
				update_name(gameState, controls);
     f44:	b6 01       	movw	r22, r12
     f46:	c7 01       	movw	r24, r14
     f48:	0e 94 5e 06 	call	0xcbc	; 0xcbc <update_name>
				OLED_print(gameState->name,2,0);
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	62 e0       	ldi	r22, 0x02	; 2
     f50:	c7 01       	movw	r24, r14
     f52:	05 96       	adiw	r24, 0x05	; 5
     f54:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <run_game+0x216>
			}
			else{
 				OLED_print("DU TAPTE!", 1, 0);
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	83 ef       	ldi	r24, 0xF3	; 243
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
 			}

			OLED_print("POINTS:", 3, 0);
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	63 e0       	ldi	r22, 0x03	; 3
     f6a:	8d ef       	ldi	r24, 0xFD	; 253
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			char pointString[5];
			sprintf(pointString, "%u", gameState->points);
     f72:	f7 01       	movw	r30, r14
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	8f 93       	push	r24
     f78:	81 81       	ldd	r24, Z+1	; 0x01
     f7a:	8f 93       	push	r24
     f7c:	09 ec       	ldi	r16, 0xC9	; 201
     f7e:	11 e0       	ldi	r17, 0x01	; 1
     f80:	1f 93       	push	r17
     f82:	0f 93       	push	r16
     f84:	5e 01       	movw	r10, r28
     f86:	f6 e0       	ldi	r31, 0x06	; 6
     f88:	af 0e       	add	r10, r31
     f8a:	b1 1c       	adc	r11, r1
     f8c:	bf 92       	push	r11
     f8e:	af 92       	push	r10
     f90:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <sprintf>
			OLED_print(pointString, 3, 9);
     f94:	49 e0       	ldi	r20, 0x09	; 9
     f96:	63 e0       	ldi	r22, 0x03	; 3
     f98:	c5 01       	movw	r24, r10
     f9a:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>

			OLED_print("RECorD:", 5, 0);
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	65 e0       	ldi	r22, 0x05	; 5
     fa2:	85 e0       	ldi	r24, 0x05	; 5
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
			char recordString[5];
			sprintf(recordString, "%u", gameState->record);
     faa:	f7 01       	movw	r30, r14
     fac:	84 81       	ldd	r24, Z+4	; 0x04
     fae:	8f 93       	push	r24
     fb0:	83 81       	ldd	r24, Z+3	; 0x03
     fb2:	8f 93       	push	r24
     fb4:	1f 93       	push	r17
     fb6:	0f 93       	push	r16
     fb8:	8e 01       	movw	r16, r28
     fba:	0f 5f       	subi	r16, 0xFF	; 255
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	1f 93       	push	r17
     fc0:	0f 93       	push	r16
     fc2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <sprintf>
			OLED_print(recordString, 5, 9);
     fc6:	49 e0       	ldi	r20, 0x09	; 9
     fc8:	65 e0       	ldi	r22, 0x05	; 5
     fca:	c8 01       	movw	r24, r16
     fcc:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
 			OLED_print("RESTART MED A", 7, 0);
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	67 e0       	ldi	r22, 0x07	; 7
     fd4:	8d e0       	ldi	r24, 0x0D	; 13
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>

			//Restart, and save highscore and name if this was a new highscore
			if (controls->btnR.edge){
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	f6 01       	movw	r30, r12
     fe8:	84 81       	ldd	r24, Z+4	; 0x04
     fea:	88 23       	and	r24, r24
     fec:	09 f1       	breq	.+66     	; 0x1030 <run_game+0x2e0>
	 			//If highscore:
				if(gameState->points >= gameState->record){
     fee:	f7 01       	movw	r30, r14
     ff0:	63 81       	ldd	r22, Z+3	; 0x03
     ff2:	74 81       	ldd	r23, Z+4	; 0x04
     ff4:	81 81       	ldd	r24, Z+1	; 0x01
     ff6:	92 81       	ldd	r25, Z+2	; 0x02
     ff8:	86 17       	cp	r24, r22
     ffa:	97 07       	cpc	r25, r23
     ffc:	b0 f0       	brcs	.+44     	; 0x102a <run_game+0x2da>
	 				eeprom_write_byte(EEPROM_HIGHSCOREBYTE,gameState->record);
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__eewr_byte_m162>
					for(uint8_t i= 0; i<NAME_LEN;++i){
						eeprom_write_byte(EEPROM_HIGHSCORENAME+i,gameState->name[i]);
    1006:	f7 01       	movw	r30, r14
    1008:	65 81       	ldd	r22, Z+5	; 0x05
    100a:	81 e2       	ldi	r24, 0x21	; 33
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__eewr_byte_m162>
    1012:	f7 01       	movw	r30, r14
    1014:	66 81       	ldd	r22, Z+6	; 0x06
    1016:	82 e2       	ldi	r24, 0x22	; 34
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__eewr_byte_m162>
    101e:	f7 01       	movw	r30, r14
    1020:	67 81       	ldd	r22, Z+7	; 0x07
    1022:	83 e2       	ldi	r24, 0x23	; 35
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__eewr_byte_m162>
	 				}
	 			}
				gameState->currentStatus= prePause;
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	f7 01       	movw	r30, r14
    102e:	82 87       	std	Z+10, r24	; 0x0a
		default:
			break;
	}

	return 0;
}
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	2a 96       	adiw	r28, 0x0a	; 10
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	af 90       	pop	r10
    1052:	08 95       	ret

00001054 <main>:
#include "UI/HighScore.h"
#include "CommunicationDrivers/can.h"
#include "Game/EEPROM.h"
#include "main.h"

int main(void){	
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	c4 54       	subi	r28, 0x44	; 68
    105e:	d1 09       	sbc	r29, r1
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
	//x_delay_ms(10);
	set_bit(LED_DDR, LED_BIT);
    106a:	b8 9a       	sbi	0x17, 0	; 23
	/*Initialization*/
	USART_init();
    106c:	0e 94 a4 03 	call	0x748	; 0x748 <USART_init>
	//puts("USART init done");
	
	SRAM_init();
    1070:	0e 94 45 05 	call	0xa8a	; 0xa8a <SRAM_init>
	//puts("SRAM init done");
	ADC_init();
    1074:	0e 94 b2 03 	call	0x764	; 0x764 <ADC_init>
	//puts("ADC init done");
	set_bit(PORTB, 0);
    1078:	c0 9a       	sbi	0x18, 0	; 24
	OLED_init();
    107a:	0e 94 4c 05 	call	0xa98	; 0xa98 <OLED_init>
	//puts("OLED init done");
	CAN_init();
    107e:	0e 94 b5 02 	call	0x56a	; 0x56a <CAN_init>
	//puts("CAN inti done");
	controllers_init();
    1082:	0e 94 bf 03 	call	0x77e	; 0x77e <controllers_init>
	//puts("Controller init done");
	
	set_bit(LED_DDR, LED_BIT);
    1086:	b8 9a       	sbi	0x17, 0	; 23
	TIMER_60HZ_ACTIVATE;
    1088:	ea e8       	ldi	r30, 0x8A	; 138
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	82 60       	ori	r24, 0x02	; 2
    1090:	80 83       	st	Z, r24
	//puts("Timer init done");

	//Tillstandsvariabler
	Controls controls;
	joystick_calibrate(&controls.jsX,&controls.jsY);
    1092:	be 01       	movw	r22, r28
    1094:	6e 5e       	subi	r22, 0xEE	; 238
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	ce 01       	movw	r24, r28
    109a:	0d 96       	adiw	r24, 0x0d	; 13
    109c:	0e 94 c2 03 	call	0x784	; 0x784 <joystick_calibrate>
	controls.btnR.edge = 0;
    10a0:	1d 82       	std	Y+5, r1	; 0x05
	controls.btnR.state = 0;
    10a2:	1c 82       	std	Y+4, r1	; 0x04
	
	menuNode* currentMenu = menu_init();
    10a4:	0e 94 c4 09 	call	0x1388	; 0x1388 <menu_init>
    10a8:	7c 01       	movw	r14, r24
    10aa:	98 8f       	std	Y+24, r25	; 0x18
    10ac:	8f 8b       	std	Y+23, r24	; 0x17
	interrupt CAN_interrupt = noInt;
	
	uint8_t mainLoopCounter = 0;
	
	GameState gameState;
	gameState.useJSnotSENS = 1;
    10ae:	11 e0       	ldi	r17, 0x01	; 1
    10b0:	19 8f       	std	Y+25, r17	; 0x19
	gameState.points = 0;
    10b2:	1b 8e       	std	Y+27, r1	; 0x1b
    10b4:	1a 8e       	std	Y+26, r1	; 0x1a
	gameState.currentStatus = prePause;
    10b6:	83 e0       	ldi	r24, 0x03	; 3
    10b8:	8b a3       	std	Y+35, r24	; 0x23
	EEPROM_read_gamestate(&gameState);
    10ba:	ce 01       	movw	r24, r28
    10bc:	49 96       	adiw	r24, 0x19	; 25
    10be:	0e 94 42 06 	call	0xc84	; 0xc84 <EEPROM_read_gamestate>
	//The information in the message shall be kept until a new message
	//has arrived or is ready to send. 
	
	//Shell for motor signals
	CAN_message canMsgMotor;
	canMsgMotor.length = 0; //Also indicates an uptadate that needs to be sent
    10c2:	1e a2       	std	Y+38, r1	; 0x26
	canMsgMotor.data[CANMSG_PACKAGESPECIFIER] = PACKAGESPECIFIER_MOTORSIGNALS;
    10c4:	1f a2       	std	Y+39, r1	; 0x27
	canMsgMotor.data[CANMSG_BTNR_BYTE] = 0;
    10c6:	18 a6       	std	Y+40, r1	; 0x28
	canMsgMotor.data[CANMSG_SLIDERR_BYTE] = 0;
    10c8:	19 a6       	std	Y+41, r1	; 0x29
	canMsgMotor.data[CANMSG_JSX_BYTE] = 0;
    10ca:	1a a6       	std	Y+42, r1	; 0x2a
	canMsgMotor.id = NODE2_CANID_0;
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	95 e0       	ldi	r25, 0x05	; 5
    10d0:	9d a3       	std	Y+37, r25	; 0x25
    10d2:	8c a3       	std	Y+36, r24	; 0x24
	
	//Shell for game mode signals
	CAN_message canMsgGameMode;
	canMsgGameMode.length = 0; //Also indicating an update needing to be sent
    10d4:	19 aa       	std	Y+49, r1	; 0x31
	canMsgGameMode.data[CANMSG_PACKAGESPECIFIER] = PACKAGESPECIFIER_GAMEMODE;
    10d6:	1a ab       	std	Y+50, r17	; 0x32
	canMsgGameMode.id = NODE2_CANID_HIGHPRIO_0;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	98 ab       	std	Y+48, r25	; 0x30
    10de:	8f a7       	std	Y+47, r24	; 0x2f
	
	//Input message from node 2
	CAN_message canMsgInn;
	canMsgInn.length = 0; //Also indicates new message
    10e0:	1c ae       	std	Y+60, r1	; 0x3c
	
	printf("ALL INIT complete");
    10e2:	8b e1       	ldi	r24, 0x1B	; 27
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <printf>
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
	menuNode* currentMenu = menu_init();
	menuNode* mainMenu = currentMenu;
	
	interrupt CAN_interrupt = noInt;
	
	uint8_t mainLoopCounter = 0;
    10f2:	b1 2c       	mov	r11, r1
		/*Can message handling*/
		switch(CAN_interrupt){
			case noInt:
				break;
			case err:
				printf("CAN error");
    10f4:	0f 2e       	mov	r0, r31
    10f6:	fd e2       	ldi	r31, 0x2D	; 45
    10f8:	cf 2e       	mov	r12, r31
    10fa:	f2 e0       	ldi	r31, 0x02	; 2
    10fc:	df 2e       	mov	r13, r31
    10fe:	f0 2d       	mov	r31, r0
				if(joystick_user_calibrate(&controls)){
					currentMenu = mainMenu;
				}
				break;
			case controllerJS:
				gameState.useJSnotSENS = 1;
    1100:	99 24       	eor	r9, r9
    1102:	93 94       	inc	r9
					gameState.currentStatus = prePause;
					canMsgGameMode.length = GAMEMODE_MSGLEN;
					canMsgGameMode.data[GAMEMODE_MODE_BYTE] = GAMEMODE_JS;
				}
				else if(gameState.useJSnotSENS == 0 && canMsgGameMode.data[GAMEMODE_MODE_BYTE] != GAMEMODE_SENS){
					gameState.currentStatus = prePause;
    1104:	0f 2e       	mov	r0, r31
    1106:	f3 e0       	ldi	r31, 0x03	; 3
    1108:	8f 2e       	mov	r8, r31
    110a:	f0 2d       	mov	r31, r0
					canMsgGameMode.length = GAMEMODE_MSGLEN;
    110c:	68 94       	set
    110e:	aa 24       	eor	r10, r10
    1110:	a1 f8       	bld	r10, 1
		
		
				
		
		//60hz tasks
		if(TCNT3 > (F_CPU/(8*60))){
    1112:	0f 2e       	mov	r0, r31
    1114:	f8 e8       	ldi	r31, 0x88	; 136
    1116:	6f 2e       	mov	r6, r31
    1118:	71 2c       	mov	r7, r1
    111a:	f0 2d       	mov	r31, r0
	
	printf("ALL INIT complete");
	//printf("\n\n\n");
    while(1){
		/*State update*/
		controllers_update(&controls);
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	0e 94 2c 05 	call	0xa58	; 0xa58 <controllers_update>
		CAN_interrupt = CAN_int();
    1124:	0e 94 a6 02 	call	0x54c	; 0x54c <CAN_int>
    1128:	18 2f       	mov	r17, r24
		
		/*Can message handling*/
		switch(CAN_interrupt){
    112a:	86 30       	cpi	r24, 0x06	; 6
    112c:	59 f0       	breq	.+22     	; 0x1144 <main+0xf0>
    112e:	87 30       	cpi	r24, 0x07	; 7
    1130:	79 f0       	breq	.+30     	; 0x1150 <main+0xfc>
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 f4       	brne	.+36     	; 0x115a <main+0x106>
			case noInt:
				break;
			case err:
				printf("CAN error");
    1136:	df 92       	push	r13
    1138:	cf 92       	push	r12
    113a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <printf>
				break;
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0b c0       	rjmp	.+22     	; 0x115a <main+0x106>
			case rx0:
				CAN_data_receive(&canMsgInn, MCP_RXB0CTRL);
    1144:	60 e6       	ldi	r22, 0x60	; 96
    1146:	ce 01       	movw	r24, r28
    1148:	ca 96       	adiw	r24, 0x3a	; 58
    114a:	0e 94 4c 02 	call	0x498	; 0x498 <CAN_data_receive>
				break;
    114e:	05 c0       	rjmp	.+10     	; 0x115a <main+0x106>
			case rx1:
				CAN_data_receive(&canMsgInn, MCP_RXB1CTRL);
    1150:	60 e7       	ldi	r22, 0x70	; 112
    1152:	ce 01       	movw	r24, r28
    1154:	ca 96       	adiw	r24, 0x3a	; 58
    1156:	0e 94 4c 02 	call	0x498	; 0x498 <CAN_data_receive>
				break;
		}
		CAN_int_clear(CAN_interrupt);
    115a:	81 2f       	mov	r24, r17
    115c:	0e 94 38 03 	call	0x670	; 0x670 <CAN_int_clear>

 		/*Menu*/
 		//Each menu state function returns whether we want to return to main menu or not.
		if(controls.btnL.edge){
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	88 23       	and	r24, r24
    1164:	11 f0       	breq	.+4      	; 0x116a <main+0x116>
			//BtnL will always take us back to the main menu
			currentMenu = mainMenu;
    1166:	f8 8e       	std	Y+24, r15	; 0x18
    1168:	ef 8a       	std	Y+23, r14	; 0x17
		}
		switch (currentMenu->currentState){
    116a:	ef 89       	ldd	r30, Y+23	; 0x17
    116c:	f8 8d       	ldd	r31, Y+24	; 0x18
    116e:	40 81       	ld	r20, Z
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	47 30       	cpi	r20, 0x07	; 7
    1174:	51 05       	cpc	r21, r1
    1176:	08 f0       	brcs	.+2      	; 0x117a <main+0x126>
    1178:	6e c0       	rjmp	.+220    	; 0x1256 <main+0x202>
    117a:	fa 01       	movw	r30, r20
    117c:	e8 5c       	subi	r30, 0xC8	; 200
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__tablejump2__>
			case menu:
				menu_go(&currentMenu, &controls);
    1184:	be 01       	movw	r22, r28
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	ce 01       	movw	r24, r28
    118c:	47 96       	adiw	r24, 0x17	; 23
    118e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <menu_go>
				//If we have not sent a message requesting node 2 to turn of the game
				if(canMsgGameMode.data[GAMEMODE_MODE_BYTE] != GAMEMODE_OFF){
    1192:	8b a9       	ldd	r24, Y+51	; 0x33
    1194:	88 23       	and	r24, r24
    1196:	09 f4       	brne	.+2      	; 0x119a <main+0x146>
    1198:	5e c0       	rjmp	.+188    	; 0x1256 <main+0x202>
					//then send this message
					canMsgGameMode.length = GAMEMODE_MSGLEN;
    119a:	a9 aa       	std	Y+49, r10	; 0x31
					canMsgGameMode.data[GAMEMODE_MODE_BYTE] = GAMEMODE_OFF;	
    119c:	1b aa       	std	Y+51, r1	; 0x33
    119e:	5b c0       	rjmp	.+182    	; 0x1256 <main+0x202>
				}
				break;
			case runGame:
				//Reqests to send a gameMode update if it has happned.
				if(gameState.useJSnotSENS == 1 && canMsgGameMode.data[GAMEMODE_MODE_BYTE] != GAMEMODE_JS){
    11a0:	89 8d       	ldd	r24, Y+25	; 0x19
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	39 f4       	brne	.+14     	; 0x11b4 <main+0x160>
    11a6:	8b a9       	ldd	r24, Y+51	; 0x33
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <main+0x170>
					gameState.currentStatus = prePause;
    11ac:	8b a2       	std	Y+35, r8	; 0x23
					canMsgGameMode.length = GAMEMODE_MSGLEN;
    11ae:	a9 aa       	std	Y+49, r10	; 0x31
					canMsgGameMode.data[GAMEMODE_MODE_BYTE] = GAMEMODE_JS;
    11b0:	9b aa       	std	Y+51, r9	; 0x33
    11b2:	08 c0       	rjmp	.+16     	; 0x11c4 <main+0x170>
				}
				else if(gameState.useJSnotSENS == 0 && canMsgGameMode.data[GAMEMODE_MODE_BYTE] != GAMEMODE_SENS){
    11b4:	81 11       	cpse	r24, r1
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <main+0x170>
    11b8:	8b a9       	ldd	r24, Y+51	; 0x33
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <main+0x170>
					gameState.currentStatus = prePause;
    11be:	8b a2       	std	Y+35, r8	; 0x23
					canMsgGameMode.length = GAMEMODE_MSGLEN;
    11c0:	a9 aa       	std	Y+49, r10	; 0x31
					canMsgGameMode.data[GAMEMODE_MODE_BYTE] = GAMEMODE_SENS;
    11c2:	ab aa       	std	Y+51, r10	; 0x33
				}
				//Runs the game which also sends motor signals
				if(run_game(&gameState,&controls,&canMsgMotor,&canMsgInn)){
    11c4:	9e 01       	movw	r18, r28
    11c6:	26 5c       	subi	r18, 0xC6	; 198
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	ae 01       	movw	r20, r28
    11cc:	4c 5d       	subi	r20, 0xDC	; 220
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	ce 01       	movw	r24, r28
    11d8:	49 96       	adiw	r24, 0x19	; 25
    11da:	0e 94 a8 06 	call	0xd50	; 0xd50 <run_game>
    11de:	88 23       	and	r24, r24
    11e0:	d1 f1       	breq	.+116    	; 0x1256 <main+0x202>
					currentMenu = mainMenu;
    11e2:	f8 8e       	std	Y+24, r15	; 0x18
    11e4:	ef 8a       	std	Y+23, r14	; 0x17
    11e6:	37 c0       	rjmp	.+110    	; 0x1256 <main+0x202>
				}
				break;
			case highScore:
				if(displayHighScore(&gameState,&controls)){
    11e8:	be 01       	movw	r22, r28
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	ce 01       	movw	r24, r28
    11f0:	49 96       	adiw	r24, 0x19	; 25
    11f2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <displayHighScore>
    11f6:	88 23       	and	r24, r24
    11f8:	71 f1       	breq	.+92     	; 0x1256 <main+0x202>
					currentMenu = mainMenu;
    11fa:	f8 8e       	std	Y+24, r15	; 0x18
    11fc:	ef 8a       	std	Y+23, r14	; 0x17
    11fe:	2b c0       	rjmp	.+86     	; 0x1256 <main+0x202>
				}
				break;
			case calibrateJS:
				if(joystick_user_calibrate(&controls)){
    1200:	ce 01       	movw	r24, r28
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	0e 94 d6 03 	call	0x7ac	; 0x7ac <joystick_user_calibrate>
    1208:	88 23       	and	r24, r24
    120a:	29 f1       	breq	.+74     	; 0x1256 <main+0x202>
					currentMenu = mainMenu;
    120c:	f8 8e       	std	Y+24, r15	; 0x18
    120e:	ef 8a       	std	Y+23, r14	; 0x17
    1210:	22 c0       	rjmp	.+68     	; 0x1256 <main+0x202>
				}
				break;
			case controllerJS:
				gameState.useJSnotSENS = 1;
    1212:	99 8e       	std	Y+25, r9	; 0x19
				currentMenu = mainMenu;
    1214:	f8 8e       	std	Y+24, r15	; 0x18
    1216:	ef 8a       	std	Y+23, r14	; 0x17
				break;
    1218:	1e c0       	rjmp	.+60     	; 0x1256 <main+0x202>
			case controllerSens:		
				gameState.useJSnotSENS = 0;
    121a:	19 8e       	std	Y+25, r1	; 0x19
				currentMenu = mainMenu;
    121c:	f8 8e       	std	Y+24, r15	; 0x18
    121e:	ef 8a       	std	Y+23, r14	; 0x17
				break;
    1220:	1a c0       	rjmp	.+52     	; 0x1256 <main+0x202>
			case deleteHS:
				//Resets eeprom
				eeprom_write_byte(EEPROM_HIGHSCOREBYTE,0);
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	80 e2       	ldi	r24, 0x20	; 32
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__eewr_byte_m162>
				if(NAME_LEN >= 3){
					eeprom_write_byte(EEPROM_HIGHSCORENAME+0,'N');
    122c:	6e e4       	ldi	r22, 0x4E	; 78
    122e:	81 e2       	ldi	r24, 0x21	; 33
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__eewr_byte_m162>
					eeprom_write_byte(EEPROM_HIGHSCORENAME+1,'A');
    1236:	61 e4       	ldi	r22, 0x41	; 65
    1238:	82 e2       	ldi	r24, 0x22	; 34
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__eewr_byte_m162>
					eeprom_write_byte(EEPROM_HIGHSCORENAME+2,'N');
    1240:	6e e4       	ldi	r22, 0x4E	; 78
    1242:	83 e2       	ldi	r24, 0x23	; 35
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__eewr_byte_m162>
					for(uint8_t i=0;i<NAME_LEN;++i){
						eeprom_write_byte(EEPROM_HIGHSCORENAME+i,0);
					}
				}
				//Realods eeprom from highscore
				EEPROM_read_gamestate(&gameState);
    124a:	ce 01       	movw	r24, r28
    124c:	49 96       	adiw	r24, 0x19	; 25
    124e:	0e 94 42 06 	call	0xc84	; 0xc84 <EEPROM_read_gamestate>

				currentMenu = mainMenu;
    1252:	f8 8e       	std	Y+24, r15	; 0x18
    1254:	ef 8a       	std	Y+23, r14	; 0x17
		
		
				
		
		//60hz tasks
		if(TCNT3 > (F_CPU/(8*60))){
    1256:	f3 01       	movw	r30, r6
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	98 42       	sbci	r25, 0x28	; 40
    1260:	08 f4       	brcc	.+2      	; 0x1264 <main+0x210>
    1262:	5c cf       	rjmp	.-328    	; 0x111c <main+0xc8>
			mainLoopCounter++;
    1264:	b3 94       	inc	r11
			if(!(mainLoopCounter%60)){
    1266:	89 e8       	ldi	r24, 0x89	; 137
    1268:	b8 9e       	mul	r11, r24
    126a:	81 2d       	mov	r24, r1
    126c:	11 24       	eor	r1, r1
    126e:	82 95       	swap	r24
    1270:	86 95       	lsr	r24
    1272:	87 70       	andi	r24, 0x07	; 7
    1274:	9b 2d       	mov	r25, r11
    1276:	2c e3       	ldi	r18, 0x3C	; 60
    1278:	82 9f       	mul	r24, r18
    127a:	90 19       	sub	r25, r0
    127c:	11 24       	eor	r1, r1
    127e:	91 11       	cpse	r25, r1
    1280:	11 c0       	rjmp	.+34     	; 0x12a4 <main+0x250>
				toggle_bit(LED_PORT, LED_BIT);
    1282:	98 b3       	in	r25, 0x18	; 24
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	89 27       	eor	r24, r25
    1288:	88 bb       	out	0x18, r24	; 24
				if (gameState.currentStatus == play && currentMenu->currentState == runGame){
    128a:	8b a1       	ldd	r24, Y+35	; 0x23
    128c:	81 11       	cpse	r24, r1
    128e:	0a c0       	rjmp	.+20     	; 0x12a4 <main+0x250>
    1290:	ef 89       	ldd	r30, Y+23	; 0x17
    1292:	f8 8d       	ldd	r31, Y+24	; 0x18
    1294:	80 81       	ld	r24, Z
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	29 f4       	brne	.+10     	; 0x12a4 <main+0x250>
					gameState.points++;
    129a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    129c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	9b 8f       	std	Y+27, r25	; 0x1b
    12a2:	8a 8f       	std	Y+26, r24	; 0x1a
				}
			}
			
			//If the can message has a length, then it is requesting to be sent
			if(canMsgGameMode.length){
    12a4:	89 a9       	ldd	r24, Y+49	; 0x31
    12a6:	88 23       	and	r24, r24
    12a8:	29 f0       	breq	.+10     	; 0x12b4 <main+0x260>
				CAN_message_send(&canMsgGameMode);
    12aa:	ce 01       	movw	r24, r28
    12ac:	8f 96       	adiw	r24, 0x2f	; 47
    12ae:	0e 94 3f 02 	call	0x47e	; 0x47e <CAN_message_send>
				canMsgGameMode.length = 0;
    12b2:	19 aa       	std	Y+49, r1	; 0x31
			}
			if(canMsgMotor.length && gameState.currentStatus != gameOver){
    12b4:	8e a1       	ldd	r24, Y+38	; 0x26
    12b6:	88 23       	and	r24, r24
    12b8:	79 f0       	breq	.+30     	; 0x12d8 <main+0x284>
    12ba:	8b a1       	ldd	r24, Y+35	; 0x23
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	61 f0       	breq	.+24     	; 0x12d8 <main+0x284>
				CAN_message_send(&canMsgMotor);
    12c0:	ce 01       	movw	r24, r28
    12c2:	84 96       	adiw	r24, 0x24	; 36
    12c4:	0e 94 3f 02 	call	0x47e	; 0x47e <CAN_message_send>
				canMsgMotor.length = 0;
    12c8:	1e a2       	std	Y+38, r1	; 0x26
				
				if(canMsgMotor.data[CANMSG_BTNR_BYTE]){
    12ca:	88 a5       	ldd	r24, Y+40	; 0x28
    12cc:	88 23       	and	r24, r24
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <main+0x284>
					puts("PUSH!");
    12d0:	87 e3       	ldi	r24, 0x37	; 55
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <puts>
				}
			}
			OLED_update_screen();
    12d8:	0e 94 34 06 	call	0xc68	; 0xc68 <OLED_update_screen>
			TIMER_60HZ_RESET;
    12dc:	10 92 89 00 	sts	0x0089, r1
    12e0:	10 92 88 00 	sts	0x0088, r1
    12e4:	0d cf       	rjmp	.-486    	; 0x1100 <main+0xac>

000012e6 <displayHighScore>:
 *  Author: sverrevr
 */ 

#include "HighScore.h"

uint8_t displayHighScore(GameState* gameState, Controls* control){
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <displayHighScore+0x12>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <displayHighScore+0x14>
    12fa:	1f 92       	push	r1
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8c 01       	movw	r16, r24
    1302:	6b 01       	movw	r12, r22
	OLED_clear();
    1304:	0e 94 2c 06 	call	0xc58	; 0xc58 <OLED_clear>
	OLED_print("Current         ",0,0);
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	8d e3       	ldi	r24, 0x3D	; 61
    130e:	92 e0       	ldi	r25, 0x02	; 2
    1310:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	OLED_print("      High Score",1,0);
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	8e e4       	ldi	r24, 0x4E	; 78
    131a:	92 e0       	ldi	r25, 0x02	; 2
    131c:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	char pointsString[5];
	sprintf(pointsString, "%u", gameState->record);
    1320:	f8 01       	movw	r30, r16
    1322:	84 81       	ldd	r24, Z+4	; 0x04
    1324:	8f 93       	push	r24
    1326:	83 81       	ldd	r24, Z+3	; 0x03
    1328:	8f 93       	push	r24
    132a:	89 ec       	ldi	r24, 0xC9	; 201
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	9f 93       	push	r25
    1330:	8f 93       	push	r24
    1332:	ce 01       	movw	r24, r28
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	7c 01       	movw	r14, r24
    1338:	ff 92       	push	r15
    133a:	8f 93       	push	r24
    133c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <sprintf>
	OLED_print(pointsString,3,6);
    1340:	46 e0       	ldi	r20, 0x06	; 6
    1342:	63 e0       	ldi	r22, 0x03	; 3
    1344:	c7 01       	movw	r24, r14
    1346:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	OLED_print(gameState->name,4,0);
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	64 e0       	ldi	r22, 0x04	; 4
    134e:	c8 01       	movw	r24, r16
    1350:	05 96       	adiw	r24, 0x05	; 5
    1352:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	
	if(control->jsX.descreet_edge < 0){
    1356:	f6 01       	movw	r30, r12
    1358:	87 85       	ldd	r24, Z+15	; 0x0f
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
		return 1;
	}
	return 0;
    1366:	88 1f       	adc	r24, r24
    1368:	88 27       	eor	r24, r24
    136a:	88 1f       	adc	r24, r24
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	df 90       	pop	r13
    1384:	cf 90       	pop	r12
    1386:	08 95       	ret

00001388 <menu_init>:
menuNode deleteHighScore;
menuNode chooseController;
menuNode controllerJoystick;
menuNode controllerSensor;

menuNode* menu_init(){
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
	strcpy(options.text,			"Options       ");
    1394:	8f e0       	ldi	r24, 0x0F	; 15
    1396:	ef e5       	ldi	r30, 0x5F	; 95
    1398:	f2 e0       	ldi	r31, 0x02	; 2
    139a:	a3 e3       	ldi	r26, 0x33	; 51
    139c:	b3 e0       	ldi	r27, 0x03	; 3
    139e:	01 90       	ld	r0, Z+
    13a0:	0d 92       	st	X+, r0
    13a2:	8a 95       	dec	r24
    13a4:	e1 f7       	brne	.-8      	; 0x139e <menu_init+0x16>
	strcpy(newGame.text,			"New Game      ");
    13a6:	8f e0       	ldi	r24, 0x0F	; 15
    13a8:	ee e6       	ldi	r30, 0x6E	; 110
    13aa:	f2 e0       	ldi	r31, 0x02	; 2
    13ac:	af eb       	ldi	r26, 0xBF	; 191
    13ae:	b3 e0       	ldi	r27, 0x03	; 3
    13b0:	01 90       	ld	r0, Z+
    13b2:	0d 92       	st	X+, r0
    13b4:	8a 95       	dec	r24
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <menu_init+0x28>
	strcpy(dispHighScore.text,		"High scores   ");
    13b8:	8f e0       	ldi	r24, 0x0F	; 15
    13ba:	ed e7       	ldi	r30, 0x7D	; 125
    13bc:	f2 e0       	ldi	r31, 0x02	; 2
    13be:	a9 e7       	ldi	r26, 0x79	; 121
    13c0:	b3 e0       	ldi	r27, 0x03	; 3
    13c2:	01 90       	ld	r0, Z+
    13c4:	0d 92       	st	X+, r0
    13c6:	8a 95       	dec	r24
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <menu_init+0x3a>
	strcpy(mainMenu.text,			"Main menu!    ");
    13ca:	8f e0       	ldi	r24, 0x0F	; 15
    13cc:	ec e8       	ldi	r30, 0x8C	; 140
    13ce:	f2 e0       	ldi	r31, 0x02	; 2
    13d0:	a6 e5       	ldi	r26, 0x56	; 86
    13d2:	b3 e0       	ldi	r27, 0x03	; 3
    13d4:	01 90       	ld	r0, Z+
    13d6:	0d 92       	st	X+, r0
    13d8:	8a 95       	dec	r24
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <menu_init+0x4c>
	strcpy(reCalibrateJs.text,		"Re calib. js. ");
    13dc:	8f e0       	ldi	r24, 0x0F	; 15
    13de:	eb e9       	ldi	r30, 0x9B	; 155
    13e0:	f2 e0       	ldi	r31, 0x02	; 2
    13e2:	a5 e0       	ldi	r26, 0x05	; 5
    13e4:	b4 e0       	ldi	r27, 0x04	; 4
    13e6:	01 90       	ld	r0, Z+
    13e8:	0d 92       	st	X+, r0
    13ea:	8a 95       	dec	r24
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <menu_init+0x5e>
	strcpy(chooseController.text,	"Choose cntrlr.");
    13ee:	8f e0       	ldi	r24, 0x0F	; 15
    13f0:	ea ea       	ldi	r30, 0xAA	; 170
    13f2:	f2 e0       	ldi	r31, 0x02	; 2
    13f4:	ac e9       	ldi	r26, 0x9C	; 156
    13f6:	b3 e0       	ldi	r27, 0x03	; 3
    13f8:	01 90       	ld	r0, Z+
    13fa:	0d 92       	st	X+, r0
    13fc:	8a 95       	dec	r24
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <menu_init+0x70>
	strcpy(controllerJoystick.text,	"Joystick      ");
    1400:	8f e0       	ldi	r24, 0x0F	; 15
    1402:	e9 eb       	ldi	r30, 0xB9	; 185
    1404:	f2 e0       	ldi	r31, 0x02	; 2
    1406:	a0 e1       	ldi	r26, 0x10	; 16
    1408:	b3 e0       	ldi	r27, 0x03	; 3
    140a:	01 90       	ld	r0, Z+
    140c:	0d 92       	st	X+, r0
    140e:	8a 95       	dec	r24
    1410:	e1 f7       	brne	.-8      	; 0x140a <menu_init+0x82>
	strcpy(controllerSensor.text,	"Sensor        ");
    1412:	8f e0       	ldi	r24, 0x0F	; 15
    1414:	e8 ec       	ldi	r30, 0xC8	; 200
    1416:	f2 e0       	ldi	r31, 0x02	; 2
    1418:	a2 ee       	ldi	r26, 0xE2	; 226
    141a:	b3 e0       	ldi	r27, 0x03	; 3
    141c:	01 90       	ld	r0, Z+
    141e:	0d 92       	st	X+, r0
    1420:	8a 95       	dec	r24
    1422:	e1 f7       	brne	.-8      	; 0x141c <menu_init+0x94>
	strcpy(deleteHighScore.text,	"Delete H.S.   ");
    1424:	8f e0       	ldi	r24, 0x0F	; 15
    1426:	e7 ed       	ldi	r30, 0xD7	; 215
    1428:	f2 e0       	ldi	r31, 0x02	; 2
    142a:	ad ee       	ldi	r26, 0xED	; 237
    142c:	b2 e0       	ldi	r27, 0x02	; 2
    142e:	01 90       	ld	r0, Z+
    1430:	0d 92       	st	X+, r0
    1432:	8a 95       	dec	r24
    1434:	e1 f7       	brne	.-8      	; 0x142e <menu_init+0xa6>
	
	mainMenu.parent = NULL;
    1436:	10 92 67 03 	sts	0x0367, r1
    143a:	10 92 66 03 	sts	0x0366, r1
	mainMenu.nChildren = 3;
    143e:	03 e0       	ldi	r16, 0x03	; 3
    1440:	00 93 54 03 	sts	0x0354, r16
	mainMenu.child[0] = &options;
    1444:	e0 e3       	ldi	r30, 0x30	; 48
    1446:	f3 e0       	ldi	r31, 0x03	; 3
    1448:	f0 93 69 03 	sts	0x0369, r31
    144c:	e0 93 68 03 	sts	0x0368, r30
	mainMenu.child[1] = &newGame;
    1450:	2c eb       	ldi	r18, 0xBC	; 188
    1452:	33 e0       	ldi	r19, 0x03	; 3
    1454:	30 93 6b 03 	sts	0x036B, r19
    1458:	20 93 6a 03 	sts	0x036A, r18
	mainMenu.child[2] = &dispHighScore;
    145c:	86 e7       	ldi	r24, 0x76	; 118
    145e:	93 e0       	ldi	r25, 0x03	; 3
    1460:	90 93 6d 03 	sts	0x036D, r25
    1464:	80 93 6c 03 	sts	0x036C, r24
	mainMenu.arrowLevel = 1;
    1468:	11 e0       	ldi	r17, 0x01	; 1
    146a:	10 93 55 03 	sts	0x0355, r17
	mainMenu.currentState = menu;
    146e:	0f 2e       	mov	r0, r31
    1470:	f3 e5       	ldi	r31, 0x53	; 83
    1472:	ef 2e       	mov	r14, r31
    1474:	f3 e0       	ldi	r31, 0x03	; 3
    1476:	ff 2e       	mov	r15, r31
    1478:	f0 2d       	mov	r31, r0
    147a:	d7 01       	movw	r26, r14
    147c:	1c 92       	st	X, r1
	
	options.parent = &mainMenu;
    147e:	f0 92 44 03 	sts	0x0344, r15
    1482:	e0 92 43 03 	sts	0x0343, r14
	options.nChildren = 3;
    1486:	00 93 31 03 	sts	0x0331, r16
	options.child[0] = &reCalibrateJs;
    148a:	62 e0       	ldi	r22, 0x02	; 2
    148c:	74 e0       	ldi	r23, 0x04	; 4
    148e:	70 93 46 03 	sts	0x0346, r23
    1492:	60 93 45 03 	sts	0x0345, r22
	options.child[1] = &chooseController;
    1496:	c9 e9       	ldi	r28, 0x99	; 153
    1498:	d3 e0       	ldi	r29, 0x03	; 3
    149a:	d0 93 48 03 	sts	0x0348, r29
    149e:	c0 93 47 03 	sts	0x0347, r28
	options.child[2] = &deleteHighScore;
    14a2:	4a ee       	ldi	r20, 0xEA	; 234
    14a4:	52 e0       	ldi	r21, 0x02	; 2
    14a6:	50 93 4a 03 	sts	0x034A, r21
    14aa:	40 93 49 03 	sts	0x0349, r20
	options.arrowLevel = 1;
    14ae:	10 93 32 03 	sts	0x0332, r17
	options.currentState = menu;
    14b2:	10 82       	st	Z, r1
	
	reCalibrateJs.parent = &options;
    14b4:	f0 93 16 04 	sts	0x0416, r31
    14b8:	e0 93 15 04 	sts	0x0415, r30
	reCalibrateJs.nChildren = 0;
    14bc:	10 92 03 04 	sts	0x0403, r1
	reCalibrateJs.arrowLevel = 1;
    14c0:	10 93 04 04 	sts	0x0404, r17
	reCalibrateJs.currentState = calibrateJS;
    14c4:	db 01       	movw	r26, r22
    14c6:	0c 93       	st	X, r16
	
	deleteHighScore.parent = &options;
    14c8:	f0 93 fe 02 	sts	0x02FE, r31
    14cc:	e0 93 fd 02 	sts	0x02FD, r30
	deleteHighScore.nChildren = 0;
    14d0:	10 92 eb 02 	sts	0x02EB, r1
	deleteHighScore.arrowLevel = 1;
    14d4:	10 93 ec 02 	sts	0x02EC, r17
	deleteHighScore.currentState = deleteHS;
    14d8:	66 e0       	ldi	r22, 0x06	; 6
    14da:	da 01       	movw	r26, r20
    14dc:	6c 93       	st	X, r22
	
	chooseController.parent = &options;
    14de:	f0 93 ad 03 	sts	0x03AD, r31
    14e2:	e0 93 ac 03 	sts	0x03AC, r30
	chooseController.nChildren = 2;
    14e6:	62 e0       	ldi	r22, 0x02	; 2
    14e8:	60 93 9a 03 	sts	0x039A, r22
	chooseController.child[0] = &controllerJoystick;
    14ec:	4d e0       	ldi	r20, 0x0D	; 13
    14ee:	53 e0       	ldi	r21, 0x03	; 3
    14f0:	50 93 af 03 	sts	0x03AF, r21
    14f4:	40 93 ae 03 	sts	0x03AE, r20
	chooseController.child[1] = &controllerSensor;
    14f8:	ef ed       	ldi	r30, 0xDF	; 223
    14fa:	f3 e0       	ldi	r31, 0x03	; 3
    14fc:	f0 93 b1 03 	sts	0x03B1, r31
    1500:	e0 93 b0 03 	sts	0x03B0, r30
	chooseController.arrowLevel = 1;
    1504:	10 93 9b 03 	sts	0x039B, r17
	chooseController.currentState = menu;
    1508:	18 82       	st	Y, r1
	
	controllerJoystick.parent = &chooseController;
    150a:	d0 93 21 03 	sts	0x0321, r29
    150e:	c0 93 20 03 	sts	0x0320, r28
	controllerJoystick.nChildren = 0;
    1512:	10 92 0e 03 	sts	0x030E, r1
	controllerJoystick.arrowLevel = 1;
    1516:	10 93 0f 03 	sts	0x030F, r17
	controllerJoystick.currentState = controllerJS;
    151a:	74 e0       	ldi	r23, 0x04	; 4
    151c:	da 01       	movw	r26, r20
    151e:	7c 93       	st	X, r23
	
	controllerSensor.parent = &chooseController;
    1520:	d0 93 f3 03 	sts	0x03F3, r29
    1524:	c0 93 f2 03 	sts	0x03F2, r28
	controllerSensor.nChildren = 0;
    1528:	10 92 e0 03 	sts	0x03E0, r1
	controllerSensor.arrowLevel = 1;
    152c:	10 93 e1 03 	sts	0x03E1, r17
	controllerSensor.currentState = controllerSens;
    1530:	45 e0       	ldi	r20, 0x05	; 5
    1532:	40 83       	st	Z, r20
	
	newGame.parent = &mainMenu;
    1534:	f0 92 d0 03 	sts	0x03D0, r15
    1538:	e0 92 cf 03 	sts	0x03CF, r14
	newGame.nChildren = 0;
    153c:	10 92 bd 03 	sts	0x03BD, r1
	newGame.arrowLevel = 1;
    1540:	10 93 be 03 	sts	0x03BE, r17
	newGame.currentState = runGame;
    1544:	f9 01       	movw	r30, r18
    1546:	10 83       	st	Z, r17
	
	dispHighScore.parent = &mainMenu;
    1548:	f0 92 8a 03 	sts	0x038A, r15
    154c:	e0 92 89 03 	sts	0x0389, r14
	dispHighScore.nChildren = 0;
    1550:	10 92 77 03 	sts	0x0377, r1
	dispHighScore.arrowLevel = 1;
    1554:	10 93 78 03 	sts	0x0378, r17
	dispHighScore.currentState = highScore;
    1558:	dc 01       	movw	r26, r24
    155a:	6c 93       	st	X, r22
	
	return &mainMenu;
	
}
    155c:	c7 01       	movw	r24, r14
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	08 95       	ret

0000156c <move_arrow>:
}


/*Moves the menu indicator arrow according to the joystick descreet position*/
void move_arrow(uint8_t* level, JoyStick* jsY, uint8_t nChildren){
	if(jsY->descreet_edge == 0){
    156c:	fb 01       	movw	r30, r22
    156e:	23 81       	ldd	r18, Z+3	; 0x03
    1570:	22 23       	and	r18, r18
    1572:	89 f0       	breq	.+34     	; 0x1596 <move_arrow+0x2a>
		//Nothing has been pressed, do nothing
		return;
	}
	//Moves according to joystick
	(*level) -= jsY->descreet;
    1574:	fc 01       	movw	r30, r24
    1576:	20 81       	ld	r18, Z
    1578:	fb 01       	movw	r30, r22
    157a:	32 81       	ldd	r19, Z+2	; 0x02
    157c:	23 1b       	sub	r18, r19
	if((*level) <1) *level = nChildren;			//If we are at the last element, go to first.
    157e:	19 f4       	brne	.+6      	; 0x1586 <move_arrow+0x1a>
    1580:	fc 01       	movw	r30, r24
    1582:	40 83       	st	Z, r20
    1584:	08 95       	ret
	else if((*level) > nChildren) *level = 1;	//If we are at the first element, go to last.
    1586:	42 17       	cp	r20, r18
    1588:	18 f0       	brcs	.+6      	; 0x1590 <move_arrow+0x24>
	if(jsY->descreet_edge == 0){
		//Nothing has been pressed, do nothing
		return;
	}
	//Moves according to joystick
	(*level) -= jsY->descreet;
    158a:	fc 01       	movw	r30, r24
    158c:	20 83       	st	Z, r18
    158e:	08 95       	ret
	if((*level) <1) *level = nChildren;			//If we are at the last element, go to first.
	else if((*level) > nChildren) *level = 1;	//If we are at the first element, go to last.
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	fc 01       	movw	r30, r24
    1594:	20 83       	st	Z, r18
    1596:	08 95       	ret

00001598 <menu_go>:
	
	return &mainMenu;
	
}

void menu_go(menuNode** menu, Controls* control){
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	8c 01       	movw	r16, r24
    15a6:	7b 01       	movw	r14, r22
	move_arrow(&((*menu)->arrowLevel), &control->jsY, (*menu)->nChildren);
    15a8:	dc 01       	movw	r26, r24
    15aa:	8d 91       	ld	r24, X+
    15ac:	9c 91       	ld	r25, X
    15ae:	6f 5e       	subi	r22, 0xEF	; 239
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	fc 01       	movw	r30, r24
    15b4:	41 81       	ldd	r20, Z+1	; 0x01
    15b6:	02 96       	adiw	r24, 0x02	; 2
    15b8:	0e 94 b6 0a 	call	0x156c	; 0x156c <move_arrow>
	
	OLED_clear();
    15bc:	0e 94 2c 06 	call	0xc58	; 0xc58 <OLED_clear>
	OLED_print((*menu)->text,0,0);	//Prints the title
    15c0:	d8 01       	movw	r26, r16
    15c2:	8d 91       	ld	r24, X+
    15c4:	9c 91       	ld	r25, X
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	03 96       	adiw	r24, 0x03	; 3
    15cc:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	
	//Iterates through submenues and prints them
	for(int i=1; i<=(*menu)->nChildren; ++i){
    15d0:	d8 01       	movw	r26, r16
    15d2:	ed 91       	ld	r30, X+
    15d4:	fc 91       	ld	r31, X
    15d6:	21 81       	ldd	r18, Z+1	; 0x01
    15d8:	22 23       	and	r18, r18
    15da:	71 f1       	breq	.+92     	; 0x1638 <menu_go+0xa0>
    15dc:	c1 e0       	ldi	r28, 0x01	; 1
    15de:	d0 e0       	ldi	r29, 0x00	; 0
		//Prints a spaceinvader at the current arrow level.
		if((*menu)->arrowLevel == i){
    15e0:	62 81       	ldd	r22, Z+2	; 0x02
    15e2:	86 2f       	mov	r24, r22
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	8c 17       	cp	r24, r28
    15e8:	9d 07       	cpc	r25, r29
    15ea:	31 f4       	brne	.+12     	; 0x15f8 <menu_go+0x60>
			OLED_print("-s",i,0);
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	86 ee       	ldi	r24, 0xE6	; 230
    15f0:	92 e0       	ldi	r25, 0x02	; 2
    15f2:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <menu_go+0x6c>
		}
		else{
			OLED_print("  ",i,0);
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	6c 2f       	mov	r22, r28
    15fc:	8b e4       	ldi	r24, 0x4B	; 75
    15fe:	92 e0       	ldi	r25, 0x02	; 2
    1600:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
		}
		//The menu text is offset to the right by 2 to make room for the possible arrow
		OLED_print((*menu)->child[i-1]->text,i,2); 
    1604:	f8 01       	movw	r30, r16
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	fe 01       	movw	r30, r28
    160c:	31 97       	sbiw	r30, 0x01	; 1
    160e:	ee 0f       	add	r30, r30
    1610:	ff 1f       	adc	r31, r31
    1612:	e8 0f       	add	r30, r24
    1614:	f9 1f       	adc	r31, r25
    1616:	85 89       	ldd	r24, Z+21	; 0x15
    1618:	96 89       	ldd	r25, Z+22	; 0x16
    161a:	42 e0       	ldi	r20, 0x02	; 2
    161c:	6c 2f       	mov	r22, r28
    161e:	03 96       	adiw	r24, 0x03	; 3
    1620:	0e 94 b9 05 	call	0xb72	; 0xb72 <OLED_print>
	
	OLED_clear();
	OLED_print((*menu)->text,0,0);	//Prints the title
	
	//Iterates through submenues and prints them
	for(int i=1; i<=(*menu)->nChildren; ++i){
    1624:	21 96       	adiw	r28, 0x01	; 1
    1626:	d8 01       	movw	r26, r16
    1628:	ed 91       	ld	r30, X+
    162a:	fc 91       	ld	r31, X
    162c:	21 81       	ldd	r18, Z+1	; 0x01
    162e:	82 2f       	mov	r24, r18
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	8c 17       	cp	r24, r28
    1634:	9d 07       	cpc	r25, r29
    1636:	a4 f6       	brge	.-88     	; 0x15e0 <menu_go+0x48>
		OLED_print((*menu)->child[i-1]->text,i,2); 
	}
	
	//Left/right joystick changes the menu level.
	//Go to the child currently pointed at
	if(control->jsX.descreet_edge > 0){
    1638:	d7 01       	movw	r26, r14
    163a:	1f 96       	adiw	r26, 0x0f	; 15
    163c:	8c 91       	ld	r24, X
    163e:	18 16       	cp	r1, r24
    1640:	8c f4       	brge	.+34     	; 0x1664 <menu_go+0xcc>
		if((*menu)->arrowLevel !=0  &&((*menu)->arrowLevel <= (*menu)->nChildren)){
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	88 23       	and	r24, r24
    1646:	b9 f0       	breq	.+46     	; 0x1676 <menu_go+0xde>
    1648:	28 17       	cp	r18, r24
    164a:	a8 f0       	brcs	.+42     	; 0x1676 <menu_go+0xde>
			*menu = (*menu)->child[((*menu)->arrowLevel)-1];
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	e8 0f       	add	r30, r24
    1656:	f9 1f       	adc	r31, r25
    1658:	85 89       	ldd	r24, Z+21	; 0x15
    165a:	96 89       	ldd	r25, Z+22	; 0x16
    165c:	f8 01       	movw	r30, r16
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <menu_go+0xde>
		}
	}
	//Go to parent
	else if(control->jsX.descreet_edge < 0){
    1664:	88 23       	and	r24, r24
    1666:	3c f4       	brge	.+14     	; 0x1676 <menu_go+0xde>
		if((*menu)->parent != NULL){
    1668:	83 89       	ldd	r24, Z+19	; 0x13
    166a:	94 89       	ldd	r25, Z+20	; 0x14
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	19 f0       	breq	.+6      	; 0x1676 <menu_go+0xde>
			*menu = (*menu)->parent;
    1670:	d8 01       	movw	r26, r16
    1672:	8d 93       	st	X+, r24
    1674:	9c 93       	st	X, r25
		}
	}
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	08 95       	ret

00001684 <__subsf3>:
    1684:	50 58       	subi	r21, 0x80	; 128

00001686 <__addsf3>:
    1686:	bb 27       	eor	r27, r27
    1688:	aa 27       	eor	r26, r26
    168a:	0e d0       	rcall	.+28     	; 0x16a8 <__addsf3x>
    168c:	4d c1       	rjmp	.+666    	; 0x1928 <__fp_round>
    168e:	3e d1       	rcall	.+636    	; 0x190c <__fp_pscA>
    1690:	30 f0       	brcs	.+12     	; 0x169e <__addsf3+0x18>
    1692:	43 d1       	rcall	.+646    	; 0x191a <__fp_pscB>
    1694:	20 f0       	brcs	.+8      	; 0x169e <__addsf3+0x18>
    1696:	31 f4       	brne	.+12     	; 0x16a4 <__addsf3+0x1e>
    1698:	9f 3f       	cpi	r25, 0xFF	; 255
    169a:	11 f4       	brne	.+4      	; 0x16a0 <__addsf3+0x1a>
    169c:	1e f4       	brtc	.+6      	; 0x16a4 <__addsf3+0x1e>
    169e:	33 c1       	rjmp	.+614    	; 0x1906 <__fp_nan>
    16a0:	0e f4       	brtc	.+2      	; 0x16a4 <__addsf3+0x1e>
    16a2:	e0 95       	com	r30
    16a4:	e7 fb       	bst	r30, 7
    16a6:	29 c1       	rjmp	.+594    	; 0x18fa <__fp_inf>

000016a8 <__addsf3x>:
    16a8:	e9 2f       	mov	r30, r25
    16aa:	4f d1       	rcall	.+670    	; 0x194a <__fp_split3>
    16ac:	80 f3       	brcs	.-32     	; 0x168e <__addsf3+0x8>
    16ae:	ba 17       	cp	r27, r26
    16b0:	62 07       	cpc	r22, r18
    16b2:	73 07       	cpc	r23, r19
    16b4:	84 07       	cpc	r24, r20
    16b6:	95 07       	cpc	r25, r21
    16b8:	18 f0       	brcs	.+6      	; 0x16c0 <__addsf3x+0x18>
    16ba:	71 f4       	brne	.+28     	; 0x16d8 <__addsf3x+0x30>
    16bc:	9e f5       	brtc	.+102    	; 0x1724 <__addsf3x+0x7c>
    16be:	67 c1       	rjmp	.+718    	; 0x198e <__fp_zero>
    16c0:	0e f4       	brtc	.+2      	; 0x16c4 <__addsf3x+0x1c>
    16c2:	e0 95       	com	r30
    16c4:	0b 2e       	mov	r0, r27
    16c6:	ba 2f       	mov	r27, r26
    16c8:	a0 2d       	mov	r26, r0
    16ca:	0b 01       	movw	r0, r22
    16cc:	b9 01       	movw	r22, r18
    16ce:	90 01       	movw	r18, r0
    16d0:	0c 01       	movw	r0, r24
    16d2:	ca 01       	movw	r24, r20
    16d4:	a0 01       	movw	r20, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	ff 27       	eor	r31, r31
    16da:	59 1b       	sub	r21, r25
    16dc:	99 f0       	breq	.+38     	; 0x1704 <__addsf3x+0x5c>
    16de:	59 3f       	cpi	r21, 0xF9	; 249
    16e0:	50 f4       	brcc	.+20     	; 0x16f6 <__addsf3x+0x4e>
    16e2:	50 3e       	cpi	r21, 0xE0	; 224
    16e4:	68 f1       	brcs	.+90     	; 0x1740 <__addsf3x+0x98>
    16e6:	1a 16       	cp	r1, r26
    16e8:	f0 40       	sbci	r31, 0x00	; 0
    16ea:	a2 2f       	mov	r26, r18
    16ec:	23 2f       	mov	r18, r19
    16ee:	34 2f       	mov	r19, r20
    16f0:	44 27       	eor	r20, r20
    16f2:	58 5f       	subi	r21, 0xF8	; 248
    16f4:	f3 cf       	rjmp	.-26     	; 0x16dc <__addsf3x+0x34>
    16f6:	46 95       	lsr	r20
    16f8:	37 95       	ror	r19
    16fa:	27 95       	ror	r18
    16fc:	a7 95       	ror	r26
    16fe:	f0 40       	sbci	r31, 0x00	; 0
    1700:	53 95       	inc	r21
    1702:	c9 f7       	brne	.-14     	; 0x16f6 <__addsf3x+0x4e>
    1704:	7e f4       	brtc	.+30     	; 0x1724 <__addsf3x+0x7c>
    1706:	1f 16       	cp	r1, r31
    1708:	ba 0b       	sbc	r27, r26
    170a:	62 0b       	sbc	r22, r18
    170c:	73 0b       	sbc	r23, r19
    170e:	84 0b       	sbc	r24, r20
    1710:	ba f0       	brmi	.+46     	; 0x1740 <__addsf3x+0x98>
    1712:	91 50       	subi	r25, 0x01	; 1
    1714:	a1 f0       	breq	.+40     	; 0x173e <__addsf3x+0x96>
    1716:	ff 0f       	add	r31, r31
    1718:	bb 1f       	adc	r27, r27
    171a:	66 1f       	adc	r22, r22
    171c:	77 1f       	adc	r23, r23
    171e:	88 1f       	adc	r24, r24
    1720:	c2 f7       	brpl	.-16     	; 0x1712 <__addsf3x+0x6a>
    1722:	0e c0       	rjmp	.+28     	; 0x1740 <__addsf3x+0x98>
    1724:	ba 0f       	add	r27, r26
    1726:	62 1f       	adc	r22, r18
    1728:	73 1f       	adc	r23, r19
    172a:	84 1f       	adc	r24, r20
    172c:	48 f4       	brcc	.+18     	; 0x1740 <__addsf3x+0x98>
    172e:	87 95       	ror	r24
    1730:	77 95       	ror	r23
    1732:	67 95       	ror	r22
    1734:	b7 95       	ror	r27
    1736:	f7 95       	ror	r31
    1738:	9e 3f       	cpi	r25, 0xFE	; 254
    173a:	08 f0       	brcs	.+2      	; 0x173e <__addsf3x+0x96>
    173c:	b3 cf       	rjmp	.-154    	; 0x16a4 <__addsf3+0x1e>
    173e:	93 95       	inc	r25
    1740:	88 0f       	add	r24, r24
    1742:	08 f0       	brcs	.+2      	; 0x1746 <__addsf3x+0x9e>
    1744:	99 27       	eor	r25, r25
    1746:	ee 0f       	add	r30, r30
    1748:	97 95       	ror	r25
    174a:	87 95       	ror	r24
    174c:	08 95       	ret

0000174e <__divsf3>:
    174e:	0c d0       	rcall	.+24     	; 0x1768 <__divsf3x>
    1750:	eb c0       	rjmp	.+470    	; 0x1928 <__fp_round>
    1752:	e3 d0       	rcall	.+454    	; 0x191a <__fp_pscB>
    1754:	40 f0       	brcs	.+16     	; 0x1766 <__divsf3+0x18>
    1756:	da d0       	rcall	.+436    	; 0x190c <__fp_pscA>
    1758:	30 f0       	brcs	.+12     	; 0x1766 <__divsf3+0x18>
    175a:	21 f4       	brne	.+8      	; 0x1764 <__divsf3+0x16>
    175c:	5f 3f       	cpi	r21, 0xFF	; 255
    175e:	19 f0       	breq	.+6      	; 0x1766 <__divsf3+0x18>
    1760:	cc c0       	rjmp	.+408    	; 0x18fa <__fp_inf>
    1762:	51 11       	cpse	r21, r1
    1764:	15 c1       	rjmp	.+554    	; 0x1990 <__fp_szero>
    1766:	cf c0       	rjmp	.+414    	; 0x1906 <__fp_nan>

00001768 <__divsf3x>:
    1768:	f0 d0       	rcall	.+480    	; 0x194a <__fp_split3>
    176a:	98 f3       	brcs	.-26     	; 0x1752 <__divsf3+0x4>

0000176c <__divsf3_pse>:
    176c:	99 23       	and	r25, r25
    176e:	c9 f3       	breq	.-14     	; 0x1762 <__divsf3+0x14>
    1770:	55 23       	and	r21, r21
    1772:	b1 f3       	breq	.-20     	; 0x1760 <__divsf3+0x12>
    1774:	95 1b       	sub	r25, r21
    1776:	55 0b       	sbc	r21, r21
    1778:	bb 27       	eor	r27, r27
    177a:	aa 27       	eor	r26, r26
    177c:	62 17       	cp	r22, r18
    177e:	73 07       	cpc	r23, r19
    1780:	84 07       	cpc	r24, r20
    1782:	38 f0       	brcs	.+14     	; 0x1792 <__divsf3_pse+0x26>
    1784:	9f 5f       	subi	r25, 0xFF	; 255
    1786:	5f 4f       	sbci	r21, 0xFF	; 255
    1788:	22 0f       	add	r18, r18
    178a:	33 1f       	adc	r19, r19
    178c:	44 1f       	adc	r20, r20
    178e:	aa 1f       	adc	r26, r26
    1790:	a9 f3       	breq	.-22     	; 0x177c <__divsf3_pse+0x10>
    1792:	33 d0       	rcall	.+102    	; 0x17fa <__divsf3_pse+0x8e>
    1794:	0e 2e       	mov	r0, r30
    1796:	3a f0       	brmi	.+14     	; 0x17a6 <__divsf3_pse+0x3a>
    1798:	e0 e8       	ldi	r30, 0x80	; 128
    179a:	30 d0       	rcall	.+96     	; 0x17fc <__divsf3_pse+0x90>
    179c:	91 50       	subi	r25, 0x01	; 1
    179e:	50 40       	sbci	r21, 0x00	; 0
    17a0:	e6 95       	lsr	r30
    17a2:	00 1c       	adc	r0, r0
    17a4:	ca f7       	brpl	.-14     	; 0x1798 <__divsf3_pse+0x2c>
    17a6:	29 d0       	rcall	.+82     	; 0x17fa <__divsf3_pse+0x8e>
    17a8:	fe 2f       	mov	r31, r30
    17aa:	27 d0       	rcall	.+78     	; 0x17fa <__divsf3_pse+0x8e>
    17ac:	66 0f       	add	r22, r22
    17ae:	77 1f       	adc	r23, r23
    17b0:	88 1f       	adc	r24, r24
    17b2:	bb 1f       	adc	r27, r27
    17b4:	26 17       	cp	r18, r22
    17b6:	37 07       	cpc	r19, r23
    17b8:	48 07       	cpc	r20, r24
    17ba:	ab 07       	cpc	r26, r27
    17bc:	b0 e8       	ldi	r27, 0x80	; 128
    17be:	09 f0       	breq	.+2      	; 0x17c2 <__divsf3_pse+0x56>
    17c0:	bb 0b       	sbc	r27, r27
    17c2:	80 2d       	mov	r24, r0
    17c4:	bf 01       	movw	r22, r30
    17c6:	ff 27       	eor	r31, r31
    17c8:	93 58       	subi	r25, 0x83	; 131
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	2a f0       	brmi	.+10     	; 0x17d8 <__divsf3_pse+0x6c>
    17ce:	9e 3f       	cpi	r25, 0xFE	; 254
    17d0:	51 05       	cpc	r21, r1
    17d2:	68 f0       	brcs	.+26     	; 0x17ee <__divsf3_pse+0x82>
    17d4:	92 c0       	rjmp	.+292    	; 0x18fa <__fp_inf>
    17d6:	dc c0       	rjmp	.+440    	; 0x1990 <__fp_szero>
    17d8:	5f 3f       	cpi	r21, 0xFF	; 255
    17da:	ec f3       	brlt	.-6      	; 0x17d6 <__divsf3_pse+0x6a>
    17dc:	98 3e       	cpi	r25, 0xE8	; 232
    17de:	dc f3       	brlt	.-10     	; 0x17d6 <__divsf3_pse+0x6a>
    17e0:	86 95       	lsr	r24
    17e2:	77 95       	ror	r23
    17e4:	67 95       	ror	r22
    17e6:	b7 95       	ror	r27
    17e8:	f7 95       	ror	r31
    17ea:	9f 5f       	subi	r25, 0xFF	; 255
    17ec:	c9 f7       	brne	.-14     	; 0x17e0 <__divsf3_pse+0x74>
    17ee:	88 0f       	add	r24, r24
    17f0:	91 1d       	adc	r25, r1
    17f2:	96 95       	lsr	r25
    17f4:	87 95       	ror	r24
    17f6:	97 f9       	bld	r25, 7
    17f8:	08 95       	ret
    17fa:	e1 e0       	ldi	r30, 0x01	; 1
    17fc:	66 0f       	add	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	88 1f       	adc	r24, r24
    1802:	bb 1f       	adc	r27, r27
    1804:	62 17       	cp	r22, r18
    1806:	73 07       	cpc	r23, r19
    1808:	84 07       	cpc	r24, r20
    180a:	ba 07       	cpc	r27, r26
    180c:	20 f0       	brcs	.+8      	; 0x1816 <__divsf3_pse+0xaa>
    180e:	62 1b       	sub	r22, r18
    1810:	73 0b       	sbc	r23, r19
    1812:	84 0b       	sbc	r24, r20
    1814:	ba 0b       	sbc	r27, r26
    1816:	ee 1f       	adc	r30, r30
    1818:	88 f7       	brcc	.-30     	; 0x17fc <__divsf3_pse+0x90>
    181a:	e0 95       	com	r30
    181c:	08 95       	ret

0000181e <__fixsfsi>:
    181e:	04 d0       	rcall	.+8      	; 0x1828 <__fixunssfsi>
    1820:	68 94       	set
    1822:	b1 11       	cpse	r27, r1
    1824:	b5 c0       	rjmp	.+362    	; 0x1990 <__fp_szero>
    1826:	08 95       	ret

00001828 <__fixunssfsi>:
    1828:	98 d0       	rcall	.+304    	; 0x195a <__fp_splitA>
    182a:	88 f0       	brcs	.+34     	; 0x184e <__fixunssfsi+0x26>
    182c:	9f 57       	subi	r25, 0x7F	; 127
    182e:	90 f0       	brcs	.+36     	; 0x1854 <__fixunssfsi+0x2c>
    1830:	b9 2f       	mov	r27, r25
    1832:	99 27       	eor	r25, r25
    1834:	b7 51       	subi	r27, 0x17	; 23
    1836:	a0 f0       	brcs	.+40     	; 0x1860 <__fixunssfsi+0x38>
    1838:	d1 f0       	breq	.+52     	; 0x186e <__fixunssfsi+0x46>
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	1a f0       	brmi	.+6      	; 0x184a <__fixunssfsi+0x22>
    1844:	ba 95       	dec	r27
    1846:	c9 f7       	brne	.-14     	; 0x183a <__fixunssfsi+0x12>
    1848:	12 c0       	rjmp	.+36     	; 0x186e <__fixunssfsi+0x46>
    184a:	b1 30       	cpi	r27, 0x01	; 1
    184c:	81 f0       	breq	.+32     	; 0x186e <__fixunssfsi+0x46>
    184e:	9f d0       	rcall	.+318    	; 0x198e <__fp_zero>
    1850:	b1 e0       	ldi	r27, 0x01	; 1
    1852:	08 95       	ret
    1854:	9c c0       	rjmp	.+312    	; 0x198e <__fp_zero>
    1856:	67 2f       	mov	r22, r23
    1858:	78 2f       	mov	r23, r24
    185a:	88 27       	eor	r24, r24
    185c:	b8 5f       	subi	r27, 0xF8	; 248
    185e:	39 f0       	breq	.+14     	; 0x186e <__fixunssfsi+0x46>
    1860:	b9 3f       	cpi	r27, 0xF9	; 249
    1862:	cc f3       	brlt	.-14     	; 0x1856 <__fixunssfsi+0x2e>
    1864:	86 95       	lsr	r24
    1866:	77 95       	ror	r23
    1868:	67 95       	ror	r22
    186a:	b3 95       	inc	r27
    186c:	d9 f7       	brne	.-10     	; 0x1864 <__fixunssfsi+0x3c>
    186e:	3e f4       	brtc	.+14     	; 0x187e <__fixunssfsi+0x56>
    1870:	90 95       	com	r25
    1872:	80 95       	com	r24
    1874:	70 95       	com	r23
    1876:	61 95       	neg	r22
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	8f 4f       	sbci	r24, 0xFF	; 255
    187c:	9f 4f       	sbci	r25, 0xFF	; 255
    187e:	08 95       	ret

00001880 <__floatunsisf>:
    1880:	e8 94       	clt
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <__floatsisf+0x12>

00001884 <__floatsisf>:
    1884:	97 fb       	bst	r25, 7
    1886:	3e f4       	brtc	.+14     	; 0x1896 <__floatsisf+0x12>
    1888:	90 95       	com	r25
    188a:	80 95       	com	r24
    188c:	70 95       	com	r23
    188e:	61 95       	neg	r22
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	99 23       	and	r25, r25
    1898:	a9 f0       	breq	.+42     	; 0x18c4 <__floatsisf+0x40>
    189a:	f9 2f       	mov	r31, r25
    189c:	96 e9       	ldi	r25, 0x96	; 150
    189e:	bb 27       	eor	r27, r27
    18a0:	93 95       	inc	r25
    18a2:	f6 95       	lsr	r31
    18a4:	87 95       	ror	r24
    18a6:	77 95       	ror	r23
    18a8:	67 95       	ror	r22
    18aa:	b7 95       	ror	r27
    18ac:	f1 11       	cpse	r31, r1
    18ae:	f8 cf       	rjmp	.-16     	; 0x18a0 <__floatsisf+0x1c>
    18b0:	fa f4       	brpl	.+62     	; 0x18f0 <__floatsisf+0x6c>
    18b2:	bb 0f       	add	r27, r27
    18b4:	11 f4       	brne	.+4      	; 0x18ba <__floatsisf+0x36>
    18b6:	60 ff       	sbrs	r22, 0
    18b8:	1b c0       	rjmp	.+54     	; 0x18f0 <__floatsisf+0x6c>
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	16 c0       	rjmp	.+44     	; 0x18f0 <__floatsisf+0x6c>
    18c4:	88 23       	and	r24, r24
    18c6:	11 f0       	breq	.+4      	; 0x18cc <__floatsisf+0x48>
    18c8:	96 e9       	ldi	r25, 0x96	; 150
    18ca:	11 c0       	rjmp	.+34     	; 0x18ee <__floatsisf+0x6a>
    18cc:	77 23       	and	r23, r23
    18ce:	21 f0       	breq	.+8      	; 0x18d8 <__floatsisf+0x54>
    18d0:	9e e8       	ldi	r25, 0x8E	; 142
    18d2:	87 2f       	mov	r24, r23
    18d4:	76 2f       	mov	r23, r22
    18d6:	05 c0       	rjmp	.+10     	; 0x18e2 <__floatsisf+0x5e>
    18d8:	66 23       	and	r22, r22
    18da:	71 f0       	breq	.+28     	; 0x18f8 <__floatsisf+0x74>
    18dc:	96 e8       	ldi	r25, 0x86	; 134
    18de:	86 2f       	mov	r24, r22
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	2a f0       	brmi	.+10     	; 0x18f0 <__floatsisf+0x6c>
    18e6:	9a 95       	dec	r25
    18e8:	66 0f       	add	r22, r22
    18ea:	77 1f       	adc	r23, r23
    18ec:	88 1f       	adc	r24, r24
    18ee:	da f7       	brpl	.-10     	; 0x18e6 <__floatsisf+0x62>
    18f0:	88 0f       	add	r24, r24
    18f2:	96 95       	lsr	r25
    18f4:	87 95       	ror	r24
    18f6:	97 f9       	bld	r25, 7
    18f8:	08 95       	ret

000018fa <__fp_inf>:
    18fa:	97 f9       	bld	r25, 7
    18fc:	9f 67       	ori	r25, 0x7F	; 127
    18fe:	80 e8       	ldi	r24, 0x80	; 128
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	08 95       	ret

00001906 <__fp_nan>:
    1906:	9f ef       	ldi	r25, 0xFF	; 255
    1908:	80 ec       	ldi	r24, 0xC0	; 192
    190a:	08 95       	ret

0000190c <__fp_pscA>:
    190c:	00 24       	eor	r0, r0
    190e:	0a 94       	dec	r0
    1910:	16 16       	cp	r1, r22
    1912:	17 06       	cpc	r1, r23
    1914:	18 06       	cpc	r1, r24
    1916:	09 06       	cpc	r0, r25
    1918:	08 95       	ret

0000191a <__fp_pscB>:
    191a:	00 24       	eor	r0, r0
    191c:	0a 94       	dec	r0
    191e:	12 16       	cp	r1, r18
    1920:	13 06       	cpc	r1, r19
    1922:	14 06       	cpc	r1, r20
    1924:	05 06       	cpc	r0, r21
    1926:	08 95       	ret

00001928 <__fp_round>:
    1928:	09 2e       	mov	r0, r25
    192a:	03 94       	inc	r0
    192c:	00 0c       	add	r0, r0
    192e:	11 f4       	brne	.+4      	; 0x1934 <__fp_round+0xc>
    1930:	88 23       	and	r24, r24
    1932:	52 f0       	brmi	.+20     	; 0x1948 <__fp_round+0x20>
    1934:	bb 0f       	add	r27, r27
    1936:	40 f4       	brcc	.+16     	; 0x1948 <__fp_round+0x20>
    1938:	bf 2b       	or	r27, r31
    193a:	11 f4       	brne	.+4      	; 0x1940 <__fp_round+0x18>
    193c:	60 ff       	sbrs	r22, 0
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <__fp_round+0x20>
    1940:	6f 5f       	subi	r22, 0xFF	; 255
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	8f 4f       	sbci	r24, 0xFF	; 255
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	08 95       	ret

0000194a <__fp_split3>:
    194a:	57 fd       	sbrc	r21, 7
    194c:	90 58       	subi	r25, 0x80	; 128
    194e:	44 0f       	add	r20, r20
    1950:	55 1f       	adc	r21, r21
    1952:	59 f0       	breq	.+22     	; 0x196a <__fp_splitA+0x10>
    1954:	5f 3f       	cpi	r21, 0xFF	; 255
    1956:	71 f0       	breq	.+28     	; 0x1974 <__fp_splitA+0x1a>
    1958:	47 95       	ror	r20

0000195a <__fp_splitA>:
    195a:	88 0f       	add	r24, r24
    195c:	97 fb       	bst	r25, 7
    195e:	99 1f       	adc	r25, r25
    1960:	61 f0       	breq	.+24     	; 0x197a <__fp_splitA+0x20>
    1962:	9f 3f       	cpi	r25, 0xFF	; 255
    1964:	79 f0       	breq	.+30     	; 0x1984 <__fp_splitA+0x2a>
    1966:	87 95       	ror	r24
    1968:	08 95       	ret
    196a:	12 16       	cp	r1, r18
    196c:	13 06       	cpc	r1, r19
    196e:	14 06       	cpc	r1, r20
    1970:	55 1f       	adc	r21, r21
    1972:	f2 cf       	rjmp	.-28     	; 0x1958 <__fp_split3+0xe>
    1974:	46 95       	lsr	r20
    1976:	f1 df       	rcall	.-30     	; 0x195a <__fp_splitA>
    1978:	08 c0       	rjmp	.+16     	; 0x198a <__fp_splitA+0x30>
    197a:	16 16       	cp	r1, r22
    197c:	17 06       	cpc	r1, r23
    197e:	18 06       	cpc	r1, r24
    1980:	99 1f       	adc	r25, r25
    1982:	f1 cf       	rjmp	.-30     	; 0x1966 <__fp_splitA+0xc>
    1984:	86 95       	lsr	r24
    1986:	71 05       	cpc	r23, r1
    1988:	61 05       	cpc	r22, r1
    198a:	08 94       	sec
    198c:	08 95       	ret

0000198e <__fp_zero>:
    198e:	e8 94       	clt

00001990 <__fp_szero>:
    1990:	bb 27       	eor	r27, r27
    1992:	66 27       	eor	r22, r22
    1994:	77 27       	eor	r23, r23
    1996:	cb 01       	movw	r24, r22
    1998:	97 f9       	bld	r25, 7
    199a:	08 95       	ret

0000199c <__divmodhi4>:
    199c:	97 fb       	bst	r25, 7
    199e:	07 2e       	mov	r0, r23
    19a0:	16 f4       	brtc	.+4      	; 0x19a6 <__divmodhi4+0xa>
    19a2:	00 94       	com	r0
    19a4:	07 d0       	rcall	.+14     	; 0x19b4 <__divmodhi4_neg1>
    19a6:	77 fd       	sbrc	r23, 7
    19a8:	09 d0       	rcall	.+18     	; 0x19bc <__divmodhi4_neg2>
    19aa:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__udivmodhi4>
    19ae:	07 fc       	sbrc	r0, 7
    19b0:	05 d0       	rcall	.+10     	; 0x19bc <__divmodhi4_neg2>
    19b2:	3e f4       	brtc	.+14     	; 0x19c2 <__divmodhi4_exit>

000019b4 <__divmodhi4_neg1>:
    19b4:	90 95       	com	r25
    19b6:	81 95       	neg	r24
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	08 95       	ret

000019bc <__divmodhi4_neg2>:
    19bc:	70 95       	com	r23
    19be:	61 95       	neg	r22
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255

000019c2 <__divmodhi4_exit>:
    19c2:	08 95       	ret

000019c4 <__tablejump2__>:
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31

000019c8 <__tablejump__>:
    19c8:	05 90       	lpm	r0, Z+
    19ca:	f4 91       	lpm	r31, Z
    19cc:	e0 2d       	mov	r30, r0
    19ce:	09 94       	ijmp

000019d0 <__udivmodhi4>:
    19d0:	aa 1b       	sub	r26, r26
    19d2:	bb 1b       	sub	r27, r27
    19d4:	51 e1       	ldi	r21, 0x11	; 17
    19d6:	07 c0       	rjmp	.+14     	; 0x19e6 <__udivmodhi4_ep>

000019d8 <__udivmodhi4_loop>:
    19d8:	aa 1f       	adc	r26, r26
    19da:	bb 1f       	adc	r27, r27
    19dc:	a6 17       	cp	r26, r22
    19de:	b7 07       	cpc	r27, r23
    19e0:	10 f0       	brcs	.+4      	; 0x19e6 <__udivmodhi4_ep>
    19e2:	a6 1b       	sub	r26, r22
    19e4:	b7 0b       	sbc	r27, r23

000019e6 <__udivmodhi4_ep>:
    19e6:	88 1f       	adc	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	5a 95       	dec	r21
    19ec:	a9 f7       	brne	.-22     	; 0x19d8 <__udivmodhi4_loop>
    19ee:	80 95       	com	r24
    19f0:	90 95       	com	r25
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	08 95       	ret

000019f8 <fdevopen>:
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	ec 01       	movw	r28, r24
    1a02:	8b 01       	movw	r16, r22
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	31 f4       	brne	.+12     	; 0x1a14 <fdevopen+0x1c>
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	19 f4       	brne	.+6      	; 0x1a14 <fdevopen+0x1c>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	38 c0       	rjmp	.+112    	; 0x1a84 <fdevopen+0x8c>
    1a14:	6e e0       	ldi	r22, 0x0E	; 14
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <calloc>
    1a20:	fc 01       	movw	r30, r24
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	a1 f3       	breq	.-24     	; 0x1a0e <fdevopen+0x16>
    1a26:	80 e8       	ldi	r24, 0x80	; 128
    1a28:	83 83       	std	Z+3, r24	; 0x03
    1a2a:	01 15       	cp	r16, r1
    1a2c:	11 05       	cpc	r17, r1
    1a2e:	71 f0       	breq	.+28     	; 0x1a4c <fdevopen+0x54>
    1a30:	13 87       	std	Z+11, r17	; 0x0b
    1a32:	02 87       	std	Z+10, r16	; 0x0a
    1a34:	81 e8       	ldi	r24, 0x81	; 129
    1a36:	83 83       	std	Z+3, r24	; 0x03
    1a38:	80 91 25 04 	lds	r24, 0x0425
    1a3c:	90 91 26 04 	lds	r25, 0x0426
    1a40:	89 2b       	or	r24, r25
    1a42:	21 f4       	brne	.+8      	; 0x1a4c <fdevopen+0x54>
    1a44:	f0 93 26 04 	sts	0x0426, r31
    1a48:	e0 93 25 04 	sts	0x0425, r30
    1a4c:	20 97       	sbiw	r28, 0x00	; 0
    1a4e:	c9 f0       	breq	.+50     	; 0x1a82 <fdevopen+0x8a>
    1a50:	d1 87       	std	Z+9, r29	; 0x09
    1a52:	c0 87       	std	Z+8, r28	; 0x08
    1a54:	83 81       	ldd	r24, Z+3	; 0x03
    1a56:	82 60       	ori	r24, 0x02	; 2
    1a58:	83 83       	std	Z+3, r24	; 0x03
    1a5a:	80 91 27 04 	lds	r24, 0x0427
    1a5e:	90 91 28 04 	lds	r25, 0x0428
    1a62:	89 2b       	or	r24, r25
    1a64:	71 f4       	brne	.+28     	; 0x1a82 <fdevopen+0x8a>
    1a66:	f0 93 28 04 	sts	0x0428, r31
    1a6a:	e0 93 27 04 	sts	0x0427, r30
    1a6e:	80 91 29 04 	lds	r24, 0x0429
    1a72:	90 91 2a 04 	lds	r25, 0x042A
    1a76:	89 2b       	or	r24, r25
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <fdevopen+0x8a>
    1a7a:	f0 93 2a 04 	sts	0x042A, r31
    1a7e:	e0 93 29 04 	sts	0x0429, r30
    1a82:	cf 01       	movw	r24, r30
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	08 95       	ret

00001a8e <printf>:
    1a8e:	a0 e0       	ldi	r26, 0x00	; 0
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	ed e4       	ldi	r30, 0x4D	; 77
    1a94:	fd e0       	ldi	r31, 0x0D	; 13
    1a96:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x20>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	35 96       	adiw	r30, 0x05	; 5
    1a9e:	61 91       	ld	r22, Z+
    1aa0:	71 91       	ld	r23, Z+
    1aa2:	af 01       	movw	r20, r30
    1aa4:	80 91 27 04 	lds	r24, 0x0427
    1aa8:	90 91 28 04 	lds	r25, 0x0428
    1aac:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <vfprintf>
    1ab0:	e2 e0       	ldi	r30, 0x02	; 2
    1ab2:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x20>

00001ab6 <puts>:
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	e0 91 27 04 	lds	r30, 0x0427
    1ac2:	f0 91 28 04 	lds	r31, 0x0428
    1ac6:	23 81       	ldd	r18, Z+3	; 0x03
    1ac8:	21 ff       	sbrs	r18, 1
    1aca:	1b c0       	rjmp	.+54     	; 0x1b02 <puts+0x4c>
    1acc:	ec 01       	movw	r28, r24
    1ace:	00 e0       	ldi	r16, 0x00	; 0
    1ad0:	10 e0       	ldi	r17, 0x00	; 0
    1ad2:	89 91       	ld	r24, Y+
    1ad4:	60 91 27 04 	lds	r22, 0x0427
    1ad8:	70 91 28 04 	lds	r23, 0x0428
    1adc:	db 01       	movw	r26, r22
    1ade:	18 96       	adiw	r26, 0x08	; 8
    1ae0:	ed 91       	ld	r30, X+
    1ae2:	fc 91       	ld	r31, X
    1ae4:	19 97       	sbiw	r26, 0x09	; 9
    1ae6:	88 23       	and	r24, r24
    1ae8:	31 f0       	breq	.+12     	; 0x1af6 <puts+0x40>
    1aea:	09 95       	icall
    1aec:	89 2b       	or	r24, r25
    1aee:	89 f3       	breq	.-30     	; 0x1ad2 <puts+0x1c>
    1af0:	0f ef       	ldi	r16, 0xFF	; 255
    1af2:	1f ef       	ldi	r17, 0xFF	; 255
    1af4:	ee cf       	rjmp	.-36     	; 0x1ad2 <puts+0x1c>
    1af6:	8a e0       	ldi	r24, 0x0A	; 10
    1af8:	09 95       	icall
    1afa:	89 2b       	or	r24, r25
    1afc:	11 f4       	brne	.+4      	; 0x1b02 <puts+0x4c>
    1afe:	c8 01       	movw	r24, r16
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <puts+0x50>
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	9f ef       	ldi	r25, 0xFF	; 255
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	08 95       	ret

00001b10 <sprintf>:
    1b10:	ae e0       	ldi	r26, 0x0E	; 14
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	ee e8       	ldi	r30, 0x8E	; 142
    1b16:	fd e0       	ldi	r31, 0x0D	; 13
    1b18:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__prologue_saves__+0x1c>
    1b1c:	0d 89       	ldd	r16, Y+21	; 0x15
    1b1e:	1e 89       	ldd	r17, Y+22	; 0x16
    1b20:	86 e0       	ldi	r24, 0x06	; 6
    1b22:	8c 83       	std	Y+4, r24	; 0x04
    1b24:	1a 83       	std	Y+2, r17	; 0x02
    1b26:	09 83       	std	Y+1, r16	; 0x01
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	9f e7       	ldi	r25, 0x7F	; 127
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	ae 01       	movw	r20, r28
    1b32:	47 5e       	subi	r20, 0xE7	; 231
    1b34:	5f 4f       	sbci	r21, 0xFF	; 255
    1b36:	6f 89       	ldd	r22, Y+23	; 0x17
    1b38:	78 8d       	ldd	r23, Y+24	; 0x18
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <vfprintf>
    1b42:	ef 81       	ldd	r30, Y+7	; 0x07
    1b44:	f8 85       	ldd	r31, Y+8	; 0x08
    1b46:	e0 0f       	add	r30, r16
    1b48:	f1 1f       	adc	r31, r17
    1b4a:	10 82       	st	Z, r1
    1b4c:	2e 96       	adiw	r28, 0x0e	; 14
    1b4e:	e4 e0       	ldi	r30, 0x04	; 4
    1b50:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__epilogue_restores__+0x1c>

00001b54 <vfprintf>:
    1b54:	ac e0       	ldi	r26, 0x0C	; 12
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e0 eb       	ldi	r30, 0xB0	; 176
    1b5a:	fd e0       	ldi	r31, 0x0D	; 13
    1b5c:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__>
    1b60:	7c 01       	movw	r14, r24
    1b62:	6b 01       	movw	r12, r22
    1b64:	8a 01       	movw	r16, r20
    1b66:	fc 01       	movw	r30, r24
    1b68:	17 82       	std	Z+7, r1	; 0x07
    1b6a:	16 82       	std	Z+6, r1	; 0x06
    1b6c:	83 81       	ldd	r24, Z+3	; 0x03
    1b6e:	81 ff       	sbrs	r24, 1
    1b70:	bd c1       	rjmp	.+890    	; 0x1eec <vfprintf+0x398>
    1b72:	ce 01       	movw	r24, r28
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	4c 01       	movw	r8, r24
    1b78:	f7 01       	movw	r30, r14
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	f6 01       	movw	r30, r12
    1b7e:	93 fd       	sbrc	r25, 3
    1b80:	85 91       	lpm	r24, Z+
    1b82:	93 ff       	sbrs	r25, 3
    1b84:	81 91       	ld	r24, Z+
    1b86:	6f 01       	movw	r12, r30
    1b88:	88 23       	and	r24, r24
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <vfprintf+0x3a>
    1b8c:	ab c1       	rjmp	.+854    	; 0x1ee4 <vfprintf+0x390>
    1b8e:	85 32       	cpi	r24, 0x25	; 37
    1b90:	39 f4       	brne	.+14     	; 0x1ba0 <vfprintf+0x4c>
    1b92:	93 fd       	sbrc	r25, 3
    1b94:	85 91       	lpm	r24, Z+
    1b96:	93 ff       	sbrs	r25, 3
    1b98:	81 91       	ld	r24, Z+
    1b9a:	6f 01       	movw	r12, r30
    1b9c:	85 32       	cpi	r24, 0x25	; 37
    1b9e:	29 f4       	brne	.+10     	; 0x1baa <vfprintf+0x56>
    1ba0:	b7 01       	movw	r22, r14
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1ba8:	e7 cf       	rjmp	.-50     	; 0x1b78 <vfprintf+0x24>
    1baa:	51 2c       	mov	r5, r1
    1bac:	31 2c       	mov	r3, r1
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	20 32       	cpi	r18, 0x20	; 32
    1bb2:	a0 f4       	brcc	.+40     	; 0x1bdc <vfprintf+0x88>
    1bb4:	8b 32       	cpi	r24, 0x2B	; 43
    1bb6:	69 f0       	breq	.+26     	; 0x1bd2 <vfprintf+0x7e>
    1bb8:	30 f4       	brcc	.+12     	; 0x1bc6 <vfprintf+0x72>
    1bba:	80 32       	cpi	r24, 0x20	; 32
    1bbc:	59 f0       	breq	.+22     	; 0x1bd4 <vfprintf+0x80>
    1bbe:	83 32       	cpi	r24, 0x23	; 35
    1bc0:	69 f4       	brne	.+26     	; 0x1bdc <vfprintf+0x88>
    1bc2:	20 61       	ori	r18, 0x10	; 16
    1bc4:	2c c0       	rjmp	.+88     	; 0x1c1e <vfprintf+0xca>
    1bc6:	8d 32       	cpi	r24, 0x2D	; 45
    1bc8:	39 f0       	breq	.+14     	; 0x1bd8 <vfprintf+0x84>
    1bca:	80 33       	cpi	r24, 0x30	; 48
    1bcc:	39 f4       	brne	.+14     	; 0x1bdc <vfprintf+0x88>
    1bce:	21 60       	ori	r18, 0x01	; 1
    1bd0:	26 c0       	rjmp	.+76     	; 0x1c1e <vfprintf+0xca>
    1bd2:	22 60       	ori	r18, 0x02	; 2
    1bd4:	24 60       	ori	r18, 0x04	; 4
    1bd6:	23 c0       	rjmp	.+70     	; 0x1c1e <vfprintf+0xca>
    1bd8:	28 60       	ori	r18, 0x08	; 8
    1bda:	21 c0       	rjmp	.+66     	; 0x1c1e <vfprintf+0xca>
    1bdc:	27 fd       	sbrc	r18, 7
    1bde:	27 c0       	rjmp	.+78     	; 0x1c2e <vfprintf+0xda>
    1be0:	30 ed       	ldi	r19, 0xD0	; 208
    1be2:	38 0f       	add	r19, r24
    1be4:	3a 30       	cpi	r19, 0x0A	; 10
    1be6:	78 f4       	brcc	.+30     	; 0x1c06 <vfprintf+0xb2>
    1be8:	26 ff       	sbrs	r18, 6
    1bea:	06 c0       	rjmp	.+12     	; 0x1bf8 <vfprintf+0xa4>
    1bec:	fa e0       	ldi	r31, 0x0A	; 10
    1bee:	5f 9e       	mul	r5, r31
    1bf0:	30 0d       	add	r19, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	53 2e       	mov	r5, r19
    1bf6:	13 c0       	rjmp	.+38     	; 0x1c1e <vfprintf+0xca>
    1bf8:	8a e0       	ldi	r24, 0x0A	; 10
    1bfa:	38 9e       	mul	r3, r24
    1bfc:	30 0d       	add	r19, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	33 2e       	mov	r3, r19
    1c02:	20 62       	ori	r18, 0x20	; 32
    1c04:	0c c0       	rjmp	.+24     	; 0x1c1e <vfprintf+0xca>
    1c06:	8e 32       	cpi	r24, 0x2E	; 46
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <vfprintf+0xbe>
    1c0a:	26 fd       	sbrc	r18, 6
    1c0c:	6b c1       	rjmp	.+726    	; 0x1ee4 <vfprintf+0x390>
    1c0e:	20 64       	ori	r18, 0x40	; 64
    1c10:	06 c0       	rjmp	.+12     	; 0x1c1e <vfprintf+0xca>
    1c12:	8c 36       	cpi	r24, 0x6C	; 108
    1c14:	11 f4       	brne	.+4      	; 0x1c1a <vfprintf+0xc6>
    1c16:	20 68       	ori	r18, 0x80	; 128
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <vfprintf+0xca>
    1c1a:	88 36       	cpi	r24, 0x68	; 104
    1c1c:	41 f4       	brne	.+16     	; 0x1c2e <vfprintf+0xda>
    1c1e:	f6 01       	movw	r30, r12
    1c20:	93 fd       	sbrc	r25, 3
    1c22:	85 91       	lpm	r24, Z+
    1c24:	93 ff       	sbrs	r25, 3
    1c26:	81 91       	ld	r24, Z+
    1c28:	6f 01       	movw	r12, r30
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	c1 cf       	rjmp	.-126    	; 0x1bb0 <vfprintf+0x5c>
    1c2e:	98 2f       	mov	r25, r24
    1c30:	9f 7d       	andi	r25, 0xDF	; 223
    1c32:	95 54       	subi	r25, 0x45	; 69
    1c34:	93 30       	cpi	r25, 0x03	; 3
    1c36:	28 f4       	brcc	.+10     	; 0x1c42 <vfprintf+0xee>
    1c38:	0c 5f       	subi	r16, 0xFC	; 252
    1c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3c:	ff e3       	ldi	r31, 0x3F	; 63
    1c3e:	f9 83       	std	Y+1, r31	; 0x01
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <vfprintf+0x108>
    1c42:	83 36       	cpi	r24, 0x63	; 99
    1c44:	31 f0       	breq	.+12     	; 0x1c52 <vfprintf+0xfe>
    1c46:	83 37       	cpi	r24, 0x73	; 115
    1c48:	71 f0       	breq	.+28     	; 0x1c66 <vfprintf+0x112>
    1c4a:	83 35       	cpi	r24, 0x53	; 83
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <vfprintf+0xfc>
    1c4e:	5b c0       	rjmp	.+182    	; 0x1d06 <vfprintf+0x1b2>
    1c50:	22 c0       	rjmp	.+68     	; 0x1c96 <vfprintf+0x142>
    1c52:	f8 01       	movw	r30, r16
    1c54:	80 81       	ld	r24, Z
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	0e 5f       	subi	r16, 0xFE	; 254
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	44 24       	eor	r4, r4
    1c5e:	43 94       	inc	r4
    1c60:	51 2c       	mov	r5, r1
    1c62:	54 01       	movw	r10, r8
    1c64:	15 c0       	rjmp	.+42     	; 0x1c90 <vfprintf+0x13c>
    1c66:	38 01       	movw	r6, r16
    1c68:	f2 e0       	ldi	r31, 0x02	; 2
    1c6a:	6f 0e       	add	r6, r31
    1c6c:	71 1c       	adc	r7, r1
    1c6e:	f8 01       	movw	r30, r16
    1c70:	a0 80       	ld	r10, Z
    1c72:	b1 80       	ldd	r11, Z+1	; 0x01
    1c74:	26 ff       	sbrs	r18, 6
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <vfprintf+0x12a>
    1c78:	65 2d       	mov	r22, r5
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <vfprintf+0x12e>
    1c7e:	6f ef       	ldi	r22, 0xFF	; 255
    1c80:	7f ef       	ldi	r23, 0xFF	; 255
    1c82:	c5 01       	movw	r24, r10
    1c84:	2c 87       	std	Y+12, r18	; 0x0c
    1c86:	0e 94 e6 10 	call	0x21cc	; 0x21cc <strnlen>
    1c8a:	2c 01       	movw	r4, r24
    1c8c:	83 01       	movw	r16, r6
    1c8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c90:	2f 77       	andi	r18, 0x7F	; 127
    1c92:	22 2e       	mov	r2, r18
    1c94:	17 c0       	rjmp	.+46     	; 0x1cc4 <vfprintf+0x170>
    1c96:	38 01       	movw	r6, r16
    1c98:	f2 e0       	ldi	r31, 0x02	; 2
    1c9a:	6f 0e       	add	r6, r31
    1c9c:	71 1c       	adc	r7, r1
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	a0 80       	ld	r10, Z
    1ca2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ca4:	26 ff       	sbrs	r18, 6
    1ca6:	03 c0       	rjmp	.+6      	; 0x1cae <vfprintf+0x15a>
    1ca8:	65 2d       	mov	r22, r5
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <vfprintf+0x15e>
    1cae:	6f ef       	ldi	r22, 0xFF	; 255
    1cb0:	7f ef       	ldi	r23, 0xFF	; 255
    1cb2:	c5 01       	movw	r24, r10
    1cb4:	2c 87       	std	Y+12, r18	; 0x0c
    1cb6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <strnlen_P>
    1cba:	2c 01       	movw	r4, r24
    1cbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cbe:	20 68       	ori	r18, 0x80	; 128
    1cc0:	22 2e       	mov	r2, r18
    1cc2:	83 01       	movw	r16, r6
    1cc4:	23 fc       	sbrc	r2, 3
    1cc6:	1b c0       	rjmp	.+54     	; 0x1cfe <vfprintf+0x1aa>
    1cc8:	83 2d       	mov	r24, r3
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	48 16       	cp	r4, r24
    1cce:	59 06       	cpc	r5, r25
    1cd0:	b0 f4       	brcc	.+44     	; 0x1cfe <vfprintf+0x1aa>
    1cd2:	b7 01       	movw	r22, r14
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1cdc:	3a 94       	dec	r3
    1cde:	f4 cf       	rjmp	.-24     	; 0x1cc8 <vfprintf+0x174>
    1ce0:	f5 01       	movw	r30, r10
    1ce2:	27 fc       	sbrc	r2, 7
    1ce4:	85 91       	lpm	r24, Z+
    1ce6:	27 fe       	sbrs	r2, 7
    1ce8:	81 91       	ld	r24, Z+
    1cea:	5f 01       	movw	r10, r30
    1cec:	b7 01       	movw	r22, r14
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1cf4:	31 10       	cpse	r3, r1
    1cf6:	3a 94       	dec	r3
    1cf8:	f1 e0       	ldi	r31, 0x01	; 1
    1cfa:	4f 1a       	sub	r4, r31
    1cfc:	51 08       	sbc	r5, r1
    1cfe:	41 14       	cp	r4, r1
    1d00:	51 04       	cpc	r5, r1
    1d02:	71 f7       	brne	.-36     	; 0x1ce0 <vfprintf+0x18c>
    1d04:	e5 c0       	rjmp	.+458    	; 0x1ed0 <vfprintf+0x37c>
    1d06:	84 36       	cpi	r24, 0x64	; 100
    1d08:	11 f0       	breq	.+4      	; 0x1d0e <vfprintf+0x1ba>
    1d0a:	89 36       	cpi	r24, 0x69	; 105
    1d0c:	39 f5       	brne	.+78     	; 0x1d5c <vfprintf+0x208>
    1d0e:	f8 01       	movw	r30, r16
    1d10:	27 ff       	sbrs	r18, 7
    1d12:	07 c0       	rjmp	.+14     	; 0x1d22 <vfprintf+0x1ce>
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	0c 5f       	subi	r16, 0xFC	; 252
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	08 c0       	rjmp	.+16     	; 0x1d32 <vfprintf+0x1de>
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	88 27       	eor	r24, r24
    1d28:	77 fd       	sbrc	r23, 7
    1d2a:	80 95       	com	r24
    1d2c:	98 2f       	mov	r25, r24
    1d2e:	0e 5f       	subi	r16, 0xFE	; 254
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	2f 76       	andi	r18, 0x6F	; 111
    1d34:	b2 2e       	mov	r11, r18
    1d36:	97 ff       	sbrs	r25, 7
    1d38:	09 c0       	rjmp	.+18     	; 0x1d4c <vfprintf+0x1f8>
    1d3a:	90 95       	com	r25
    1d3c:	80 95       	com	r24
    1d3e:	70 95       	com	r23
    1d40:	61 95       	neg	r22
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	8f 4f       	sbci	r24, 0xFF	; 255
    1d46:	9f 4f       	sbci	r25, 0xFF	; 255
    1d48:	20 68       	ori	r18, 0x80	; 128
    1d4a:	b2 2e       	mov	r11, r18
    1d4c:	2a e0       	ldi	r18, 0x0A	; 10
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	a4 01       	movw	r20, r8
    1d52:	0e 94 23 11 	call	0x2246	; 0x2246 <__ultoa_invert>
    1d56:	a8 2e       	mov	r10, r24
    1d58:	a8 18       	sub	r10, r8
    1d5a:	44 c0       	rjmp	.+136    	; 0x1de4 <vfprintf+0x290>
    1d5c:	85 37       	cpi	r24, 0x75	; 117
    1d5e:	29 f4       	brne	.+10     	; 0x1d6a <vfprintf+0x216>
    1d60:	2f 7e       	andi	r18, 0xEF	; 239
    1d62:	b2 2e       	mov	r11, r18
    1d64:	2a e0       	ldi	r18, 0x0A	; 10
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	25 c0       	rjmp	.+74     	; 0x1db4 <vfprintf+0x260>
    1d6a:	f2 2f       	mov	r31, r18
    1d6c:	f9 7f       	andi	r31, 0xF9	; 249
    1d6e:	bf 2e       	mov	r11, r31
    1d70:	8f 36       	cpi	r24, 0x6F	; 111
    1d72:	c1 f0       	breq	.+48     	; 0x1da4 <vfprintf+0x250>
    1d74:	18 f4       	brcc	.+6      	; 0x1d7c <vfprintf+0x228>
    1d76:	88 35       	cpi	r24, 0x58	; 88
    1d78:	79 f0       	breq	.+30     	; 0x1d98 <vfprintf+0x244>
    1d7a:	b4 c0       	rjmp	.+360    	; 0x1ee4 <vfprintf+0x390>
    1d7c:	80 37       	cpi	r24, 0x70	; 112
    1d7e:	19 f0       	breq	.+6      	; 0x1d86 <vfprintf+0x232>
    1d80:	88 37       	cpi	r24, 0x78	; 120
    1d82:	21 f0       	breq	.+8      	; 0x1d8c <vfprintf+0x238>
    1d84:	af c0       	rjmp	.+350    	; 0x1ee4 <vfprintf+0x390>
    1d86:	2f 2f       	mov	r18, r31
    1d88:	20 61       	ori	r18, 0x10	; 16
    1d8a:	b2 2e       	mov	r11, r18
    1d8c:	b4 fe       	sbrs	r11, 4
    1d8e:	0d c0       	rjmp	.+26     	; 0x1daa <vfprintf+0x256>
    1d90:	8b 2d       	mov	r24, r11
    1d92:	84 60       	ori	r24, 0x04	; 4
    1d94:	b8 2e       	mov	r11, r24
    1d96:	09 c0       	rjmp	.+18     	; 0x1daa <vfprintf+0x256>
    1d98:	24 ff       	sbrs	r18, 4
    1d9a:	0a c0       	rjmp	.+20     	; 0x1db0 <vfprintf+0x25c>
    1d9c:	9f 2f       	mov	r25, r31
    1d9e:	96 60       	ori	r25, 0x06	; 6
    1da0:	b9 2e       	mov	r11, r25
    1da2:	06 c0       	rjmp	.+12     	; 0x1db0 <vfprintf+0x25c>
    1da4:	28 e0       	ldi	r18, 0x08	; 8
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <vfprintf+0x260>
    1daa:	20 e1       	ldi	r18, 0x10	; 16
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <vfprintf+0x260>
    1db0:	20 e1       	ldi	r18, 0x10	; 16
    1db2:	32 e0       	ldi	r19, 0x02	; 2
    1db4:	f8 01       	movw	r30, r16
    1db6:	b7 fe       	sbrs	r11, 7
    1db8:	07 c0       	rjmp	.+14     	; 0x1dc8 <vfprintf+0x274>
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	0c 5f       	subi	r16, 0xFC	; 252
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	06 c0       	rjmp	.+12     	; 0x1dd4 <vfprintf+0x280>
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 5f       	subi	r16, 0xFE	; 254
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	a4 01       	movw	r20, r8
    1dd6:	0e 94 23 11 	call	0x2246	; 0x2246 <__ultoa_invert>
    1dda:	a8 2e       	mov	r10, r24
    1ddc:	a8 18       	sub	r10, r8
    1dde:	fb 2d       	mov	r31, r11
    1de0:	ff 77       	andi	r31, 0x7F	; 127
    1de2:	bf 2e       	mov	r11, r31
    1de4:	b6 fe       	sbrs	r11, 6
    1de6:	0b c0       	rjmp	.+22     	; 0x1dfe <vfprintf+0x2aa>
    1de8:	2b 2d       	mov	r18, r11
    1dea:	2e 7f       	andi	r18, 0xFE	; 254
    1dec:	a5 14       	cp	r10, r5
    1dee:	50 f4       	brcc	.+20     	; 0x1e04 <vfprintf+0x2b0>
    1df0:	b4 fe       	sbrs	r11, 4
    1df2:	0a c0       	rjmp	.+20     	; 0x1e08 <vfprintf+0x2b4>
    1df4:	b2 fc       	sbrc	r11, 2
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <vfprintf+0x2b4>
    1df8:	2b 2d       	mov	r18, r11
    1dfa:	2e 7e       	andi	r18, 0xEE	; 238
    1dfc:	05 c0       	rjmp	.+10     	; 0x1e08 <vfprintf+0x2b4>
    1dfe:	7a 2c       	mov	r7, r10
    1e00:	2b 2d       	mov	r18, r11
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <vfprintf+0x2b6>
    1e04:	7a 2c       	mov	r7, r10
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <vfprintf+0x2b6>
    1e08:	75 2c       	mov	r7, r5
    1e0a:	24 ff       	sbrs	r18, 4
    1e0c:	0d c0       	rjmp	.+26     	; 0x1e28 <vfprintf+0x2d4>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ea 0d       	add	r30, r10
    1e12:	f1 1d       	adc	r31, r1
    1e14:	80 81       	ld	r24, Z
    1e16:	80 33       	cpi	r24, 0x30	; 48
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <vfprintf+0x2ca>
    1e1a:	29 7e       	andi	r18, 0xE9	; 233
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <vfprintf+0x2dc>
    1e1e:	22 ff       	sbrs	r18, 2
    1e20:	06 c0       	rjmp	.+12     	; 0x1e2e <vfprintf+0x2da>
    1e22:	73 94       	inc	r7
    1e24:	73 94       	inc	r7
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <vfprintf+0x2dc>
    1e28:	82 2f       	mov	r24, r18
    1e2a:	86 78       	andi	r24, 0x86	; 134
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <vfprintf+0x2dc>
    1e2e:	73 94       	inc	r7
    1e30:	23 fd       	sbrc	r18, 3
    1e32:	13 c0       	rjmp	.+38     	; 0x1e5a <vfprintf+0x306>
    1e34:	20 ff       	sbrs	r18, 0
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <vfprintf+0x2f0>
    1e38:	5a 2c       	mov	r5, r10
    1e3a:	73 14       	cp	r7, r3
    1e3c:	18 f4       	brcc	.+6      	; 0x1e44 <vfprintf+0x2f0>
    1e3e:	53 0c       	add	r5, r3
    1e40:	57 18       	sub	r5, r7
    1e42:	73 2c       	mov	r7, r3
    1e44:	73 14       	cp	r7, r3
    1e46:	68 f4       	brcc	.+26     	; 0x1e62 <vfprintf+0x30e>
    1e48:	b7 01       	movw	r22, r14
    1e4a:	80 e2       	ldi	r24, 0x20	; 32
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	2c 87       	std	Y+12, r18	; 0x0c
    1e50:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1e54:	73 94       	inc	r7
    1e56:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e58:	f5 cf       	rjmp	.-22     	; 0x1e44 <vfprintf+0x2f0>
    1e5a:	73 14       	cp	r7, r3
    1e5c:	10 f4       	brcc	.+4      	; 0x1e62 <vfprintf+0x30e>
    1e5e:	37 18       	sub	r3, r7
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <vfprintf+0x310>
    1e62:	31 2c       	mov	r3, r1
    1e64:	24 ff       	sbrs	r18, 4
    1e66:	12 c0       	rjmp	.+36     	; 0x1e8c <vfprintf+0x338>
    1e68:	b7 01       	movw	r22, r14
    1e6a:	80 e3       	ldi	r24, 0x30	; 48
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	2c 87       	std	Y+12, r18	; 0x0c
    1e70:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1e74:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e76:	22 ff       	sbrs	r18, 2
    1e78:	17 c0       	rjmp	.+46     	; 0x1ea8 <vfprintf+0x354>
    1e7a:	21 ff       	sbrs	r18, 1
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <vfprintf+0x330>
    1e7e:	88 e5       	ldi	r24, 0x58	; 88
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <vfprintf+0x334>
    1e84:	88 e7       	ldi	r24, 0x78	; 120
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	b7 01       	movw	r22, r14
    1e8a:	0c c0       	rjmp	.+24     	; 0x1ea4 <vfprintf+0x350>
    1e8c:	82 2f       	mov	r24, r18
    1e8e:	86 78       	andi	r24, 0x86	; 134
    1e90:	59 f0       	breq	.+22     	; 0x1ea8 <vfprintf+0x354>
    1e92:	21 fd       	sbrc	r18, 1
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <vfprintf+0x346>
    1e96:	80 e2       	ldi	r24, 0x20	; 32
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <vfprintf+0x348>
    1e9a:	8b e2       	ldi	r24, 0x2B	; 43
    1e9c:	27 fd       	sbrc	r18, 7
    1e9e:	8d e2       	ldi	r24, 0x2D	; 45
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1ea8:	a5 14       	cp	r10, r5
    1eaa:	38 f4       	brcc	.+14     	; 0x1eba <vfprintf+0x366>
    1eac:	b7 01       	movw	r22, r14
    1eae:	80 e3       	ldi	r24, 0x30	; 48
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1eb6:	5a 94       	dec	r5
    1eb8:	f7 cf       	rjmp	.-18     	; 0x1ea8 <vfprintf+0x354>
    1eba:	aa 94       	dec	r10
    1ebc:	f4 01       	movw	r30, r8
    1ebe:	ea 0d       	add	r30, r10
    1ec0:	f1 1d       	adc	r31, r1
    1ec2:	80 81       	ld	r24, Z
    1ec4:	b7 01       	movw	r22, r14
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1ecc:	a1 10       	cpse	r10, r1
    1ece:	f5 cf       	rjmp	.-22     	; 0x1eba <vfprintf+0x366>
    1ed0:	33 20       	and	r3, r3
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <vfprintf+0x382>
    1ed4:	51 ce       	rjmp	.-862    	; 0x1b78 <vfprintf+0x24>
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	80 e2       	ldi	r24, 0x20	; 32
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <fputc>
    1ee0:	3a 94       	dec	r3
    1ee2:	f6 cf       	rjmp	.-20     	; 0x1ed0 <vfprintf+0x37c>
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	86 81       	ldd	r24, Z+6	; 0x06
    1ee8:	97 81       	ldd	r25, Z+7	; 0x07
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vfprintf+0x39c>
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	9f ef       	ldi	r25, 0xFF	; 255
    1ef0:	2c 96       	adiw	r28, 0x0c	; 12
    1ef2:	e2 e1       	ldi	r30, 0x12	; 18
    1ef4:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__>

00001ef8 <__eerd_byte_m162>:
    1ef8:	e1 99       	sbic	0x1c, 1	; 28
    1efa:	fe cf       	rjmp	.-4      	; 0x1ef8 <__eerd_byte_m162>
    1efc:	9f bb       	out	0x1f, r25	; 31
    1efe:	8e bb       	out	0x1e, r24	; 30
    1f00:	e0 9a       	sbi	0x1c, 0	; 28
    1f02:	99 27       	eor	r25, r25
    1f04:	8d b3       	in	r24, 0x1d	; 29
    1f06:	08 95       	ret

00001f08 <__eewr_byte_m162>:
    1f08:	26 2f       	mov	r18, r22

00001f0a <__eewr_r18_m162>:
    1f0a:	e1 99       	sbic	0x1c, 1	; 28
    1f0c:	fe cf       	rjmp	.-4      	; 0x1f0a <__eewr_r18_m162>
    1f0e:	9f bb       	out	0x1f, r25	; 31
    1f10:	8e bb       	out	0x1e, r24	; 30
    1f12:	2d bb       	out	0x1d, r18	; 29
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	e2 9a       	sbi	0x1c, 2	; 28
    1f1a:	e1 9a       	sbi	0x1c, 1	; 28
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	08 95       	ret

00001f22 <calloc>:
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	86 9f       	mul	r24, r22
    1f2c:	80 01       	movw	r16, r0
    1f2e:	87 9f       	mul	r24, r23
    1f30:	10 0d       	add	r17, r0
    1f32:	96 9f       	mul	r25, r22
    1f34:	10 0d       	add	r17, r0
    1f36:	11 24       	eor	r1, r1
    1f38:	c8 01       	movw	r24, r16
    1f3a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <malloc>
    1f3e:	ec 01       	movw	r28, r24
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	29 f0       	breq	.+10     	; 0x1f4e <calloc+0x2c>
    1f44:	a8 01       	movw	r20, r16
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	0e 94 df 10 	call	0x21be	; 0x21be <memset>
    1f4e:	ce 01       	movw	r24, r28
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	08 95       	ret

00001f5a <malloc>:
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	91 05       	cpc	r25, r1
    1f62:	10 f4       	brcc	.+4      	; 0x1f68 <malloc+0xe>
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	e0 91 2d 04 	lds	r30, 0x042D
    1f6c:	f0 91 2e 04 	lds	r31, 0x042E
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	a0 e0       	ldi	r26, 0x00	; 0
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	30 97       	sbiw	r30, 0x00	; 0
    1f7a:	39 f1       	breq	.+78     	; 0x1fca <malloc+0x70>
    1f7c:	40 81       	ld	r20, Z
    1f7e:	51 81       	ldd	r21, Z+1	; 0x01
    1f80:	48 17       	cp	r20, r24
    1f82:	59 07       	cpc	r21, r25
    1f84:	b8 f0       	brcs	.+46     	; 0x1fb4 <malloc+0x5a>
    1f86:	48 17       	cp	r20, r24
    1f88:	59 07       	cpc	r21, r25
    1f8a:	71 f4       	brne	.+28     	; 0x1fa8 <malloc+0x4e>
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	10 97       	sbiw	r26, 0x00	; 0
    1f92:	29 f0       	breq	.+10     	; 0x1f9e <malloc+0x44>
    1f94:	13 96       	adiw	r26, 0x03	; 3
    1f96:	9c 93       	st	X, r25
    1f98:	8e 93       	st	-X, r24
    1f9a:	12 97       	sbiw	r26, 0x02	; 2
    1f9c:	2c c0       	rjmp	.+88     	; 0x1ff6 <malloc+0x9c>
    1f9e:	90 93 2e 04 	sts	0x042E, r25
    1fa2:	80 93 2d 04 	sts	0x042D, r24
    1fa6:	27 c0       	rjmp	.+78     	; 0x1ff6 <malloc+0x9c>
    1fa8:	21 15       	cp	r18, r1
    1faa:	31 05       	cpc	r19, r1
    1fac:	31 f0       	breq	.+12     	; 0x1fba <malloc+0x60>
    1fae:	42 17       	cp	r20, r18
    1fb0:	53 07       	cpc	r21, r19
    1fb2:	18 f0       	brcs	.+6      	; 0x1fba <malloc+0x60>
    1fb4:	a9 01       	movw	r20, r18
    1fb6:	db 01       	movw	r26, r22
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <malloc+0x62>
    1fba:	ef 01       	movw	r28, r30
    1fbc:	9a 01       	movw	r18, r20
    1fbe:	bd 01       	movw	r22, r26
    1fc0:	df 01       	movw	r26, r30
    1fc2:	02 80       	ldd	r0, Z+2	; 0x02
    1fc4:	f3 81       	ldd	r31, Z+3	; 0x03
    1fc6:	e0 2d       	mov	r30, r0
    1fc8:	d7 cf       	rjmp	.-82     	; 0x1f78 <malloc+0x1e>
    1fca:	21 15       	cp	r18, r1
    1fcc:	31 05       	cpc	r19, r1
    1fce:	f9 f0       	breq	.+62     	; 0x200e <malloc+0xb4>
    1fd0:	28 1b       	sub	r18, r24
    1fd2:	39 0b       	sbc	r19, r25
    1fd4:	24 30       	cpi	r18, 0x04	; 4
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	80 f4       	brcc	.+32     	; 0x1ffa <malloc+0xa0>
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	61 15       	cp	r22, r1
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	21 f0       	breq	.+8      	; 0x1fec <malloc+0x92>
    1fe4:	fb 01       	movw	r30, r22
    1fe6:	93 83       	std	Z+3, r25	; 0x03
    1fe8:	82 83       	std	Z+2, r24	; 0x02
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <malloc+0x9a>
    1fec:	90 93 2e 04 	sts	0x042E, r25
    1ff0:	80 93 2d 04 	sts	0x042D, r24
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	32 96       	adiw	r30, 0x02	; 2
    1ff8:	44 c0       	rjmp	.+136    	; 0x2082 <malloc+0x128>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e2 0f       	add	r30, r18
    1ffe:	f3 1f       	adc	r31, r19
    2000:	81 93       	st	Z+, r24
    2002:	91 93       	st	Z+, r25
    2004:	22 50       	subi	r18, 0x02	; 2
    2006:	31 09       	sbc	r19, r1
    2008:	39 83       	std	Y+1, r19	; 0x01
    200a:	28 83       	st	Y, r18
    200c:	3a c0       	rjmp	.+116    	; 0x2082 <malloc+0x128>
    200e:	20 91 2b 04 	lds	r18, 0x042B
    2012:	30 91 2c 04 	lds	r19, 0x042C
    2016:	23 2b       	or	r18, r19
    2018:	41 f4       	brne	.+16     	; 0x202a <malloc+0xd0>
    201a:	20 91 02 01 	lds	r18, 0x0102
    201e:	30 91 03 01 	lds	r19, 0x0103
    2022:	30 93 2c 04 	sts	0x042C, r19
    2026:	20 93 2b 04 	sts	0x042B, r18
    202a:	20 91 00 01 	lds	r18, 0x0100
    202e:	30 91 01 01 	lds	r19, 0x0101
    2032:	21 15       	cp	r18, r1
    2034:	31 05       	cpc	r19, r1
    2036:	41 f4       	brne	.+16     	; 0x2048 <malloc+0xee>
    2038:	2d b7       	in	r18, 0x3d	; 61
    203a:	3e b7       	in	r19, 0x3e	; 62
    203c:	40 91 04 01 	lds	r20, 0x0104
    2040:	50 91 05 01 	lds	r21, 0x0105
    2044:	24 1b       	sub	r18, r20
    2046:	35 0b       	sbc	r19, r21
    2048:	e0 91 2b 04 	lds	r30, 0x042B
    204c:	f0 91 2c 04 	lds	r31, 0x042C
    2050:	e2 17       	cp	r30, r18
    2052:	f3 07       	cpc	r31, r19
    2054:	a0 f4       	brcc	.+40     	; 0x207e <malloc+0x124>
    2056:	2e 1b       	sub	r18, r30
    2058:	3f 0b       	sbc	r19, r31
    205a:	28 17       	cp	r18, r24
    205c:	39 07       	cpc	r19, r25
    205e:	78 f0       	brcs	.+30     	; 0x207e <malloc+0x124>
    2060:	ac 01       	movw	r20, r24
    2062:	4e 5f       	subi	r20, 0xFE	; 254
    2064:	5f 4f       	sbci	r21, 0xFF	; 255
    2066:	24 17       	cp	r18, r20
    2068:	35 07       	cpc	r19, r21
    206a:	48 f0       	brcs	.+18     	; 0x207e <malloc+0x124>
    206c:	4e 0f       	add	r20, r30
    206e:	5f 1f       	adc	r21, r31
    2070:	50 93 2c 04 	sts	0x042C, r21
    2074:	40 93 2b 04 	sts	0x042B, r20
    2078:	81 93       	st	Z+, r24
    207a:	91 93       	st	Z+, r25
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <malloc+0x128>
    207e:	e0 e0       	ldi	r30, 0x00	; 0
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	cf 01       	movw	r24, r30
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	08 95       	ret

0000208a <free>:
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	09 f4       	brne	.+2      	; 0x2094 <free+0xa>
    2092:	87 c0       	rjmp	.+270    	; 0x21a2 <free+0x118>
    2094:	fc 01       	movw	r30, r24
    2096:	32 97       	sbiw	r30, 0x02	; 2
    2098:	13 82       	std	Z+3, r1	; 0x03
    209a:	12 82       	std	Z+2, r1	; 0x02
    209c:	c0 91 2d 04 	lds	r28, 0x042D
    20a0:	d0 91 2e 04 	lds	r29, 0x042E
    20a4:	20 97       	sbiw	r28, 0x00	; 0
    20a6:	81 f4       	brne	.+32     	; 0x20c8 <free+0x3e>
    20a8:	20 81       	ld	r18, Z
    20aa:	31 81       	ldd	r19, Z+1	; 0x01
    20ac:	28 0f       	add	r18, r24
    20ae:	39 1f       	adc	r19, r25
    20b0:	80 91 2b 04 	lds	r24, 0x042B
    20b4:	90 91 2c 04 	lds	r25, 0x042C
    20b8:	82 17       	cp	r24, r18
    20ba:	93 07       	cpc	r25, r19
    20bc:	79 f5       	brne	.+94     	; 0x211c <free+0x92>
    20be:	f0 93 2c 04 	sts	0x042C, r31
    20c2:	e0 93 2b 04 	sts	0x042B, r30
    20c6:	6d c0       	rjmp	.+218    	; 0x21a2 <free+0x118>
    20c8:	de 01       	movw	r26, r28
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	ae 17       	cp	r26, r30
    20d0:	bf 07       	cpc	r27, r31
    20d2:	50 f4       	brcc	.+20     	; 0x20e8 <free+0x5e>
    20d4:	12 96       	adiw	r26, 0x02	; 2
    20d6:	4d 91       	ld	r20, X+
    20d8:	5c 91       	ld	r21, X
    20da:	13 97       	sbiw	r26, 0x03	; 3
    20dc:	9d 01       	movw	r18, r26
    20de:	41 15       	cp	r20, r1
    20e0:	51 05       	cpc	r21, r1
    20e2:	09 f1       	breq	.+66     	; 0x2126 <free+0x9c>
    20e4:	da 01       	movw	r26, r20
    20e6:	f3 cf       	rjmp	.-26     	; 0x20ce <free+0x44>
    20e8:	b3 83       	std	Z+3, r27	; 0x03
    20ea:	a2 83       	std	Z+2, r26	; 0x02
    20ec:	40 81       	ld	r20, Z
    20ee:	51 81       	ldd	r21, Z+1	; 0x01
    20f0:	84 0f       	add	r24, r20
    20f2:	95 1f       	adc	r25, r21
    20f4:	8a 17       	cp	r24, r26
    20f6:	9b 07       	cpc	r25, r27
    20f8:	71 f4       	brne	.+28     	; 0x2116 <free+0x8c>
    20fa:	8d 91       	ld	r24, X+
    20fc:	9c 91       	ld	r25, X
    20fe:	11 97       	sbiw	r26, 0x01	; 1
    2100:	84 0f       	add	r24, r20
    2102:	95 1f       	adc	r25, r21
    2104:	02 96       	adiw	r24, 0x02	; 2
    2106:	91 83       	std	Z+1, r25	; 0x01
    2108:	80 83       	st	Z, r24
    210a:	12 96       	adiw	r26, 0x02	; 2
    210c:	8d 91       	ld	r24, X+
    210e:	9c 91       	ld	r25, X
    2110:	13 97       	sbiw	r26, 0x03	; 3
    2112:	93 83       	std	Z+3, r25	; 0x03
    2114:	82 83       	std	Z+2, r24	; 0x02
    2116:	21 15       	cp	r18, r1
    2118:	31 05       	cpc	r19, r1
    211a:	29 f4       	brne	.+10     	; 0x2126 <free+0x9c>
    211c:	f0 93 2e 04 	sts	0x042E, r31
    2120:	e0 93 2d 04 	sts	0x042D, r30
    2124:	3e c0       	rjmp	.+124    	; 0x21a2 <free+0x118>
    2126:	d9 01       	movw	r26, r18
    2128:	13 96       	adiw	r26, 0x03	; 3
    212a:	fc 93       	st	X, r31
    212c:	ee 93       	st	-X, r30
    212e:	12 97       	sbiw	r26, 0x02	; 2
    2130:	4d 91       	ld	r20, X+
    2132:	5d 91       	ld	r21, X+
    2134:	a4 0f       	add	r26, r20
    2136:	b5 1f       	adc	r27, r21
    2138:	ea 17       	cp	r30, r26
    213a:	fb 07       	cpc	r31, r27
    213c:	79 f4       	brne	.+30     	; 0x215c <free+0xd2>
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	84 0f       	add	r24, r20
    2144:	95 1f       	adc	r25, r21
    2146:	02 96       	adiw	r24, 0x02	; 2
    2148:	d9 01       	movw	r26, r18
    214a:	11 96       	adiw	r26, 0x01	; 1
    214c:	9c 93       	st	X, r25
    214e:	8e 93       	st	-X, r24
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	13 96       	adiw	r26, 0x03	; 3
    2156:	9c 93       	st	X, r25
    2158:	8e 93       	st	-X, r24
    215a:	12 97       	sbiw	r26, 0x02	; 2
    215c:	e0 e0       	ldi	r30, 0x00	; 0
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	19 f0       	breq	.+6      	; 0x216e <free+0xe4>
    2168:	fe 01       	movw	r30, r28
    216a:	ec 01       	movw	r28, r24
    216c:	f9 cf       	rjmp	.-14     	; 0x2160 <free+0xd6>
    216e:	ce 01       	movw	r24, r28
    2170:	02 96       	adiw	r24, 0x02	; 2
    2172:	28 81       	ld	r18, Y
    2174:	39 81       	ldd	r19, Y+1	; 0x01
    2176:	82 0f       	add	r24, r18
    2178:	93 1f       	adc	r25, r19
    217a:	20 91 2b 04 	lds	r18, 0x042B
    217e:	30 91 2c 04 	lds	r19, 0x042C
    2182:	28 17       	cp	r18, r24
    2184:	39 07       	cpc	r19, r25
    2186:	69 f4       	brne	.+26     	; 0x21a2 <free+0x118>
    2188:	30 97       	sbiw	r30, 0x00	; 0
    218a:	29 f4       	brne	.+10     	; 0x2196 <free+0x10c>
    218c:	10 92 2e 04 	sts	0x042E, r1
    2190:	10 92 2d 04 	sts	0x042D, r1
    2194:	02 c0       	rjmp	.+4      	; 0x219a <free+0x110>
    2196:	13 82       	std	Z+3, r1	; 0x03
    2198:	12 82       	std	Z+2, r1	; 0x02
    219a:	d0 93 2c 04 	sts	0x042C, r29
    219e:	c0 93 2b 04 	sts	0x042B, r28
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	08 95       	ret

000021a8 <strnlen_P>:
    21a8:	fc 01       	movw	r30, r24
    21aa:	05 90       	lpm	r0, Z+
    21ac:	61 50       	subi	r22, 0x01	; 1
    21ae:	70 40       	sbci	r23, 0x00	; 0
    21b0:	01 10       	cpse	r0, r1
    21b2:	d8 f7       	brcc	.-10     	; 0x21aa <strnlen_P+0x2>
    21b4:	80 95       	com	r24
    21b6:	90 95       	com	r25
    21b8:	8e 0f       	add	r24, r30
    21ba:	9f 1f       	adc	r25, r31
    21bc:	08 95       	ret

000021be <memset>:
    21be:	dc 01       	movw	r26, r24
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <memset+0x6>
    21c2:	6d 93       	st	X+, r22
    21c4:	41 50       	subi	r20, 0x01	; 1
    21c6:	50 40       	sbci	r21, 0x00	; 0
    21c8:	e0 f7       	brcc	.-8      	; 0x21c2 <memset+0x4>
    21ca:	08 95       	ret

000021cc <strnlen>:
    21cc:	fc 01       	movw	r30, r24
    21ce:	61 50       	subi	r22, 0x01	; 1
    21d0:	70 40       	sbci	r23, 0x00	; 0
    21d2:	01 90       	ld	r0, Z+
    21d4:	01 10       	cpse	r0, r1
    21d6:	d8 f7       	brcc	.-10     	; 0x21ce <strnlen+0x2>
    21d8:	80 95       	com	r24
    21da:	90 95       	com	r25
    21dc:	8e 0f       	add	r24, r30
    21de:	9f 1f       	adc	r25, r31
    21e0:	08 95       	ret

000021e2 <fputc>:
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	18 2f       	mov	r17, r24
    21ec:	09 2f       	mov	r16, r25
    21ee:	eb 01       	movw	r28, r22
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	81 fd       	sbrc	r24, 1
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <fputc+0x1a>
    21f6:	8f ef       	ldi	r24, 0xFF	; 255
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
    21fa:	20 c0       	rjmp	.+64     	; 0x223c <fputc+0x5a>
    21fc:	82 ff       	sbrs	r24, 2
    21fe:	10 c0       	rjmp	.+32     	; 0x2220 <fputc+0x3e>
    2200:	4e 81       	ldd	r20, Y+6	; 0x06
    2202:	5f 81       	ldd	r21, Y+7	; 0x07
    2204:	2c 81       	ldd	r18, Y+4	; 0x04
    2206:	3d 81       	ldd	r19, Y+5	; 0x05
    2208:	42 17       	cp	r20, r18
    220a:	53 07       	cpc	r21, r19
    220c:	7c f4       	brge	.+30     	; 0x222c <fputc+0x4a>
    220e:	e8 81       	ld	r30, Y
    2210:	f9 81       	ldd	r31, Y+1	; 0x01
    2212:	9f 01       	movw	r18, r30
    2214:	2f 5f       	subi	r18, 0xFF	; 255
    2216:	3f 4f       	sbci	r19, 0xFF	; 255
    2218:	39 83       	std	Y+1, r19	; 0x01
    221a:	28 83       	st	Y, r18
    221c:	10 83       	st	Z, r17
    221e:	06 c0       	rjmp	.+12     	; 0x222c <fputc+0x4a>
    2220:	e8 85       	ldd	r30, Y+8	; 0x08
    2222:	f9 85       	ldd	r31, Y+9	; 0x09
    2224:	81 2f       	mov	r24, r17
    2226:	09 95       	icall
    2228:	89 2b       	or	r24, r25
    222a:	29 f7       	brne	.-54     	; 0x21f6 <fputc+0x14>
    222c:	2e 81       	ldd	r18, Y+6	; 0x06
    222e:	3f 81       	ldd	r19, Y+7	; 0x07
    2230:	2f 5f       	subi	r18, 0xFF	; 255
    2232:	3f 4f       	sbci	r19, 0xFF	; 255
    2234:	3f 83       	std	Y+7, r19	; 0x07
    2236:	2e 83       	std	Y+6, r18	; 0x06
    2238:	81 2f       	mov	r24, r17
    223a:	90 2f       	mov	r25, r16
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <__ultoa_invert>:
    2246:	fa 01       	movw	r30, r20
    2248:	aa 27       	eor	r26, r26
    224a:	28 30       	cpi	r18, 0x08	; 8
    224c:	51 f1       	breq	.+84     	; 0x22a2 <__ultoa_invert+0x5c>
    224e:	20 31       	cpi	r18, 0x10	; 16
    2250:	81 f1       	breq	.+96     	; 0x22b2 <__ultoa_invert+0x6c>
    2252:	e8 94       	clt
    2254:	6f 93       	push	r22
    2256:	6e 7f       	andi	r22, 0xFE	; 254
    2258:	6e 5f       	subi	r22, 0xFE	; 254
    225a:	7f 4f       	sbci	r23, 0xFF	; 255
    225c:	8f 4f       	sbci	r24, 0xFF	; 255
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	af 4f       	sbci	r26, 0xFF	; 255
    2262:	b1 e0       	ldi	r27, 0x01	; 1
    2264:	3e d0       	rcall	.+124    	; 0x22e2 <__ultoa_invert+0x9c>
    2266:	b4 e0       	ldi	r27, 0x04	; 4
    2268:	3c d0       	rcall	.+120    	; 0x22e2 <__ultoa_invert+0x9c>
    226a:	67 0f       	add	r22, r23
    226c:	78 1f       	adc	r23, r24
    226e:	89 1f       	adc	r24, r25
    2270:	9a 1f       	adc	r25, r26
    2272:	a1 1d       	adc	r26, r1
    2274:	68 0f       	add	r22, r24
    2276:	79 1f       	adc	r23, r25
    2278:	8a 1f       	adc	r24, r26
    227a:	91 1d       	adc	r25, r1
    227c:	a1 1d       	adc	r26, r1
    227e:	6a 0f       	add	r22, r26
    2280:	71 1d       	adc	r23, r1
    2282:	81 1d       	adc	r24, r1
    2284:	91 1d       	adc	r25, r1
    2286:	a1 1d       	adc	r26, r1
    2288:	20 d0       	rcall	.+64     	; 0x22ca <__ultoa_invert+0x84>
    228a:	09 f4       	brne	.+2      	; 0x228e <__ultoa_invert+0x48>
    228c:	68 94       	set
    228e:	3f 91       	pop	r19
    2290:	2a e0       	ldi	r18, 0x0A	; 10
    2292:	26 9f       	mul	r18, r22
    2294:	11 24       	eor	r1, r1
    2296:	30 19       	sub	r19, r0
    2298:	30 5d       	subi	r19, 0xD0	; 208
    229a:	31 93       	st	Z+, r19
    229c:	de f6       	brtc	.-74     	; 0x2254 <__ultoa_invert+0xe>
    229e:	cf 01       	movw	r24, r30
    22a0:	08 95       	ret
    22a2:	46 2f       	mov	r20, r22
    22a4:	47 70       	andi	r20, 0x07	; 7
    22a6:	40 5d       	subi	r20, 0xD0	; 208
    22a8:	41 93       	st	Z+, r20
    22aa:	b3 e0       	ldi	r27, 0x03	; 3
    22ac:	0f d0       	rcall	.+30     	; 0x22cc <__ultoa_invert+0x86>
    22ae:	c9 f7       	brne	.-14     	; 0x22a2 <__ultoa_invert+0x5c>
    22b0:	f6 cf       	rjmp	.-20     	; 0x229e <__ultoa_invert+0x58>
    22b2:	46 2f       	mov	r20, r22
    22b4:	4f 70       	andi	r20, 0x0F	; 15
    22b6:	40 5d       	subi	r20, 0xD0	; 208
    22b8:	4a 33       	cpi	r20, 0x3A	; 58
    22ba:	18 f0       	brcs	.+6      	; 0x22c2 <__ultoa_invert+0x7c>
    22bc:	49 5d       	subi	r20, 0xD9	; 217
    22be:	31 fd       	sbrc	r19, 1
    22c0:	40 52       	subi	r20, 0x20	; 32
    22c2:	41 93       	st	Z+, r20
    22c4:	02 d0       	rcall	.+4      	; 0x22ca <__ultoa_invert+0x84>
    22c6:	a9 f7       	brne	.-22     	; 0x22b2 <__ultoa_invert+0x6c>
    22c8:	ea cf       	rjmp	.-44     	; 0x229e <__ultoa_invert+0x58>
    22ca:	b4 e0       	ldi	r27, 0x04	; 4
    22cc:	a6 95       	lsr	r26
    22ce:	97 95       	ror	r25
    22d0:	87 95       	ror	r24
    22d2:	77 95       	ror	r23
    22d4:	67 95       	ror	r22
    22d6:	ba 95       	dec	r27
    22d8:	c9 f7       	brne	.-14     	; 0x22cc <__ultoa_invert+0x86>
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	61 05       	cpc	r22, r1
    22de:	71 05       	cpc	r23, r1
    22e0:	08 95       	ret
    22e2:	9b 01       	movw	r18, r22
    22e4:	ac 01       	movw	r20, r24
    22e6:	0a 2e       	mov	r0, r26
    22e8:	06 94       	lsr	r0
    22ea:	57 95       	ror	r21
    22ec:	47 95       	ror	r20
    22ee:	37 95       	ror	r19
    22f0:	27 95       	ror	r18
    22f2:	ba 95       	dec	r27
    22f4:	c9 f7       	brne	.-14     	; 0x22e8 <__ultoa_invert+0xa2>
    22f6:	62 0f       	add	r22, r18
    22f8:	73 1f       	adc	r23, r19
    22fa:	84 1f       	adc	r24, r20
    22fc:	95 1f       	adc	r25, r21
    22fe:	a0 1d       	adc	r26, r0
    2300:	08 95       	ret

00002302 <__prologue_saves__>:
    2302:	2f 92       	push	r2
    2304:	3f 92       	push	r3
    2306:	4f 92       	push	r4
    2308:	5f 92       	push	r5
    230a:	6f 92       	push	r6
    230c:	7f 92       	push	r7
    230e:	8f 92       	push	r8
    2310:	9f 92       	push	r9
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	ca 1b       	sub	r28, r26
    232c:	db 0b       	sbc	r29, r27
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	09 94       	ijmp

0000233a <__epilogue_restores__>:
    233a:	2a 88       	ldd	r2, Y+18	; 0x12
    233c:	39 88       	ldd	r3, Y+17	; 0x11
    233e:	48 88       	ldd	r4, Y+16	; 0x10
    2340:	5f 84       	ldd	r5, Y+15	; 0x0f
    2342:	6e 84       	ldd	r6, Y+14	; 0x0e
    2344:	7d 84       	ldd	r7, Y+13	; 0x0d
    2346:	8c 84       	ldd	r8, Y+12	; 0x0c
    2348:	9b 84       	ldd	r9, Y+11	; 0x0b
    234a:	aa 84       	ldd	r10, Y+10	; 0x0a
    234c:	b9 84       	ldd	r11, Y+9	; 0x09
    234e:	c8 84       	ldd	r12, Y+8	; 0x08
    2350:	df 80       	ldd	r13, Y+7	; 0x07
    2352:	ee 80       	ldd	r14, Y+6	; 0x06
    2354:	fd 80       	ldd	r15, Y+5	; 0x05
    2356:	0c 81       	ldd	r16, Y+4	; 0x04
    2358:	1b 81       	ldd	r17, Y+3	; 0x03
    235a:	aa 81       	ldd	r26, Y+2	; 0x02
    235c:	b9 81       	ldd	r27, Y+1	; 0x01
    235e:	ce 0f       	add	r28, r30
    2360:	d1 1d       	adc	r29, r1
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	ed 01       	movw	r28, r26
    236e:	08 95       	ret

00002370 <_exit>:
    2370:	f8 94       	cli

00002372 <__stop_program>:
    2372:	ff cf       	rjmp	.-2      	; 0x2372 <__stop_program>
