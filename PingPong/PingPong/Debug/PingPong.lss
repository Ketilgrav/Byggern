
PingPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00000c50  00000ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001f8  008001f8  00000ddc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c6  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a9  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000229  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000209  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e5       	ldi	r30, 0x50	; 80
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 3f       	cpi	r26, 0xF8	; 248
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 ef       	ldi	r26, 0xF8	; 248
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 30       	cpi	r26, 0x02	; 2
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 00 01 	call	0x200	; 0x200 <main>
  a6:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <SRAM_test>:
	set_bit(SFIOR, XMM2);	//100 -> releaser pc7-pc4 fra minne opperasjoner, til å bli brukt i jtag.
	SRAM_test();
}


void SRAM_test(void){
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	9f 93       	push	r25
  c4:	8f 93       	push	r24
  c6:	0e 94 b6 01 	call	0x36c	; 0x36c <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
  ca:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <rand>
  ce:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
  d0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <srand>
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	d0 e0       	ldi	r29, 0x00	; 0


void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
  dc:	00 e0       	ldi	r16, 0x00	; 0
  de:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
		uint8_t some_value = rand();
		ext_ram[i] = some_value;					//Setter inn en tilfeldig verdi
		uint8_t retreived_value = ext_ram[i];		//Måler den tilbake
		if (retreived_value != some_value) {		//Registrerer om den ble rett.
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
  e0:	0f 2e       	mov	r0, r31
  e2:	f2 e2       	ldi	r31, 0x22	; 34
  e4:	ef 2e       	mov	r14, r31
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	ff 2e       	mov	r15, r31
  ea:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
		uint8_t some_value = rand();
  ec:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <rand>
  f0:	fe 01       	movw	r30, r28
  f2:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;					//Setter inn en tilfeldig verdi
  f4:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];		//Måler den tilbake
  f6:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {		//Registrerer om den ble rett.
  f8:	28 17       	cp	r18, r24
  fa:	a9 f0       	breq	.+42     	; 0x126 <SRAM_test+0x78>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
  fc:	99 27       	eor	r25, r25
  fe:	9f 93       	push	r25
 100:	8f 93       	push	r24
 102:	1f 92       	push	r1
 104:	2f 93       	push	r18
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	ff 92       	push	r15
 10c:	ef 92       	push	r14
 10e:	0e 94 b6 01 	call	0x36c	; 0x36c <printf>
			write_errors++;
 112:	0f 5f       	subi	r16, 0xFF	; 255
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	8d b7       	in	r24, 0x3d	; 61
 118:	9e b7       	in	r25, 0x3e	; 62
 11a:	08 96       	adiw	r24, 0x08	; 8
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	9e bf       	out	0x3e, r25	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {	//Går gjennom hele det eksterne minnet vi har tillgang til
 126:	21 96       	adiw	r28, 0x01	; 1
 128:	c1 15       	cp	r28, r1
 12a:	98 e0       	ldi	r25, 0x08	; 8
 12c:	d9 07       	cpc	r29, r25
 12e:	f1 f6       	brne	.-68     	; 0xec <SRAM_test+0x3e>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i,retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
 130:	c6 01       	movw	r24, r12
 132:	0e 94 60 01 	call	0x2c0	; 0x2c0 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800; //0x800 = 2048 = 2^11. Vi har 11 adresselinjer, så vi klarer å snakke med 2048 minne plasseringer
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 13a:	e1 2c       	mov	r14, r1
 13c:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
 13e:	0f 2e       	mov	r0, r31
 140:	fc e5       	ldi	r31, 0x5C	; 92
 142:	cf 2e       	mov	r12, r31
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	df 2e       	mov	r13, r31
 148:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 14a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <rand>
 14e:	fe 01       	movw	r30, r28
 150:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
 152:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 154:	28 17       	cp	r18, r24
 156:	b1 f0       	breq	.+44     	; 0x184 <SRAM_test+0xd6>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
 158:	99 27       	eor	r25, r25
 15a:	9f 93       	push	r25
 15c:	8f 93       	push	r24
 15e:	1f 92       	push	r1
 160:	2f 93       	push	r18
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	df 92       	push	r13
 168:	cf 92       	push	r12
 16a:	0e 94 b6 01 	call	0x36c	; 0x36c <printf>
			retrieval_errors++;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	e8 1a       	sub	r14, r24
 172:	f8 0a       	sbc	r15, r24
 174:	8d b7       	in	r24, 0x3d	; 61
 176:	9e b7       	in	r25, 0x3e	; 62
 178:	08 96       	adiw	r24, 0x08	; 8
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	9e bf       	out	0x3e, r25	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 184:	21 96       	adiw	r28, 0x01	; 1
 186:	c1 15       	cp	r28, r1
 188:	98 e0       	ldi	r25, 0x08	; 8
 18a:	d9 07       	cpc	r29, r25
 18c:	f1 f6       	brne	.-68     	; 0x14a <SRAM_test+0x9c>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase \n \n\r", write_errors, retrieval_errors);
 18e:	ff 92       	push	r15
 190:	ef 92       	push	r14
 192:	1f 93       	push	r17
 194:	0f 93       	push	r16
 196:	8a e9       	ldi	r24, 0x9A	; 154
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	9f 93       	push	r25
 19c:	8f 93       	push	r24
 19e:	0e 94 b6 01 	call	0x36c	; 0x36c <printf>
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

000001c0 <SRAM_INIT>:
 */ 

#include "external_SRAM.h"

void SRAM_INIT(void){
	set_bit(MCUCR, SRE);	//External ram endable
 1c0:	85 b7       	in	r24, 0x35	; 53
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);	//100 -> releaser pc7-pc4 fra minne opperasjoner, til å bli brukt i jtag.
 1c6:	80 b7       	in	r24, 0x30	; 48
 1c8:	80 62       	ori	r24, 0x20	; 32
 1ca:	80 bf       	out	0x30, r24	; 48
	SRAM_test();
 1cc:	0e 94 57 00 	call	0xae	; 0xae <SRAM_test>
 1d0:	08 95       	ret

000001d2 <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 1d2:	5d 9b       	sbis	0x0b, 5	; 11
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <USART_Transmit>

	//Put data into buffer, sends the data
	UDR0 = data;
 1d6:	8c b9       	out	0x0c, r24	; 12
 1d8:	08 95       	ret

000001da <USART_Receive>:
}

unsigned char USART_Receive(void){
	
	//Wait for data to be received
	while( !(UCSR0A & (1<<RXC0)) );
 1da:	5f 9b       	sbis	0x0b, 7	; 11
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <USART_Receive>
	//Get and return received data from buffer
	return UDR0;
 1de:	8c b1       	in	r24, 0x0c	; 12
 1e0:	08 95       	ret

000001e2 <USART_Init>:
void USART_Init(){
	//ubbr = F_CPU
	int baudRate = 19200;
	unsigned int ubrr = F_CPU/(16*baudRate) -1;
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (unsigned char)ubrr;
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B	 = (1<<RXEN0)|(1<<TXEN0);
 1ea:	88 e1       	ldi	r24, 0x18	; 24
 1ec:	8a b9       	out	0x0a, r24	; 10
		//RXEN:  Aktiverer USART receiver
		//TXEN: Aktiverer USART transmitter
		
	
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 1ee:	8e e8       	ldi	r24, 0x8E	; 142
 1f0:	80 bd       	out	0x20, r24	; 32
		//URSEL: Skriver til UCSRC istedet for UBRRH, ved 1.
		//USBS0: Antall stop bits, 0->1bit, 1->2bit
		//UCZ0/1/2: Character size 011->8bit. 
		
	//Slik at vi kan bruke printf;
	fdevopen(USART_Transmit,USART_Receive);
 1f2:	6d ee       	ldi	r22, 0xED	; 237
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	89 ee       	ldi	r24, 0xE9	; 233
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <fdevopen>
 1fe:	08 95       	ret

00000200 <main>:
#include "MainInclude/MainInclude.h"
#include "Drivers/UsartDriver.h"
#include "Drivers/external_SRAM.h"

int main(void){
	USART_Init();
 200:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <USART_Init>
	SRAM_INIT();
 204:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SRAM_INIT>
	set_bit(DDRB, PB0);
 208:	b8 9a       	sbi	0x17, 0	; 23
	
	unsigned short mainLoopCounter = 0;
    while(1){
		if(!(mainLoopCounter%10)){
			toggle_bit(PORTB, PB0);
 20a:	98 b3       	in	r25, 0x18	; 24
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	89 27       	eor	r24, r25
 210:	88 bb       	out	0x18, r24	; 24
		}
		mainLoopCounter++;
		exit(0);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 26 06 	call	0xc4c	; 0xc4c <_exit>

0000021a <do_rand>:
 21a:	8f 92       	push	r8
 21c:	9f 92       	push	r9
 21e:	af 92       	push	r10
 220:	bf 92       	push	r11
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
 230:	68 81       	ld	r22, Y
 232:	79 81       	ldd	r23, Y+1	; 0x01
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	9b 81       	ldd	r25, Y+3	; 0x03
 238:	61 15       	cp	r22, r1
 23a:	71 05       	cpc	r23, r1
 23c:	81 05       	cpc	r24, r1
 23e:	91 05       	cpc	r25, r1
 240:	21 f4       	brne	.+8      	; 0x24a <do_rand+0x30>
 242:	64 e2       	ldi	r22, 0x24	; 36
 244:	79 ed       	ldi	r23, 0xD9	; 217
 246:	8b e5       	ldi	r24, 0x5B	; 91
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	2d e1       	ldi	r18, 0x1D	; 29
 24c:	33 ef       	ldi	r19, 0xF3	; 243
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	0e 94 8c 05 	call	0xb18	; 0xb18 <__divmodsi4>
 256:	49 01       	movw	r8, r18
 258:	5a 01       	movw	r10, r20
 25a:	9b 01       	movw	r18, r22
 25c:	ac 01       	movw	r20, r24
 25e:	a7 ea       	ldi	r26, 0xA7	; 167
 260:	b1 e4       	ldi	r27, 0x41	; 65
 262:	0e 94 ab 05 	call	0xb56	; 0xb56 <__muluhisi3>
 266:	6b 01       	movw	r12, r22
 268:	7c 01       	movw	r14, r24
 26a:	ac ee       	ldi	r26, 0xEC	; 236
 26c:	b4 ef       	ldi	r27, 0xF4	; 244
 26e:	a5 01       	movw	r20, r10
 270:	94 01       	movw	r18, r8
 272:	0e 94 b9 05 	call	0xb72	; 0xb72 <__mulohisi3>
 276:	c6 0e       	add	r12, r22
 278:	d7 1e       	adc	r13, r23
 27a:	e8 1e       	adc	r14, r24
 27c:	f9 1e       	adc	r15, r25
 27e:	f7 fe       	sbrs	r15, 7
 280:	06 c0       	rjmp	.+12     	; 0x28e <do_rand+0x74>
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	c8 1a       	sub	r12, r24
 286:	d1 08       	sbc	r13, r1
 288:	e1 08       	sbc	r14, r1
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	f8 0a       	sbc	r15, r24
 28e:	c8 82       	st	Y, r12
 290:	d9 82       	std	Y+1, r13	; 0x01
 292:	ea 82       	std	Y+2, r14	; 0x02
 294:	fb 82       	std	Y+3, r15	; 0x03
 296:	c6 01       	movw	r24, r12
 298:	9f 77       	andi	r25, 0x7F	; 127
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	bf 90       	pop	r11
 2a8:	af 90       	pop	r10
 2aa:	9f 90       	pop	r9
 2ac:	8f 90       	pop	r8
 2ae:	08 95       	ret

000002b0 <rand_r>:
 2b0:	0e 94 0d 01 	call	0x21a	; 0x21a <do_rand>
 2b4:	08 95       	ret

000002b6 <rand>:
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 0d 01 	call	0x21a	; 0x21a <do_rand>
 2be:	08 95       	ret

000002c0 <srand>:
 2c0:	a0 e0       	ldi	r26, 0x00	; 0
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	80 93 00 01 	sts	0x0100, r24
 2c8:	90 93 01 01 	sts	0x0101, r25
 2cc:	a0 93 02 01 	sts	0x0102, r26
 2d0:	b0 93 03 01 	sts	0x0103, r27
 2d4:	08 95       	ret

000002d6 <fdevopen>:
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
 2e0:	8b 01       	movw	r16, r22
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	31 f4       	brne	.+12     	; 0x2f2 <fdevopen+0x1c>
 2e6:	61 15       	cp	r22, r1
 2e8:	71 05       	cpc	r23, r1
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <fdevopen+0x1c>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	38 c0       	rjmp	.+112    	; 0x362 <fdevopen+0x8c>
 2f2:	6e e0       	ldi	r22, 0x0E	; 14
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 9c 03 	call	0x738	; 0x738 <calloc>
 2fe:	fc 01       	movw	r30, r24
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	a1 f3       	breq	.-24     	; 0x2ec <fdevopen+0x16>
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	83 83       	std	Z+3, r24	; 0x03
 308:	01 15       	cp	r16, r1
 30a:	11 05       	cpc	r17, r1
 30c:	71 f0       	breq	.+28     	; 0x32a <fdevopen+0x54>
 30e:	13 87       	std	Z+11, r17	; 0x0b
 310:	02 87       	std	Z+10, r16	; 0x0a
 312:	81 e8       	ldi	r24, 0x81	; 129
 314:	83 83       	std	Z+3, r24	; 0x03
 316:	80 91 f8 01 	lds	r24, 0x01F8
 31a:	90 91 f9 01 	lds	r25, 0x01F9
 31e:	89 2b       	or	r24, r25
 320:	21 f4       	brne	.+8      	; 0x32a <fdevopen+0x54>
 322:	f0 93 f9 01 	sts	0x01F9, r31
 326:	e0 93 f8 01 	sts	0x01F8, r30
 32a:	20 97       	sbiw	r28, 0x00	; 0
 32c:	c9 f0       	breq	.+50     	; 0x360 <fdevopen+0x8a>
 32e:	d1 87       	std	Z+9, r29	; 0x09
 330:	c0 87       	std	Z+8, r28	; 0x08
 332:	83 81       	ldd	r24, Z+3	; 0x03
 334:	82 60       	ori	r24, 0x02	; 2
 336:	83 83       	std	Z+3, r24	; 0x03
 338:	80 91 fa 01 	lds	r24, 0x01FA
 33c:	90 91 fb 01 	lds	r25, 0x01FB
 340:	89 2b       	or	r24, r25
 342:	71 f4       	brne	.+28     	; 0x360 <fdevopen+0x8a>
 344:	f0 93 fb 01 	sts	0x01FB, r31
 348:	e0 93 fa 01 	sts	0x01FA, r30
 34c:	80 91 fc 01 	lds	r24, 0x01FC
 350:	90 91 fd 01 	lds	r25, 0x01FD
 354:	89 2b       	or	r24, r25
 356:	21 f4       	brne	.+8      	; 0x360 <fdevopen+0x8a>
 358:	f0 93 fd 01 	sts	0x01FD, r31
 35c:	e0 93 fc 01 	sts	0x01FC, r30
 360:	cf 01       	movw	r24, r30
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <printf>:
 36c:	a0 e0       	ldi	r26, 0x00	; 0
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	ec eb       	ldi	r30, 0xBC	; 188
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__prologue_saves__+0x20>
 378:	fe 01       	movw	r30, r28
 37a:	35 96       	adiw	r30, 0x05	; 5
 37c:	61 91       	ld	r22, Z+
 37e:	71 91       	ld	r23, Z+
 380:	af 01       	movw	r20, r30
 382:	80 91 fa 01 	lds	r24, 0x01FA
 386:	90 91 fb 01 	lds	r25, 0x01FB
 38a:	0e 94 ca 01 	call	0x394	; 0x394 <vfprintf>
 38e:	e2 e0       	ldi	r30, 0x02	; 2
 390:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__epilogue_restores__+0x20>

00000394 <vfprintf>:
 394:	ac e0       	ldi	r26, 0x0C	; 12
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	e0 ed       	ldi	r30, 0xD0	; 208
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__prologue_saves__>
 3a0:	7c 01       	movw	r14, r24
 3a2:	6b 01       	movw	r12, r22
 3a4:	8a 01       	movw	r16, r20
 3a6:	fc 01       	movw	r30, r24
 3a8:	17 82       	std	Z+7, r1	; 0x07
 3aa:	16 82       	std	Z+6, r1	; 0x06
 3ac:	83 81       	ldd	r24, Z+3	; 0x03
 3ae:	81 ff       	sbrs	r24, 1
 3b0:	bd c1       	rjmp	.+890    	; 0x72c <__stack+0x22d>
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	4c 01       	movw	r8, r24
 3b8:	f7 01       	movw	r30, r14
 3ba:	93 81       	ldd	r25, Z+3	; 0x03
 3bc:	f6 01       	movw	r30, r12
 3be:	93 fd       	sbrc	r25, 3
 3c0:	85 91       	lpm	r24, Z+
 3c2:	93 ff       	sbrs	r25, 3
 3c4:	81 91       	ld	r24, Z+
 3c6:	6f 01       	movw	r12, r30
 3c8:	88 23       	and	r24, r24
 3ca:	09 f4       	brne	.+2      	; 0x3ce <vfprintf+0x3a>
 3cc:	ab c1       	rjmp	.+854    	; 0x724 <__stack+0x225>
 3ce:	85 32       	cpi	r24, 0x25	; 37
 3d0:	39 f4       	brne	.+14     	; 0x3e0 <vfprintf+0x4c>
 3d2:	93 fd       	sbrc	r25, 3
 3d4:	85 91       	lpm	r24, Z+
 3d6:	93 ff       	sbrs	r25, 3
 3d8:	81 91       	ld	r24, Z+
 3da:	6f 01       	movw	r12, r30
 3dc:	85 32       	cpi	r24, 0x25	; 37
 3de:	29 f4       	brne	.+10     	; 0x3ea <vfprintf+0x56>
 3e0:	b7 01       	movw	r22, r14
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 3e8:	e7 cf       	rjmp	.-50     	; 0x3b8 <vfprintf+0x24>
 3ea:	51 2c       	mov	r5, r1
 3ec:	31 2c       	mov	r3, r1
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	20 32       	cpi	r18, 0x20	; 32
 3f2:	a0 f4       	brcc	.+40     	; 0x41c <vfprintf+0x88>
 3f4:	8b 32       	cpi	r24, 0x2B	; 43
 3f6:	69 f0       	breq	.+26     	; 0x412 <vfprintf+0x7e>
 3f8:	30 f4       	brcc	.+12     	; 0x406 <vfprintf+0x72>
 3fa:	80 32       	cpi	r24, 0x20	; 32
 3fc:	59 f0       	breq	.+22     	; 0x414 <vfprintf+0x80>
 3fe:	83 32       	cpi	r24, 0x23	; 35
 400:	69 f4       	brne	.+26     	; 0x41c <vfprintf+0x88>
 402:	20 61       	ori	r18, 0x10	; 16
 404:	2c c0       	rjmp	.+88     	; 0x45e <vfprintf+0xca>
 406:	8d 32       	cpi	r24, 0x2D	; 45
 408:	39 f0       	breq	.+14     	; 0x418 <vfprintf+0x84>
 40a:	80 33       	cpi	r24, 0x30	; 48
 40c:	39 f4       	brne	.+14     	; 0x41c <vfprintf+0x88>
 40e:	21 60       	ori	r18, 0x01	; 1
 410:	26 c0       	rjmp	.+76     	; 0x45e <vfprintf+0xca>
 412:	22 60       	ori	r18, 0x02	; 2
 414:	24 60       	ori	r18, 0x04	; 4
 416:	23 c0       	rjmp	.+70     	; 0x45e <vfprintf+0xca>
 418:	28 60       	ori	r18, 0x08	; 8
 41a:	21 c0       	rjmp	.+66     	; 0x45e <vfprintf+0xca>
 41c:	27 fd       	sbrc	r18, 7
 41e:	27 c0       	rjmp	.+78     	; 0x46e <vfprintf+0xda>
 420:	30 ed       	ldi	r19, 0xD0	; 208
 422:	38 0f       	add	r19, r24
 424:	3a 30       	cpi	r19, 0x0A	; 10
 426:	78 f4       	brcc	.+30     	; 0x446 <vfprintf+0xb2>
 428:	26 ff       	sbrs	r18, 6
 42a:	06 c0       	rjmp	.+12     	; 0x438 <vfprintf+0xa4>
 42c:	fa e0       	ldi	r31, 0x0A	; 10
 42e:	5f 9e       	mul	r5, r31
 430:	30 0d       	add	r19, r0
 432:	11 24       	eor	r1, r1
 434:	53 2e       	mov	r5, r19
 436:	13 c0       	rjmp	.+38     	; 0x45e <vfprintf+0xca>
 438:	8a e0       	ldi	r24, 0x0A	; 10
 43a:	38 9e       	mul	r3, r24
 43c:	30 0d       	add	r19, r0
 43e:	11 24       	eor	r1, r1
 440:	33 2e       	mov	r3, r19
 442:	20 62       	ori	r18, 0x20	; 32
 444:	0c c0       	rjmp	.+24     	; 0x45e <vfprintf+0xca>
 446:	8e 32       	cpi	r24, 0x2E	; 46
 448:	21 f4       	brne	.+8      	; 0x452 <vfprintf+0xbe>
 44a:	26 fd       	sbrc	r18, 6
 44c:	6b c1       	rjmp	.+726    	; 0x724 <__stack+0x225>
 44e:	20 64       	ori	r18, 0x40	; 64
 450:	06 c0       	rjmp	.+12     	; 0x45e <vfprintf+0xca>
 452:	8c 36       	cpi	r24, 0x6C	; 108
 454:	11 f4       	brne	.+4      	; 0x45a <vfprintf+0xc6>
 456:	20 68       	ori	r18, 0x80	; 128
 458:	02 c0       	rjmp	.+4      	; 0x45e <vfprintf+0xca>
 45a:	88 36       	cpi	r24, 0x68	; 104
 45c:	41 f4       	brne	.+16     	; 0x46e <vfprintf+0xda>
 45e:	f6 01       	movw	r30, r12
 460:	93 fd       	sbrc	r25, 3
 462:	85 91       	lpm	r24, Z+
 464:	93 ff       	sbrs	r25, 3
 466:	81 91       	ld	r24, Z+
 468:	6f 01       	movw	r12, r30
 46a:	81 11       	cpse	r24, r1
 46c:	c1 cf       	rjmp	.-126    	; 0x3f0 <vfprintf+0x5c>
 46e:	98 2f       	mov	r25, r24
 470:	9f 7d       	andi	r25, 0xDF	; 223
 472:	95 54       	subi	r25, 0x45	; 69
 474:	93 30       	cpi	r25, 0x03	; 3
 476:	28 f4       	brcc	.+10     	; 0x482 <vfprintf+0xee>
 478:	0c 5f       	subi	r16, 0xFC	; 252
 47a:	1f 4f       	sbci	r17, 0xFF	; 255
 47c:	ff e3       	ldi	r31, 0x3F	; 63
 47e:	f9 83       	std	Y+1, r31	; 0x01
 480:	0d c0       	rjmp	.+26     	; 0x49c <vfprintf+0x108>
 482:	83 36       	cpi	r24, 0x63	; 99
 484:	31 f0       	breq	.+12     	; 0x492 <vfprintf+0xfe>
 486:	83 37       	cpi	r24, 0x73	; 115
 488:	71 f0       	breq	.+28     	; 0x4a6 <vfprintf+0x112>
 48a:	83 35       	cpi	r24, 0x53	; 83
 48c:	09 f0       	breq	.+2      	; 0x490 <vfprintf+0xfc>
 48e:	5b c0       	rjmp	.+182    	; 0x546 <__stack+0x47>
 490:	22 c0       	rjmp	.+68     	; 0x4d6 <vfprintf+0x142>
 492:	f8 01       	movw	r30, r16
 494:	80 81       	ld	r24, Z
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	0e 5f       	subi	r16, 0xFE	; 254
 49a:	1f 4f       	sbci	r17, 0xFF	; 255
 49c:	44 24       	eor	r4, r4
 49e:	43 94       	inc	r4
 4a0:	51 2c       	mov	r5, r1
 4a2:	54 01       	movw	r10, r8
 4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <vfprintf+0x13c>
 4a6:	38 01       	movw	r6, r16
 4a8:	f2 e0       	ldi	r31, 0x02	; 2
 4aa:	6f 0e       	add	r6, r31
 4ac:	71 1c       	adc	r7, r1
 4ae:	f8 01       	movw	r30, r16
 4b0:	a0 80       	ld	r10, Z
 4b2:	b1 80       	ldd	r11, Z+1	; 0x01
 4b4:	26 ff       	sbrs	r18, 6
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <vfprintf+0x12a>
 4b8:	65 2d       	mov	r22, r5
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <vfprintf+0x12e>
 4be:	6f ef       	ldi	r22, 0xFF	; 255
 4c0:	7f ef       	ldi	r23, 0xFF	; 255
 4c2:	c5 01       	movw	r24, r10
 4c4:	2c 87       	std	Y+12, r18	; 0x0c
 4c6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <strnlen>
 4ca:	2c 01       	movw	r4, r24
 4cc:	83 01       	movw	r16, r6
 4ce:	2c 85       	ldd	r18, Y+12	; 0x0c
 4d0:	2f 77       	andi	r18, 0x7F	; 127
 4d2:	22 2e       	mov	r2, r18
 4d4:	17 c0       	rjmp	.+46     	; 0x504 <__stack+0x5>
 4d6:	38 01       	movw	r6, r16
 4d8:	f2 e0       	ldi	r31, 0x02	; 2
 4da:	6f 0e       	add	r6, r31
 4dc:	71 1c       	adc	r7, r1
 4de:	f8 01       	movw	r30, r16
 4e0:	a0 80       	ld	r10, Z
 4e2:	b1 80       	ldd	r11, Z+1	; 0x01
 4e4:	26 ff       	sbrs	r18, 6
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <vfprintf+0x15a>
 4e8:	65 2d       	mov	r22, r5
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <vfprintf+0x15e>
 4ee:	6f ef       	ldi	r22, 0xFF	; 255
 4f0:	7f ef       	ldi	r23, 0xFF	; 255
 4f2:	c5 01       	movw	r24, r10
 4f4:	2c 87       	std	Y+12, r18	; 0x0c
 4f6:	0e 94 df 04 	call	0x9be	; 0x9be <strnlen_P>
 4fa:	2c 01       	movw	r4, r24
 4fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 4fe:	20 68       	ori	r18, 0x80	; 128
 500:	22 2e       	mov	r2, r18
 502:	83 01       	movw	r16, r6
 504:	23 fc       	sbrc	r2, 3
 506:	1b c0       	rjmp	.+54     	; 0x53e <__stack+0x3f>
 508:	83 2d       	mov	r24, r3
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	48 16       	cp	r4, r24
 50e:	59 06       	cpc	r5, r25
 510:	b0 f4       	brcc	.+44     	; 0x53e <__stack+0x3f>
 512:	b7 01       	movw	r22, r14
 514:	80 e2       	ldi	r24, 0x20	; 32
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 51c:	3a 94       	dec	r3
 51e:	f4 cf       	rjmp	.-24     	; 0x508 <__stack+0x9>
 520:	f5 01       	movw	r30, r10
 522:	27 fc       	sbrc	r2, 7
 524:	85 91       	lpm	r24, Z+
 526:	27 fe       	sbrs	r2, 7
 528:	81 91       	ld	r24, Z+
 52a:	5f 01       	movw	r10, r30
 52c:	b7 01       	movw	r22, r14
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 534:	31 10       	cpse	r3, r1
 536:	3a 94       	dec	r3
 538:	f1 e0       	ldi	r31, 0x01	; 1
 53a:	4f 1a       	sub	r4, r31
 53c:	51 08       	sbc	r5, r1
 53e:	41 14       	cp	r4, r1
 540:	51 04       	cpc	r5, r1
 542:	71 f7       	brne	.-36     	; 0x520 <__stack+0x21>
 544:	e5 c0       	rjmp	.+458    	; 0x710 <__stack+0x211>
 546:	84 36       	cpi	r24, 0x64	; 100
 548:	11 f0       	breq	.+4      	; 0x54e <__stack+0x4f>
 54a:	89 36       	cpi	r24, 0x69	; 105
 54c:	39 f5       	brne	.+78     	; 0x59c <__stack+0x9d>
 54e:	f8 01       	movw	r30, r16
 550:	27 ff       	sbrs	r18, 7
 552:	07 c0       	rjmp	.+14     	; 0x562 <__stack+0x63>
 554:	60 81       	ld	r22, Z
 556:	71 81       	ldd	r23, Z+1	; 0x01
 558:	82 81       	ldd	r24, Z+2	; 0x02
 55a:	93 81       	ldd	r25, Z+3	; 0x03
 55c:	0c 5f       	subi	r16, 0xFC	; 252
 55e:	1f 4f       	sbci	r17, 0xFF	; 255
 560:	08 c0       	rjmp	.+16     	; 0x572 <__stack+0x73>
 562:	60 81       	ld	r22, Z
 564:	71 81       	ldd	r23, Z+1	; 0x01
 566:	88 27       	eor	r24, r24
 568:	77 fd       	sbrc	r23, 7
 56a:	80 95       	com	r24
 56c:	98 2f       	mov	r25, r24
 56e:	0e 5f       	subi	r16, 0xFE	; 254
 570:	1f 4f       	sbci	r17, 0xFF	; 255
 572:	2f 76       	andi	r18, 0x6F	; 111
 574:	b2 2e       	mov	r11, r18
 576:	97 ff       	sbrs	r25, 7
 578:	09 c0       	rjmp	.+18     	; 0x58c <__stack+0x8d>
 57a:	90 95       	com	r25
 57c:	80 95       	com	r24
 57e:	70 95       	com	r23
 580:	61 95       	neg	r22
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	20 68       	ori	r18, 0x80	; 128
 58a:	b2 2e       	mov	r11, r18
 58c:	2a e0       	ldi	r18, 0x0A	; 10
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	a4 01       	movw	r20, r8
 592:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__ultoa_invert>
 596:	a8 2e       	mov	r10, r24
 598:	a8 18       	sub	r10, r8
 59a:	44 c0       	rjmp	.+136    	; 0x624 <__stack+0x125>
 59c:	85 37       	cpi	r24, 0x75	; 117
 59e:	29 f4       	brne	.+10     	; 0x5aa <__stack+0xab>
 5a0:	2f 7e       	andi	r18, 0xEF	; 239
 5a2:	b2 2e       	mov	r11, r18
 5a4:	2a e0       	ldi	r18, 0x0A	; 10
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	25 c0       	rjmp	.+74     	; 0x5f4 <__stack+0xf5>
 5aa:	f2 2f       	mov	r31, r18
 5ac:	f9 7f       	andi	r31, 0xF9	; 249
 5ae:	bf 2e       	mov	r11, r31
 5b0:	8f 36       	cpi	r24, 0x6F	; 111
 5b2:	c1 f0       	breq	.+48     	; 0x5e4 <__stack+0xe5>
 5b4:	18 f4       	brcc	.+6      	; 0x5bc <__stack+0xbd>
 5b6:	88 35       	cpi	r24, 0x58	; 88
 5b8:	79 f0       	breq	.+30     	; 0x5d8 <__stack+0xd9>
 5ba:	b4 c0       	rjmp	.+360    	; 0x724 <__stack+0x225>
 5bc:	80 37       	cpi	r24, 0x70	; 112
 5be:	19 f0       	breq	.+6      	; 0x5c6 <__stack+0xc7>
 5c0:	88 37       	cpi	r24, 0x78	; 120
 5c2:	21 f0       	breq	.+8      	; 0x5cc <__stack+0xcd>
 5c4:	af c0       	rjmp	.+350    	; 0x724 <__stack+0x225>
 5c6:	2f 2f       	mov	r18, r31
 5c8:	20 61       	ori	r18, 0x10	; 16
 5ca:	b2 2e       	mov	r11, r18
 5cc:	b4 fe       	sbrs	r11, 4
 5ce:	0d c0       	rjmp	.+26     	; 0x5ea <__stack+0xeb>
 5d0:	8b 2d       	mov	r24, r11
 5d2:	84 60       	ori	r24, 0x04	; 4
 5d4:	b8 2e       	mov	r11, r24
 5d6:	09 c0       	rjmp	.+18     	; 0x5ea <__stack+0xeb>
 5d8:	24 ff       	sbrs	r18, 4
 5da:	0a c0       	rjmp	.+20     	; 0x5f0 <__stack+0xf1>
 5dc:	9f 2f       	mov	r25, r31
 5de:	96 60       	ori	r25, 0x06	; 6
 5e0:	b9 2e       	mov	r11, r25
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <__stack+0xf1>
 5e4:	28 e0       	ldi	r18, 0x08	; 8
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <__stack+0xf5>
 5ea:	20 e1       	ldi	r18, 0x10	; 16
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <__stack+0xf5>
 5f0:	20 e1       	ldi	r18, 0x10	; 16
 5f2:	32 e0       	ldi	r19, 0x02	; 2
 5f4:	f8 01       	movw	r30, r16
 5f6:	b7 fe       	sbrs	r11, 7
 5f8:	07 c0       	rjmp	.+14     	; 0x608 <__stack+0x109>
 5fa:	60 81       	ld	r22, Z
 5fc:	71 81       	ldd	r23, Z+1	; 0x01
 5fe:	82 81       	ldd	r24, Z+2	; 0x02
 600:	93 81       	ldd	r25, Z+3	; 0x03
 602:	0c 5f       	subi	r16, 0xFC	; 252
 604:	1f 4f       	sbci	r17, 0xFF	; 255
 606:	06 c0       	rjmp	.+12     	; 0x614 <__stack+0x115>
 608:	60 81       	ld	r22, Z
 60a:	71 81       	ldd	r23, Z+1	; 0x01
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 5f       	subi	r16, 0xFE	; 254
 612:	1f 4f       	sbci	r17, 0xFF	; 255
 614:	a4 01       	movw	r20, r8
 616:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__ultoa_invert>
 61a:	a8 2e       	mov	r10, r24
 61c:	a8 18       	sub	r10, r8
 61e:	fb 2d       	mov	r31, r11
 620:	ff 77       	andi	r31, 0x7F	; 127
 622:	bf 2e       	mov	r11, r31
 624:	b6 fe       	sbrs	r11, 6
 626:	0b c0       	rjmp	.+22     	; 0x63e <__stack+0x13f>
 628:	2b 2d       	mov	r18, r11
 62a:	2e 7f       	andi	r18, 0xFE	; 254
 62c:	a5 14       	cp	r10, r5
 62e:	50 f4       	brcc	.+20     	; 0x644 <__stack+0x145>
 630:	b4 fe       	sbrs	r11, 4
 632:	0a c0       	rjmp	.+20     	; 0x648 <__stack+0x149>
 634:	b2 fc       	sbrc	r11, 2
 636:	08 c0       	rjmp	.+16     	; 0x648 <__stack+0x149>
 638:	2b 2d       	mov	r18, r11
 63a:	2e 7e       	andi	r18, 0xEE	; 238
 63c:	05 c0       	rjmp	.+10     	; 0x648 <__stack+0x149>
 63e:	7a 2c       	mov	r7, r10
 640:	2b 2d       	mov	r18, r11
 642:	03 c0       	rjmp	.+6      	; 0x64a <__stack+0x14b>
 644:	7a 2c       	mov	r7, r10
 646:	01 c0       	rjmp	.+2      	; 0x64a <__stack+0x14b>
 648:	75 2c       	mov	r7, r5
 64a:	24 ff       	sbrs	r18, 4
 64c:	0d c0       	rjmp	.+26     	; 0x668 <__stack+0x169>
 64e:	fe 01       	movw	r30, r28
 650:	ea 0d       	add	r30, r10
 652:	f1 1d       	adc	r31, r1
 654:	80 81       	ld	r24, Z
 656:	80 33       	cpi	r24, 0x30	; 48
 658:	11 f4       	brne	.+4      	; 0x65e <__stack+0x15f>
 65a:	29 7e       	andi	r18, 0xE9	; 233
 65c:	09 c0       	rjmp	.+18     	; 0x670 <__stack+0x171>
 65e:	22 ff       	sbrs	r18, 2
 660:	06 c0       	rjmp	.+12     	; 0x66e <__stack+0x16f>
 662:	73 94       	inc	r7
 664:	73 94       	inc	r7
 666:	04 c0       	rjmp	.+8      	; 0x670 <__stack+0x171>
 668:	82 2f       	mov	r24, r18
 66a:	86 78       	andi	r24, 0x86	; 134
 66c:	09 f0       	breq	.+2      	; 0x670 <__stack+0x171>
 66e:	73 94       	inc	r7
 670:	23 fd       	sbrc	r18, 3
 672:	13 c0       	rjmp	.+38     	; 0x69a <__stack+0x19b>
 674:	20 ff       	sbrs	r18, 0
 676:	06 c0       	rjmp	.+12     	; 0x684 <__stack+0x185>
 678:	5a 2c       	mov	r5, r10
 67a:	73 14       	cp	r7, r3
 67c:	18 f4       	brcc	.+6      	; 0x684 <__stack+0x185>
 67e:	53 0c       	add	r5, r3
 680:	57 18       	sub	r5, r7
 682:	73 2c       	mov	r7, r3
 684:	73 14       	cp	r7, r3
 686:	68 f4       	brcc	.+26     	; 0x6a2 <__stack+0x1a3>
 688:	b7 01       	movw	r22, r14
 68a:	80 e2       	ldi	r24, 0x20	; 32
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	2c 87       	std	Y+12, r18	; 0x0c
 690:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 694:	73 94       	inc	r7
 696:	2c 85       	ldd	r18, Y+12	; 0x0c
 698:	f5 cf       	rjmp	.-22     	; 0x684 <__stack+0x185>
 69a:	73 14       	cp	r7, r3
 69c:	10 f4       	brcc	.+4      	; 0x6a2 <__stack+0x1a3>
 69e:	37 18       	sub	r3, r7
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <__stack+0x1a5>
 6a2:	31 2c       	mov	r3, r1
 6a4:	24 ff       	sbrs	r18, 4
 6a6:	12 c0       	rjmp	.+36     	; 0x6cc <__stack+0x1cd>
 6a8:	b7 01       	movw	r22, r14
 6aa:	80 e3       	ldi	r24, 0x30	; 48
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	2c 87       	std	Y+12, r18	; 0x0c
 6b0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 6b4:	2c 85       	ldd	r18, Y+12	; 0x0c
 6b6:	22 ff       	sbrs	r18, 2
 6b8:	17 c0       	rjmp	.+46     	; 0x6e8 <__stack+0x1e9>
 6ba:	21 ff       	sbrs	r18, 1
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <__stack+0x1c5>
 6be:	88 e5       	ldi	r24, 0x58	; 88
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <__stack+0x1c9>
 6c4:	88 e7       	ldi	r24, 0x78	; 120
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	b7 01       	movw	r22, r14
 6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <__stack+0x1e5>
 6cc:	82 2f       	mov	r24, r18
 6ce:	86 78       	andi	r24, 0x86	; 134
 6d0:	59 f0       	breq	.+22     	; 0x6e8 <__stack+0x1e9>
 6d2:	21 fd       	sbrc	r18, 1
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <__stack+0x1db>
 6d6:	80 e2       	ldi	r24, 0x20	; 32
 6d8:	01 c0       	rjmp	.+2      	; 0x6dc <__stack+0x1dd>
 6da:	8b e2       	ldi	r24, 0x2B	; 43
 6dc:	27 fd       	sbrc	r18, 7
 6de:	8d e2       	ldi	r24, 0x2D	; 45
 6e0:	b7 01       	movw	r22, r14
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 6e8:	a5 14       	cp	r10, r5
 6ea:	38 f4       	brcc	.+14     	; 0x6fa <__stack+0x1fb>
 6ec:	b7 01       	movw	r22, r14
 6ee:	80 e3       	ldi	r24, 0x30	; 48
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 6f6:	5a 94       	dec	r5
 6f8:	f7 cf       	rjmp	.-18     	; 0x6e8 <__stack+0x1e9>
 6fa:	aa 94       	dec	r10
 6fc:	f4 01       	movw	r30, r8
 6fe:	ea 0d       	add	r30, r10
 700:	f1 1d       	adc	r31, r1
 702:	80 81       	ld	r24, Z
 704:	b7 01       	movw	r22, r14
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 70c:	a1 10       	cpse	r10, r1
 70e:	f5 cf       	rjmp	.-22     	; 0x6fa <__stack+0x1fb>
 710:	33 20       	and	r3, r3
 712:	09 f4       	brne	.+2      	; 0x716 <__stack+0x217>
 714:	51 ce       	rjmp	.-862    	; 0x3b8 <vfprintf+0x24>
 716:	b7 01       	movw	r22, r14
 718:	80 e2       	ldi	r24, 0x20	; 32
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 720:	3a 94       	dec	r3
 722:	f6 cf       	rjmp	.-20     	; 0x710 <__stack+0x211>
 724:	f7 01       	movw	r30, r14
 726:	86 81       	ldd	r24, Z+6	; 0x06
 728:	97 81       	ldd	r25, Z+7	; 0x07
 72a:	02 c0       	rjmp	.+4      	; 0x730 <__stack+0x231>
 72c:	8f ef       	ldi	r24, 0xFF	; 255
 72e:	9f ef       	ldi	r25, 0xFF	; 255
 730:	2c 96       	adiw	r28, 0x0c	; 12
 732:	e2 e1       	ldi	r30, 0x12	; 18
 734:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__epilogue_restores__>

00000738 <calloc>:
 738:	0f 93       	push	r16
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	86 9f       	mul	r24, r22
 742:	80 01       	movw	r16, r0
 744:	87 9f       	mul	r24, r23
 746:	10 0d       	add	r17, r0
 748:	96 9f       	mul	r25, r22
 74a:	10 0d       	add	r17, r0
 74c:	11 24       	eor	r1, r1
 74e:	c8 01       	movw	r24, r16
 750:	0e 94 b8 03 	call	0x770	; 0x770 <malloc>
 754:	ec 01       	movw	r28, r24
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	29 f0       	breq	.+10     	; 0x764 <calloc+0x2c>
 75a:	a8 01       	movw	r20, r16
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <memset>
 764:	ce 01       	movw	r24, r28
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	08 95       	ret

00000770 <malloc>:
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	91 05       	cpc	r25, r1
 778:	10 f4       	brcc	.+4      	; 0x77e <malloc+0xe>
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	e0 91 00 02 	lds	r30, 0x0200
 782:	f0 91 01 02 	lds	r31, 0x0201
 786:	20 e0       	ldi	r18, 0x00	; 0
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	a0 e0       	ldi	r26, 0x00	; 0
 78c:	b0 e0       	ldi	r27, 0x00	; 0
 78e:	30 97       	sbiw	r30, 0x00	; 0
 790:	39 f1       	breq	.+78     	; 0x7e0 <malloc+0x70>
 792:	40 81       	ld	r20, Z
 794:	51 81       	ldd	r21, Z+1	; 0x01
 796:	48 17       	cp	r20, r24
 798:	59 07       	cpc	r21, r25
 79a:	b8 f0       	brcs	.+46     	; 0x7ca <malloc+0x5a>
 79c:	48 17       	cp	r20, r24
 79e:	59 07       	cpc	r21, r25
 7a0:	71 f4       	brne	.+28     	; 0x7be <malloc+0x4e>
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	10 97       	sbiw	r26, 0x00	; 0
 7a8:	29 f0       	breq	.+10     	; 0x7b4 <malloc+0x44>
 7aa:	13 96       	adiw	r26, 0x03	; 3
 7ac:	9c 93       	st	X, r25
 7ae:	8e 93       	st	-X, r24
 7b0:	12 97       	sbiw	r26, 0x02	; 2
 7b2:	2c c0       	rjmp	.+88     	; 0x80c <malloc+0x9c>
 7b4:	90 93 01 02 	sts	0x0201, r25
 7b8:	80 93 00 02 	sts	0x0200, r24
 7bc:	27 c0       	rjmp	.+78     	; 0x80c <malloc+0x9c>
 7be:	21 15       	cp	r18, r1
 7c0:	31 05       	cpc	r19, r1
 7c2:	31 f0       	breq	.+12     	; 0x7d0 <malloc+0x60>
 7c4:	42 17       	cp	r20, r18
 7c6:	53 07       	cpc	r21, r19
 7c8:	18 f0       	brcs	.+6      	; 0x7d0 <malloc+0x60>
 7ca:	a9 01       	movw	r20, r18
 7cc:	db 01       	movw	r26, r22
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <malloc+0x62>
 7d0:	ef 01       	movw	r28, r30
 7d2:	9a 01       	movw	r18, r20
 7d4:	bd 01       	movw	r22, r26
 7d6:	df 01       	movw	r26, r30
 7d8:	02 80       	ldd	r0, Z+2	; 0x02
 7da:	f3 81       	ldd	r31, Z+3	; 0x03
 7dc:	e0 2d       	mov	r30, r0
 7de:	d7 cf       	rjmp	.-82     	; 0x78e <malloc+0x1e>
 7e0:	21 15       	cp	r18, r1
 7e2:	31 05       	cpc	r19, r1
 7e4:	f9 f0       	breq	.+62     	; 0x824 <malloc+0xb4>
 7e6:	28 1b       	sub	r18, r24
 7e8:	39 0b       	sbc	r19, r25
 7ea:	24 30       	cpi	r18, 0x04	; 4
 7ec:	31 05       	cpc	r19, r1
 7ee:	80 f4       	brcc	.+32     	; 0x810 <malloc+0xa0>
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
 7f2:	9b 81       	ldd	r25, Y+3	; 0x03
 7f4:	61 15       	cp	r22, r1
 7f6:	71 05       	cpc	r23, r1
 7f8:	21 f0       	breq	.+8      	; 0x802 <malloc+0x92>
 7fa:	fb 01       	movw	r30, r22
 7fc:	93 83       	std	Z+3, r25	; 0x03
 7fe:	82 83       	std	Z+2, r24	; 0x02
 800:	04 c0       	rjmp	.+8      	; 0x80a <malloc+0x9a>
 802:	90 93 01 02 	sts	0x0201, r25
 806:	80 93 00 02 	sts	0x0200, r24
 80a:	fe 01       	movw	r30, r28
 80c:	32 96       	adiw	r30, 0x02	; 2
 80e:	44 c0       	rjmp	.+136    	; 0x898 <malloc+0x128>
 810:	fe 01       	movw	r30, r28
 812:	e2 0f       	add	r30, r18
 814:	f3 1f       	adc	r31, r19
 816:	81 93       	st	Z+, r24
 818:	91 93       	st	Z+, r25
 81a:	22 50       	subi	r18, 0x02	; 2
 81c:	31 09       	sbc	r19, r1
 81e:	39 83       	std	Y+1, r19	; 0x01
 820:	28 83       	st	Y, r18
 822:	3a c0       	rjmp	.+116    	; 0x898 <malloc+0x128>
 824:	20 91 fe 01 	lds	r18, 0x01FE
 828:	30 91 ff 01 	lds	r19, 0x01FF
 82c:	23 2b       	or	r18, r19
 82e:	41 f4       	brne	.+16     	; 0x840 <malloc+0xd0>
 830:	20 91 06 01 	lds	r18, 0x0106
 834:	30 91 07 01 	lds	r19, 0x0107
 838:	30 93 ff 01 	sts	0x01FF, r19
 83c:	20 93 fe 01 	sts	0x01FE, r18
 840:	20 91 04 01 	lds	r18, 0x0104
 844:	30 91 05 01 	lds	r19, 0x0105
 848:	21 15       	cp	r18, r1
 84a:	31 05       	cpc	r19, r1
 84c:	41 f4       	brne	.+16     	; 0x85e <malloc+0xee>
 84e:	2d b7       	in	r18, 0x3d	; 61
 850:	3e b7       	in	r19, 0x3e	; 62
 852:	40 91 08 01 	lds	r20, 0x0108
 856:	50 91 09 01 	lds	r21, 0x0109
 85a:	24 1b       	sub	r18, r20
 85c:	35 0b       	sbc	r19, r21
 85e:	e0 91 fe 01 	lds	r30, 0x01FE
 862:	f0 91 ff 01 	lds	r31, 0x01FF
 866:	e2 17       	cp	r30, r18
 868:	f3 07       	cpc	r31, r19
 86a:	a0 f4       	brcc	.+40     	; 0x894 <malloc+0x124>
 86c:	2e 1b       	sub	r18, r30
 86e:	3f 0b       	sbc	r19, r31
 870:	28 17       	cp	r18, r24
 872:	39 07       	cpc	r19, r25
 874:	78 f0       	brcs	.+30     	; 0x894 <malloc+0x124>
 876:	ac 01       	movw	r20, r24
 878:	4e 5f       	subi	r20, 0xFE	; 254
 87a:	5f 4f       	sbci	r21, 0xFF	; 255
 87c:	24 17       	cp	r18, r20
 87e:	35 07       	cpc	r19, r21
 880:	48 f0       	brcs	.+18     	; 0x894 <malloc+0x124>
 882:	4e 0f       	add	r20, r30
 884:	5f 1f       	adc	r21, r31
 886:	50 93 ff 01 	sts	0x01FF, r21
 88a:	40 93 fe 01 	sts	0x01FE, r20
 88e:	81 93       	st	Z+, r24
 890:	91 93       	st	Z+, r25
 892:	02 c0       	rjmp	.+4      	; 0x898 <malloc+0x128>
 894:	e0 e0       	ldi	r30, 0x00	; 0
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	cf 01       	movw	r24, r30
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <free>:
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	00 97       	sbiw	r24, 0x00	; 0
 8a6:	09 f4       	brne	.+2      	; 0x8aa <free+0xa>
 8a8:	87 c0       	rjmp	.+270    	; 0x9b8 <free+0x118>
 8aa:	fc 01       	movw	r30, r24
 8ac:	32 97       	sbiw	r30, 0x02	; 2
 8ae:	13 82       	std	Z+3, r1	; 0x03
 8b0:	12 82       	std	Z+2, r1	; 0x02
 8b2:	c0 91 00 02 	lds	r28, 0x0200
 8b6:	d0 91 01 02 	lds	r29, 0x0201
 8ba:	20 97       	sbiw	r28, 0x00	; 0
 8bc:	81 f4       	brne	.+32     	; 0x8de <free+0x3e>
 8be:	20 81       	ld	r18, Z
 8c0:	31 81       	ldd	r19, Z+1	; 0x01
 8c2:	28 0f       	add	r18, r24
 8c4:	39 1f       	adc	r19, r25
 8c6:	80 91 fe 01 	lds	r24, 0x01FE
 8ca:	90 91 ff 01 	lds	r25, 0x01FF
 8ce:	82 17       	cp	r24, r18
 8d0:	93 07       	cpc	r25, r19
 8d2:	79 f5       	brne	.+94     	; 0x932 <free+0x92>
 8d4:	f0 93 ff 01 	sts	0x01FF, r31
 8d8:	e0 93 fe 01 	sts	0x01FE, r30
 8dc:	6d c0       	rjmp	.+218    	; 0x9b8 <free+0x118>
 8de:	de 01       	movw	r26, r28
 8e0:	20 e0       	ldi	r18, 0x00	; 0
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	ae 17       	cp	r26, r30
 8e6:	bf 07       	cpc	r27, r31
 8e8:	50 f4       	brcc	.+20     	; 0x8fe <free+0x5e>
 8ea:	12 96       	adiw	r26, 0x02	; 2
 8ec:	4d 91       	ld	r20, X+
 8ee:	5c 91       	ld	r21, X
 8f0:	13 97       	sbiw	r26, 0x03	; 3
 8f2:	9d 01       	movw	r18, r26
 8f4:	41 15       	cp	r20, r1
 8f6:	51 05       	cpc	r21, r1
 8f8:	09 f1       	breq	.+66     	; 0x93c <free+0x9c>
 8fa:	da 01       	movw	r26, r20
 8fc:	f3 cf       	rjmp	.-26     	; 0x8e4 <free+0x44>
 8fe:	b3 83       	std	Z+3, r27	; 0x03
 900:	a2 83       	std	Z+2, r26	; 0x02
 902:	40 81       	ld	r20, Z
 904:	51 81       	ldd	r21, Z+1	; 0x01
 906:	84 0f       	add	r24, r20
 908:	95 1f       	adc	r25, r21
 90a:	8a 17       	cp	r24, r26
 90c:	9b 07       	cpc	r25, r27
 90e:	71 f4       	brne	.+28     	; 0x92c <free+0x8c>
 910:	8d 91       	ld	r24, X+
 912:	9c 91       	ld	r25, X
 914:	11 97       	sbiw	r26, 0x01	; 1
 916:	84 0f       	add	r24, r20
 918:	95 1f       	adc	r25, r21
 91a:	02 96       	adiw	r24, 0x02	; 2
 91c:	91 83       	std	Z+1, r25	; 0x01
 91e:	80 83       	st	Z, r24
 920:	12 96       	adiw	r26, 0x02	; 2
 922:	8d 91       	ld	r24, X+
 924:	9c 91       	ld	r25, X
 926:	13 97       	sbiw	r26, 0x03	; 3
 928:	93 83       	std	Z+3, r25	; 0x03
 92a:	82 83       	std	Z+2, r24	; 0x02
 92c:	21 15       	cp	r18, r1
 92e:	31 05       	cpc	r19, r1
 930:	29 f4       	brne	.+10     	; 0x93c <free+0x9c>
 932:	f0 93 01 02 	sts	0x0201, r31
 936:	e0 93 00 02 	sts	0x0200, r30
 93a:	3e c0       	rjmp	.+124    	; 0x9b8 <free+0x118>
 93c:	d9 01       	movw	r26, r18
 93e:	13 96       	adiw	r26, 0x03	; 3
 940:	fc 93       	st	X, r31
 942:	ee 93       	st	-X, r30
 944:	12 97       	sbiw	r26, 0x02	; 2
 946:	4d 91       	ld	r20, X+
 948:	5d 91       	ld	r21, X+
 94a:	a4 0f       	add	r26, r20
 94c:	b5 1f       	adc	r27, r21
 94e:	ea 17       	cp	r30, r26
 950:	fb 07       	cpc	r31, r27
 952:	79 f4       	brne	.+30     	; 0x972 <free+0xd2>
 954:	80 81       	ld	r24, Z
 956:	91 81       	ldd	r25, Z+1	; 0x01
 958:	84 0f       	add	r24, r20
 95a:	95 1f       	adc	r25, r21
 95c:	02 96       	adiw	r24, 0x02	; 2
 95e:	d9 01       	movw	r26, r18
 960:	11 96       	adiw	r26, 0x01	; 1
 962:	9c 93       	st	X, r25
 964:	8e 93       	st	-X, r24
 966:	82 81       	ldd	r24, Z+2	; 0x02
 968:	93 81       	ldd	r25, Z+3	; 0x03
 96a:	13 96       	adiw	r26, 0x03	; 3
 96c:	9c 93       	st	X, r25
 96e:	8e 93       	st	-X, r24
 970:	12 97       	sbiw	r26, 0x02	; 2
 972:	e0 e0       	ldi	r30, 0x00	; 0
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	8a 81       	ldd	r24, Y+2	; 0x02
 978:	9b 81       	ldd	r25, Y+3	; 0x03
 97a:	00 97       	sbiw	r24, 0x00	; 0
 97c:	19 f0       	breq	.+6      	; 0x984 <free+0xe4>
 97e:	fe 01       	movw	r30, r28
 980:	ec 01       	movw	r28, r24
 982:	f9 cf       	rjmp	.-14     	; 0x976 <free+0xd6>
 984:	ce 01       	movw	r24, r28
 986:	02 96       	adiw	r24, 0x02	; 2
 988:	28 81       	ld	r18, Y
 98a:	39 81       	ldd	r19, Y+1	; 0x01
 98c:	82 0f       	add	r24, r18
 98e:	93 1f       	adc	r25, r19
 990:	20 91 fe 01 	lds	r18, 0x01FE
 994:	30 91 ff 01 	lds	r19, 0x01FF
 998:	28 17       	cp	r18, r24
 99a:	39 07       	cpc	r19, r25
 99c:	69 f4       	brne	.+26     	; 0x9b8 <free+0x118>
 99e:	30 97       	sbiw	r30, 0x00	; 0
 9a0:	29 f4       	brne	.+10     	; 0x9ac <free+0x10c>
 9a2:	10 92 01 02 	sts	0x0201, r1
 9a6:	10 92 00 02 	sts	0x0200, r1
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <free+0x110>
 9ac:	13 82       	std	Z+3, r1	; 0x03
 9ae:	12 82       	std	Z+2, r1	; 0x02
 9b0:	d0 93 ff 01 	sts	0x01FF, r29
 9b4:	c0 93 fe 01 	sts	0x01FE, r28
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	08 95       	ret

000009be <strnlen_P>:
 9be:	fc 01       	movw	r30, r24
 9c0:	05 90       	lpm	r0, Z+
 9c2:	61 50       	subi	r22, 0x01	; 1
 9c4:	70 40       	sbci	r23, 0x00	; 0
 9c6:	01 10       	cpse	r0, r1
 9c8:	d8 f7       	brcc	.-10     	; 0x9c0 <strnlen_P+0x2>
 9ca:	80 95       	com	r24
 9cc:	90 95       	com	r25
 9ce:	8e 0f       	add	r24, r30
 9d0:	9f 1f       	adc	r25, r31
 9d2:	08 95       	ret

000009d4 <memset>:
 9d4:	dc 01       	movw	r26, r24
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <memset+0x6>
 9d8:	6d 93       	st	X+, r22
 9da:	41 50       	subi	r20, 0x01	; 1
 9dc:	50 40       	sbci	r21, 0x00	; 0
 9de:	e0 f7       	brcc	.-8      	; 0x9d8 <memset+0x4>
 9e0:	08 95       	ret

000009e2 <strnlen>:
 9e2:	fc 01       	movw	r30, r24
 9e4:	61 50       	subi	r22, 0x01	; 1
 9e6:	70 40       	sbci	r23, 0x00	; 0
 9e8:	01 90       	ld	r0, Z+
 9ea:	01 10       	cpse	r0, r1
 9ec:	d8 f7       	brcc	.-10     	; 0x9e4 <strnlen+0x2>
 9ee:	80 95       	com	r24
 9f0:	90 95       	com	r25
 9f2:	8e 0f       	add	r24, r30
 9f4:	9f 1f       	adc	r25, r31
 9f6:	08 95       	ret

000009f8 <fputc>:
 9f8:	0f 93       	push	r16
 9fa:	1f 93       	push	r17
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	18 2f       	mov	r17, r24
 a02:	09 2f       	mov	r16, r25
 a04:	eb 01       	movw	r28, r22
 a06:	8b 81       	ldd	r24, Y+3	; 0x03
 a08:	81 fd       	sbrc	r24, 1
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <fputc+0x1a>
 a0c:	8f ef       	ldi	r24, 0xFF	; 255
 a0e:	9f ef       	ldi	r25, 0xFF	; 255
 a10:	20 c0       	rjmp	.+64     	; 0xa52 <fputc+0x5a>
 a12:	82 ff       	sbrs	r24, 2
 a14:	10 c0       	rjmp	.+32     	; 0xa36 <fputc+0x3e>
 a16:	4e 81       	ldd	r20, Y+6	; 0x06
 a18:	5f 81       	ldd	r21, Y+7	; 0x07
 a1a:	2c 81       	ldd	r18, Y+4	; 0x04
 a1c:	3d 81       	ldd	r19, Y+5	; 0x05
 a1e:	42 17       	cp	r20, r18
 a20:	53 07       	cpc	r21, r19
 a22:	7c f4       	brge	.+30     	; 0xa42 <fputc+0x4a>
 a24:	e8 81       	ld	r30, Y
 a26:	f9 81       	ldd	r31, Y+1	; 0x01
 a28:	9f 01       	movw	r18, r30
 a2a:	2f 5f       	subi	r18, 0xFF	; 255
 a2c:	3f 4f       	sbci	r19, 0xFF	; 255
 a2e:	39 83       	std	Y+1, r19	; 0x01
 a30:	28 83       	st	Y, r18
 a32:	10 83       	st	Z, r17
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <fputc+0x4a>
 a36:	e8 85       	ldd	r30, Y+8	; 0x08
 a38:	f9 85       	ldd	r31, Y+9	; 0x09
 a3a:	81 2f       	mov	r24, r17
 a3c:	09 95       	icall
 a3e:	89 2b       	or	r24, r25
 a40:	29 f7       	brne	.-54     	; 0xa0c <fputc+0x14>
 a42:	2e 81       	ldd	r18, Y+6	; 0x06
 a44:	3f 81       	ldd	r19, Y+7	; 0x07
 a46:	2f 5f       	subi	r18, 0xFF	; 255
 a48:	3f 4f       	sbci	r19, 0xFF	; 255
 a4a:	3f 83       	std	Y+7, r19	; 0x07
 a4c:	2e 83       	std	Y+6, r18	; 0x06
 a4e:	81 2f       	mov	r24, r17
 a50:	90 2f       	mov	r25, r16
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	1f 91       	pop	r17
 a58:	0f 91       	pop	r16
 a5a:	08 95       	ret

00000a5c <__ultoa_invert>:
 a5c:	fa 01       	movw	r30, r20
 a5e:	aa 27       	eor	r26, r26
 a60:	28 30       	cpi	r18, 0x08	; 8
 a62:	51 f1       	breq	.+84     	; 0xab8 <__ultoa_invert+0x5c>
 a64:	20 31       	cpi	r18, 0x10	; 16
 a66:	81 f1       	breq	.+96     	; 0xac8 <__ultoa_invert+0x6c>
 a68:	e8 94       	clt
 a6a:	6f 93       	push	r22
 a6c:	6e 7f       	andi	r22, 0xFE	; 254
 a6e:	6e 5f       	subi	r22, 0xFE	; 254
 a70:	7f 4f       	sbci	r23, 0xFF	; 255
 a72:	8f 4f       	sbci	r24, 0xFF	; 255
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	af 4f       	sbci	r26, 0xFF	; 255
 a78:	b1 e0       	ldi	r27, 0x01	; 1
 a7a:	3e d0       	rcall	.+124    	; 0xaf8 <__ultoa_invert+0x9c>
 a7c:	b4 e0       	ldi	r27, 0x04	; 4
 a7e:	3c d0       	rcall	.+120    	; 0xaf8 <__ultoa_invert+0x9c>
 a80:	67 0f       	add	r22, r23
 a82:	78 1f       	adc	r23, r24
 a84:	89 1f       	adc	r24, r25
 a86:	9a 1f       	adc	r25, r26
 a88:	a1 1d       	adc	r26, r1
 a8a:	68 0f       	add	r22, r24
 a8c:	79 1f       	adc	r23, r25
 a8e:	8a 1f       	adc	r24, r26
 a90:	91 1d       	adc	r25, r1
 a92:	a1 1d       	adc	r26, r1
 a94:	6a 0f       	add	r22, r26
 a96:	71 1d       	adc	r23, r1
 a98:	81 1d       	adc	r24, r1
 a9a:	91 1d       	adc	r25, r1
 a9c:	a1 1d       	adc	r26, r1
 a9e:	20 d0       	rcall	.+64     	; 0xae0 <__ultoa_invert+0x84>
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <__ultoa_invert+0x48>
 aa2:	68 94       	set
 aa4:	3f 91       	pop	r19
 aa6:	2a e0       	ldi	r18, 0x0A	; 10
 aa8:	26 9f       	mul	r18, r22
 aaa:	11 24       	eor	r1, r1
 aac:	30 19       	sub	r19, r0
 aae:	30 5d       	subi	r19, 0xD0	; 208
 ab0:	31 93       	st	Z+, r19
 ab2:	de f6       	brtc	.-74     	; 0xa6a <__ultoa_invert+0xe>
 ab4:	cf 01       	movw	r24, r30
 ab6:	08 95       	ret
 ab8:	46 2f       	mov	r20, r22
 aba:	47 70       	andi	r20, 0x07	; 7
 abc:	40 5d       	subi	r20, 0xD0	; 208
 abe:	41 93       	st	Z+, r20
 ac0:	b3 e0       	ldi	r27, 0x03	; 3
 ac2:	0f d0       	rcall	.+30     	; 0xae2 <__ultoa_invert+0x86>
 ac4:	c9 f7       	brne	.-14     	; 0xab8 <__ultoa_invert+0x5c>
 ac6:	f6 cf       	rjmp	.-20     	; 0xab4 <__ultoa_invert+0x58>
 ac8:	46 2f       	mov	r20, r22
 aca:	4f 70       	andi	r20, 0x0F	; 15
 acc:	40 5d       	subi	r20, 0xD0	; 208
 ace:	4a 33       	cpi	r20, 0x3A	; 58
 ad0:	18 f0       	brcs	.+6      	; 0xad8 <__ultoa_invert+0x7c>
 ad2:	49 5d       	subi	r20, 0xD9	; 217
 ad4:	31 fd       	sbrc	r19, 1
 ad6:	40 52       	subi	r20, 0x20	; 32
 ad8:	41 93       	st	Z+, r20
 ada:	02 d0       	rcall	.+4      	; 0xae0 <__ultoa_invert+0x84>
 adc:	a9 f7       	brne	.-22     	; 0xac8 <__ultoa_invert+0x6c>
 ade:	ea cf       	rjmp	.-44     	; 0xab4 <__ultoa_invert+0x58>
 ae0:	b4 e0       	ldi	r27, 0x04	; 4
 ae2:	a6 95       	lsr	r26
 ae4:	97 95       	ror	r25
 ae6:	87 95       	ror	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	ba 95       	dec	r27
 aee:	c9 f7       	brne	.-14     	; 0xae2 <__ultoa_invert+0x86>
 af0:	00 97       	sbiw	r24, 0x00	; 0
 af2:	61 05       	cpc	r22, r1
 af4:	71 05       	cpc	r23, r1
 af6:	08 95       	ret
 af8:	9b 01       	movw	r18, r22
 afa:	ac 01       	movw	r20, r24
 afc:	0a 2e       	mov	r0, r26
 afe:	06 94       	lsr	r0
 b00:	57 95       	ror	r21
 b02:	47 95       	ror	r20
 b04:	37 95       	ror	r19
 b06:	27 95       	ror	r18
 b08:	ba 95       	dec	r27
 b0a:	c9 f7       	brne	.-14     	; 0xafe <__ultoa_invert+0xa2>
 b0c:	62 0f       	add	r22, r18
 b0e:	73 1f       	adc	r23, r19
 b10:	84 1f       	adc	r24, r20
 b12:	95 1f       	adc	r25, r21
 b14:	a0 1d       	adc	r26, r0
 b16:	08 95       	ret

00000b18 <__divmodsi4>:
 b18:	05 2e       	mov	r0, r21
 b1a:	97 fb       	bst	r25, 7
 b1c:	1e f4       	brtc	.+6      	; 0xb24 <__divmodsi4+0xc>
 b1e:	00 94       	com	r0
 b20:	0e 94 a3 05 	call	0xb46	; 0xb46 <__negsi2>
 b24:	57 fd       	sbrc	r21, 7
 b26:	07 d0       	rcall	.+14     	; 0xb36 <__divmodsi4_neg2>
 b28:	0e 94 f5 05 	call	0xbea	; 0xbea <__udivmodsi4>
 b2c:	07 fc       	sbrc	r0, 7
 b2e:	03 d0       	rcall	.+6      	; 0xb36 <__divmodsi4_neg2>
 b30:	4e f4       	brtc	.+18     	; 0xb44 <__divmodsi4_exit>
 b32:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__negsi2>

00000b36 <__divmodsi4_neg2>:
 b36:	50 95       	com	r21
 b38:	40 95       	com	r20
 b3a:	30 95       	com	r19
 b3c:	21 95       	neg	r18
 b3e:	3f 4f       	sbci	r19, 0xFF	; 255
 b40:	4f 4f       	sbci	r20, 0xFF	; 255
 b42:	5f 4f       	sbci	r21, 0xFF	; 255

00000b44 <__divmodsi4_exit>:
 b44:	08 95       	ret

00000b46 <__negsi2>:
 b46:	90 95       	com	r25
 b48:	80 95       	com	r24
 b4a:	70 95       	com	r23
 b4c:	61 95       	neg	r22
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	08 95       	ret

00000b56 <__muluhisi3>:
 b56:	0e 94 17 06 	call	0xc2e	; 0xc2e <__umulhisi3>
 b5a:	a5 9f       	mul	r26, r21
 b5c:	90 0d       	add	r25, r0
 b5e:	b4 9f       	mul	r27, r20
 b60:	90 0d       	add	r25, r0
 b62:	a4 9f       	mul	r26, r20
 b64:	80 0d       	add	r24, r0
 b66:	91 1d       	adc	r25, r1
 b68:	11 24       	eor	r1, r1
 b6a:	08 95       	ret

00000b6c <__mulshisi3>:
 b6c:	b7 ff       	sbrs	r27, 7
 b6e:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__muluhisi3>

00000b72 <__mulohisi3>:
 b72:	0e 94 ab 05 	call	0xb56	; 0xb56 <__muluhisi3>
 b76:	82 1b       	sub	r24, r18
 b78:	93 0b       	sbc	r25, r19
 b7a:	08 95       	ret

00000b7c <__prologue_saves__>:
 b7c:	2f 92       	push	r2
 b7e:	3f 92       	push	r3
 b80:	4f 92       	push	r4
 b82:	5f 92       	push	r5
 b84:	6f 92       	push	r6
 b86:	7f 92       	push	r7
 b88:	8f 92       	push	r8
 b8a:	9f 92       	push	r9
 b8c:	af 92       	push	r10
 b8e:	bf 92       	push	r11
 b90:	cf 92       	push	r12
 b92:	df 92       	push	r13
 b94:	ef 92       	push	r14
 b96:	ff 92       	push	r15
 b98:	0f 93       	push	r16
 b9a:	1f 93       	push	r17
 b9c:	cf 93       	push	r28
 b9e:	df 93       	push	r29
 ba0:	cd b7       	in	r28, 0x3d	; 61
 ba2:	de b7       	in	r29, 0x3e	; 62
 ba4:	ca 1b       	sub	r28, r26
 ba6:	db 0b       	sbc	r29, r27
 ba8:	0f b6       	in	r0, 0x3f	; 63
 baa:	f8 94       	cli
 bac:	de bf       	out	0x3e, r29	; 62
 bae:	0f be       	out	0x3f, r0	; 63
 bb0:	cd bf       	out	0x3d, r28	; 61
 bb2:	09 94       	ijmp

00000bb4 <__epilogue_restores__>:
 bb4:	2a 88       	ldd	r2, Y+18	; 0x12
 bb6:	39 88       	ldd	r3, Y+17	; 0x11
 bb8:	48 88       	ldd	r4, Y+16	; 0x10
 bba:	5f 84       	ldd	r5, Y+15	; 0x0f
 bbc:	6e 84       	ldd	r6, Y+14	; 0x0e
 bbe:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc0:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc2:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc4:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc6:	b9 84       	ldd	r11, Y+9	; 0x09
 bc8:	c8 84       	ldd	r12, Y+8	; 0x08
 bca:	df 80       	ldd	r13, Y+7	; 0x07
 bcc:	ee 80       	ldd	r14, Y+6	; 0x06
 bce:	fd 80       	ldd	r15, Y+5	; 0x05
 bd0:	0c 81       	ldd	r16, Y+4	; 0x04
 bd2:	1b 81       	ldd	r17, Y+3	; 0x03
 bd4:	aa 81       	ldd	r26, Y+2	; 0x02
 bd6:	b9 81       	ldd	r27, Y+1	; 0x01
 bd8:	ce 0f       	add	r28, r30
 bda:	d1 1d       	adc	r29, r1
 bdc:	0f b6       	in	r0, 0x3f	; 63
 bde:	f8 94       	cli
 be0:	de bf       	out	0x3e, r29	; 62
 be2:	0f be       	out	0x3f, r0	; 63
 be4:	cd bf       	out	0x3d, r28	; 61
 be6:	ed 01       	movw	r28, r26
 be8:	08 95       	ret

00000bea <__udivmodsi4>:
 bea:	a1 e2       	ldi	r26, 0x21	; 33
 bec:	1a 2e       	mov	r1, r26
 bee:	aa 1b       	sub	r26, r26
 bf0:	bb 1b       	sub	r27, r27
 bf2:	fd 01       	movw	r30, r26
 bf4:	0d c0       	rjmp	.+26     	; 0xc10 <__udivmodsi4_ep>

00000bf6 <__udivmodsi4_loop>:
 bf6:	aa 1f       	adc	r26, r26
 bf8:	bb 1f       	adc	r27, r27
 bfa:	ee 1f       	adc	r30, r30
 bfc:	ff 1f       	adc	r31, r31
 bfe:	a2 17       	cp	r26, r18
 c00:	b3 07       	cpc	r27, r19
 c02:	e4 07       	cpc	r30, r20
 c04:	f5 07       	cpc	r31, r21
 c06:	20 f0       	brcs	.+8      	; 0xc10 <__udivmodsi4_ep>
 c08:	a2 1b       	sub	r26, r18
 c0a:	b3 0b       	sbc	r27, r19
 c0c:	e4 0b       	sbc	r30, r20
 c0e:	f5 0b       	sbc	r31, r21

00000c10 <__udivmodsi4_ep>:
 c10:	66 1f       	adc	r22, r22
 c12:	77 1f       	adc	r23, r23
 c14:	88 1f       	adc	r24, r24
 c16:	99 1f       	adc	r25, r25
 c18:	1a 94       	dec	r1
 c1a:	69 f7       	brne	.-38     	; 0xbf6 <__udivmodsi4_loop>
 c1c:	60 95       	com	r22
 c1e:	70 95       	com	r23
 c20:	80 95       	com	r24
 c22:	90 95       	com	r25
 c24:	9b 01       	movw	r18, r22
 c26:	ac 01       	movw	r20, r24
 c28:	bd 01       	movw	r22, r26
 c2a:	cf 01       	movw	r24, r30
 c2c:	08 95       	ret

00000c2e <__umulhisi3>:
 c2e:	a2 9f       	mul	r26, r18
 c30:	b0 01       	movw	r22, r0
 c32:	b3 9f       	mul	r27, r19
 c34:	c0 01       	movw	r24, r0
 c36:	a3 9f       	mul	r26, r19
 c38:	70 0d       	add	r23, r0
 c3a:	81 1d       	adc	r24, r1
 c3c:	11 24       	eor	r1, r1
 c3e:	91 1d       	adc	r25, r1
 c40:	b2 9f       	mul	r27, r18
 c42:	70 0d       	add	r23, r0
 c44:	81 1d       	adc	r24, r1
 c46:	11 24       	eor	r1, r1
 c48:	91 1d       	adc	r25, r1
 c4a:	08 95       	ret

00000c4c <_exit>:
 c4c:	f8 94       	cli

00000c4e <__stop_program>:
 c4e:	ff cf       	rjmp	.-2      	; 0xc4e <__stop_program>
